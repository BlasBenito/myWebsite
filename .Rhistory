) %do% {
#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- sites[sites$site %in% site.one, "taxon"]
taxa.list.two <- sites[sites$site %in% site.two, "taxon"]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
return(beta)
}
betadiversity.df
rownames(betadiversity.df) <- NULL
kableExtra::kable(betadiversity.df)
sorensen_beta <- function(x){
x$bsor <- round(2 * x$a / (2 * x$a + x$b + x$c), 4)
return(x)
}
simpson_beta <- function(x){
x$bsim <- round(min(x$b, x$c) / (min(x$b, x$c) + x$a), 4)
return(x)
}
library(magrittr)
library(foreach)
library(doParallel)
all.taxa <- paste0("taxon_", 1:15)
site1 <- site2 <- all.taxa[1:7]
site3 <- all.taxa[8:12]
site4 <- all.taxa[10:15]
site1 #and site2
site3
site4
a <- length(intersect(site3, site4))
a
b <- length(setdiff(site3, site4))
b
c <- length(setdiff(site4, site3))
c
Bsor <- 2 * a / (2 * a + b + c)
Bsor
Bsim<- min(b, c) / (min(b, c) + a)
Bsim
#x: taxa list of one site
#y: taxa list of another site
abc <- function(x, y){
#list to store output
out <- list()
#filling the list
out$a <- length(intersect(x, y))
out$b <- length(setdiff(x, y))
out$c <- length(setdiff(y, x))
#returning the output
return(out)
}
x <- abc(
x = site3,
y = site4
)
x
sorensen_beta <- function(x){
x$bsor <- round(2 * x$a / (2 * x$a + x$b + x$c), 4)
return(x)
}
simpson_beta <- function(x){
x$bsim <- round(min(x$b, x$c) / (min(x$b, x$c) + x$a), 4)
return(x)
}
sorensen_beta(x)
simpson_beta(x)
x <- abc(x = site3, y = site4) %>%
sorensen_beta() %>%
simpson_beta()
x
betadiversity <- function(x, y){
require(magrittr)
abc(x, y) %>%
sorensen_beta() %>%
simpson_beta() %>%
return()
}
x <- betadiversity(x = site3, y = site4)
x
x1 <- betadiversity(x = site1, y = site2)
x2 <- betadiversity(x = site1, y = site3)
x3 <- betadiversity(x = site1, y = site4)
sites <- data.frame(
site = c(
rep("site1", length(site1)),
rep("site2", length(site2)),
rep("site3", length(site3)),
rep("site4", length(site4))
),
taxon = c(
site1,
site2,
site3,
site4
)
)
kableExtra::kable(sites)
site.combinations <- utils::combn(
x = unique(sites$site),
m = 2
)
site.combinations
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations),
.combine = 'rbind'
) %do% {
#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- sites[sites$site %in% site.one, "taxon"]
taxa.list.two <- sites[sites$site %in% site.two, "taxon"]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
return(beta)
}
rownames(betadiversity.df) <- NULL
kableExtra::kable(betadiversity.df)
rownames(betadiversity.df) <- NULL
kableExtra::kable(betadiversity.df)
library(magrittr)
library(foreach)
library(doParallel)
all.taxa <- paste0("taxon_", 1:15)
site1 <- site2 <- all.taxa[1:7]
site3 <- all.taxa[8:12]
site4 <- all.taxa[10:15]
site1 #and site2
site3
site4
a <- length(intersect(site3, site4))
a
b <- length(setdiff(site3, site4))
b
c <- length(setdiff(site4, site3))
c
Bsor <- 2 * a / (2 * a + b + c)
Bsor
Bsim<- min(b, c) / (min(b, c) + a)
Bsim
#x: taxa list of one site
#y: taxa list of another site
abc <- function(x, y){
#list to store output
out <- list()
#filling the list
out$a <- length(intersect(x, y))
out$b <- length(setdiff(x, y))
out$c <- length(setdiff(y, x))
#returning the output
return(out)
}
x <- abc(
x = site3,
y = site4
)
x
sorensen_beta <- function(x){
x$bsor <- round(2 * x$a / (2 * x$a + x$b + x$c), 3)
return(x)
}
simpson_beta <- function(x){
x$bsim <- round(min(x$b, x$c) / (min(x$b, x$c) + x$a), 3)
return(x)
}
sorensen_beta(x)
simpson_beta(x)
x <- abc(x = site3, y = site4) %>%
sorensen_beta() %>%
simpson_beta()
x
betadiversity <- function(x, y){
require(magrittr)
abc(x, y) %>%
sorensen_beta() %>%
simpson_beta() %>%
return()
}
x <- betadiversity(x = site3, y = site4)
x
x1 <- betadiversity(x = site1, y = site2)
x2 <- betadiversity(x = site1, y = site3)
x3 <- betadiversity(x = site1, y = site4)
sites <- data.frame(
site = c(
rep("site1", length(site1)),
rep("site2", length(site2)),
rep("site3", length(site3)),
rep("site4", length(site4))
),
taxon = c(
site1,
site2,
site3,
site4
)
)
kableExtra::kable(sites)
site.combinations <- utils::combn(
x = unique(sites$site),
m = 2
)
site.combinations
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations),
.combine = 'rbind'
) %do% {
#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- sites[sites$site %in% site.one, "taxon"]
taxa.list.two <- sites[sites$site %in% site.two, "taxon"]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
return(beta)
}
rownames(betadiversity.df) <- NULL
kableExtra::kable(betadiversity.df)
names(betadiversity.df)
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations),
.combine = 'rbind'
) %do% {
#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- sites[sites$site %in% site.one, "taxon"]
taxa.list.two <- sites[sites$site %in% site.two, "taxon"]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
return(beta)
}
names(betadiversity.df)
betadiversity.df
colnames(betadiversity.df)
betadiversity_multisite <- function(
x,
site.column, #column with site names
taxa.column #column with taxa names
){
#get site combinations
site.combinations <- utils::combn(
x = unique(x[, site.column]),
m = 2
)
#iterating through site pairs
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations),
.combine = 'rbind'
) %do% {
#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- x[x[, site.column] %in% site.one, taxa.column]
taxa.list.two <- x[x[, site.column] %in% site.two, taxa.column]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
return(beta)
}
#remove bad rownames
rownames(betadiversity.df) <- NULL
#reordering columns
betadiversity.df <- betadiversity.df[, c(
"site.one",
"site.two",
"a",
"b",
"c",
"bsor",
"bsim"
)]
#returning output
return(betadiversity.df)
}
colnames(sites)
source("https://gist.githubusercontent.com/BlasBenito/4c3740b056a0c9bb3602f33dfd35990c/raw/bbb40d868787fc5d10e391a2121045eb5d75f165/functions_betadiversity.R")
x <- list()
x$a <- 1
f <- function(x){
x$b <- 2
}
f(x)
x <- list()
x$a <- 1
f <- function(x){
x$b <- 2
}
out <- f(x)
out
f <- function(x){
x$b <- 2
return(x)
}
out <- f(x)
out
x <- list()
x$a <- 1
f <- function(x){
x$b <- 2
}
out <- f(x)
out
f2 <- function(x){
x$b <- 2
return(x)
}
out2 <- f2(x)
out2
f2(x)
install.packages("VennDiagram")
library(VennDiagram)
blogdown::serve_site()
library(magrittr)
library(foreach)
library(doParallel)
taxa <- paste0("taxon_", 1:15)
site1 <- site2 <- taxa[1:7]
site3 <- taxa[8:12]
site4 <- taxa[10:15]
site1 #and site2
site3
site4
a <- length(intersect(site3, site4))
a
b <- length(setdiff(site3, site4))
b
c <- length(setdiff(site4, site3))
c
Bsor <- 2 * a / (2 * a + b + c)
Bsor
Bsim<- min(b, c) / (min(b, c) + a)
Bsim
#x: taxa list of one site
#y: taxa list of another site
abc <- function(x, y){
#list to store output
out <- list()
#filling the list
out$a <- length(intersect(x, y))
out$b <- length(setdiff(x, y))
out$c <- length(setdiff(y, x))
#returning the output
out
}
x <- abc(
x = site3,
y = site4
)
x
sorensen_beta <- function(x){
x$bsor <- round(2 * x$a / (2 * x$a + x$b + x$c), 3)
x
}
simpson_beta <- function(x){
x$bsim <- round(min(x$b, x$c) / (min(x$b, x$c) + x$a), 3)
x
}
sorensen_beta(x)
simpson_beta(x)
x <- abc(
x = site3,
y = site4
) %>%
sorensen_beta() %>%
simpson_beta()
x
betadiversity <- function(x, y){
require(magrittr)
abc(x, y) %>%
sorensen_beta() %>%
simpson_beta()
}
x <- betadiversity(
x = site3,
y = site4
)
x
sites <- data.frame(
site = c(
rep("site1", length(site1)),
rep("site2", length(site2)),
rep("site3", length(site3)),
rep("site4", length(site4))
),
taxon = c(
site1,
site2,
site3,
site4
)
)
kableExtra::kable(sites)
site.combinations <- utils::combn(
x = unique(sites$site),
m = 2
)
site.combinations
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations), #iterates through columns of site.combinations
.combine = 'rbind' #to produce a data frame
) %do% {
#site names
site.one <- site.combinations[1, i] #from column i, row 1
site.two <- site.combinations[2, i] #from column i, row 2
#getting taxa lists
taxa.list.one <- sites[sites$site %in% site.one, "taxon"]
taxa.list.two <- sites[sites$site %in% site.two, "taxon"]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
#returning output
beta
}
rownames(betadiversity.df) <- NULL
kableExtra::kable(betadiversity.df)
betadiversity_multisite <- function(
x,
site.column, #column with site names
taxa.column #column with taxa names
){
#get site combinations
site.combinations <- utils::combn(
x = unique(x[, site.column]),
m = 2
)
#iterating through site pairs
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations),
.combine = 'rbind'
) %do% {
#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- x[x[, site.column] %in% site.one, taxa.column]
taxa.list.two <- x[x[, site.column] %in% site.two, taxa.column]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
#returning output
beta
}
#remove bad rownames
rownames(betadiversity.df) <- NULL
#reordering columns
betadiversity.df <- betadiversity.df[, c(
"site.one",
"site.two",
"a",
"b",
"c",
"bsor",
"bsim"
)]
#returning output
return(betadiversity.df)
}
sites.betadiversity <- betadiversity_multisite(
x = sites,
site.column = "site",
taxa.column = "taxon"
)
kableExtra::kable(sites.betadiversity)
hugo_version()
blogdown::serve_site()
blogdown::serve_site()
