x <- zoo::zoo(0:10)
plot(
x = x,
col = "red4",
mar = c(0.5, 1, 0, 1)
)
x_detrended <- ts_detrend(x = x)
plot(
x = x_detrended,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
zoo_spain_scaled <- scale(
x = zoo_spain,
center = TRUE,
scale = TRUE
)
zoo_spain_scaled
class(zoo_spain_scaled)
#' Linear Detrending and Normalization
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_preprocessing <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y.scaled <- scale(x = y)
y.scaled
}
source("mini_dtw.R")
zoo_spain_ready <- ts_preprocessing(x = zoo_spain)
plot(
x = zoo_spain_ready,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
d <- sqrt(sum((x-y)^2))
d
}
d_euclidean(
x = zoo::coredata(zoo_germany)[1, ],
y = zoo::coredata(zoo_spain)[2, ]
)
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
d_euclidean(
x = as.numeric(zoo_germany[1, ]),
y = as.numeric(zoo_spain[2, ])
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
d <- sqrt(sum((x-y)^2))
d
}
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
m_dist <- matrix(
data = NA,
nrow = nrow(zoo_spain),
ncol = nrow(zoo_germany)
)
for(row.i in 1:nrow(zoo_spain)){
for(col.j in 1:nrow(zoo_germany)){
m_dist[row.i, col.j] <- d_euclidean(
x = zoo_spain[row.i, ],
y = zoo_germany[col.j, ]
)
}
}
m_dist[1:5, 1:5]
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_dist,
xlab = "zoo_spain",
ylab = "zoo_germany"
)
#' Distance Matrix Between Time Series
#' @param x (required, zoo object) time series.
#' @param y (required, zoo object) time series with same columns as `x`
#' @return matrix
distance_matrix <- function(x, y){
m_dist <- matrix(
data = NA,
nrow = nrow(y),
ncol = nrow(x)
)
for(row.i in 1:nrow(y)){
for(col.j in 1:nrow(x)){
m_dist[row.i, col.j] <- d_euclidean(
x = x[row.i, ],
y = y[col.j, ]
)
}
}
m_dist
}
m_dist <- distance_matrix(
x = zoo_spain,
y = zoo_sweden
)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_dist,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
m_cost <- matrix(
data = NA,
nrow = nrow(m_dist),
ncol = ncol(m_dist)
)
m_cost[1, ] <- cumsum(m_dist[1, ])
m_cost[, 1] <- cumsum(m_dist[, 1])
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_cost,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
m_cost[1:2, 1:2]
m_cost[2, 2] <- min(
m_cost[1, 2],
m_cost[2, 1]
) + m_dist[2, 2]
m_cost[1:2, 1:2]
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_cost,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
#iterate over rows of the cost matrix
for(row.i in 2:nrow(m_dist)){
#iterate over columns of the cost matrix
for(col.j in 2:ncol(m_dist)){
#get cost of neighbor with minimum accumulated cost
min_cost <- min(
m_cost[row.i - 1, col.j],
m_cost[row.i, col.j - 1]
)
#add it to the distance of the target cell
new_value <- min_cost + m_dist[row.i, col.j]
#fill the empty cell with the new value
m_cost[row.i, col.j] <- new_value
}
}
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_cost,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
m <- nrow(m_cost)
n <- ncol(m_cost)
m_cost[(m-1):m, (n-1):n]
m_cost[m, n] <- m_cost[m, n] + m_cost[1, 1]
m_cost[(m-1):m, (n-1):n]
#' Cost Matrix from Distance Matrix
#' @param m (required, matrix) distance matrix.
#' @return matrix
cost_matrix <- function(m){
m_cost <- matrix(
data = NA,
nrow = nrow(m),
ncol = ncol(m)
)
m_cost[1, ] <- cumsum(m[1, ])
m_cost[, 1] <- cumsum(m[, 1])
for(row.i in 2:nrow(m)){
for(col.j in 2:ncol(m)){
m_cost[row.i, col.j] <- min(
m_cost[row.i - 1, col.j],
m_cost[row.i, col.j - 1]
) + m[row.i, col.j]
}
}
m_cost[row.i, col.j] <- m_cost[row.i, col.j] + m_cost[1, 1]
m_cost
}
m_cost <- cost_matrix(m = m_dist)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_cost,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
path <- data.frame(
x = ncol(m_cost),
y = nrow(m_cost)
)
path$distance <- m_dist[path$x, path$y]
path
next_step <- function(m, step){
x <- step$x
y <- step$y
steps <- list(
left = c(max(x - 1, 1), y),
up = c(x, max(y - 1, 1))
)
costs <- sapply(
X = steps,            #y = row, x = column
FUN = function(step) m[
step[2], #y value - row
step[1] #x value - column
]
)
steps[[which.min(costs)]]
}
next_step(m = m_cost, step = tail(path, n = 1))
coords <- steps[[which.min(costs)]]
path <- data.frame(
x = ncol(m_cost),
y = nrow(m_cost)
)
path$distance <- m_dist[path$x, path$y]
m = m_cost
step = tail(path, n = 1)
x <- step$x
y <- step$y
steps <- list(
left = c(max(x - 1, 1), y),
up = c(x, max(y - 1, 1))
)
costs <- sapply(
X = steps,            #y = row, x = column
FUN = function(step) m[
step[2], #y value - row
step[1] #x value - column
]
)
coords <- steps[[which.min(costs)]]
x <- step$x
y <- step$y
steps <- list(
left = c(y, max(x - 1, 1)),
up = c(max(y - 1, 1), x)
)
costs <- sapply(
X = steps,            #y = row, x = column
FUN = function(step) m[
step[1], #y value - row
step[2] #x value - column
]
)
costs
steps
m[steps$left[1], steps$left[2]]
steps <- list(
left = c(y, max(x - 1, 1)),
up = c(max(y - 1, 1), x)
)
steps
costs <- list(
left = m[steps$left[1], steps$left[2]],
up = m[steps$up[1], steps$up[2]]
)
costs
which.min(costs)
coords <- steps[[which.min(costs)]]
coords
steps
steps <- list(
left = c(step$y, max(step$x - 1, 1)),
up = c(max(step$y - 1, 1), step$x)
)
costs <- list(
left = m[steps$left[1], steps$left[2]],
up = m[steps$up[1], steps$up[2]]
)
coords <- steps[[which.min(costs)]]
c(coords[2], coords[1], NA)
steps <- list(
left = c(step$y, max(step$x - 1, 1)),
up = c(max(step$y - 1, 1), step$x)
)
steps
steps <- list(
up = c(step$y, max(step$x - 1, 1)),
left = c(max(step$y - 1, 1), step$x)
)
steps
steps <- list(
left = c(step$y, max(step$x - 1, 1)),
up = c(max(step$y - 1, 1), step$x)
)
steps
costs <- list(
left = m[steps$left[1], steps$left[2]],
up = m[steps$up[1], steps$up[2]]
)
costs
steps[[which.min(costs)]]
steps <- list(
left = c(step$y, max(step$x - 1, 1)),
up = c(max(step$y - 1, 1), step$x)
)
steps
costs <- list(
left = m[steps$left[1], steps$left[2]],
up = m[steps$up[1], steps$up[2]]
)
costs
coords <- steps[[which.min(costs)]]
coords
path <- data.frame(
row = ncol(m_cost),
col = nrow(m_cost)
)
path$distance <- m_dist[path$row, path$col]
path
path <- data.frame(
row = ncol(m_cost),
col = nrow(m_cost)
)
path$distance <- m_dist[path$row, path$col]
path
steps <- list(
left = c(step$row, max(step$col - 1, 1)),
up = c(max(step$row - 1, 1), step$col)
)
steps
step = tail(path, n = 1)
steps <- list(
left = c(step$row, max(step$col - 1, 1)),
up = c(max(step$row - 1, 1), step$col)
)
steps
steps <- list(
left = c(step$row, max(step$col - 1, 1)),
up = c(max(step$row - 1, 1), step$col)
)
costs <- list(
left = m[steps$left[1], steps$left[2]],
up = m[steps$up[1], steps$up[2]]
)
costs
steps[[which.min(costs)]][1]
steps[[which.min(costs)]]
which.min(costs)[1]
steps[[which.min(costs)]
steps[[which.min(costs)]]
steps <- list(
left = c(step$row, max(step$col - 1, 1)),
up = c(max(step$row - 1, 1), step$col)
)
costs <- list(
left = m[steps$left[1], steps$left[2]],
up = m[steps$up[1], steps$up[2]]
)
coords <- steps[[which.min(costs)]]
coords
which.min(costs)
steps[[which.min(costs)[1]]]
step[,] <- c(coords[1], coords[2], NA)
step
step
next_step <- function(m, step){
steps <- list(
left = c(step$row, max(step$col - 1, 1)),
up = c(max(step$row - 1, 1), step$col)
)
costs <- list(
left = m[steps$left[1], steps$left[2]],
up = m[steps$up[1], steps$up[2]]
)
coords <- steps[[which.min(costs)[1]]]
#rewrite input with new values
step[,] <- c(coords[1], coords[2], NA)
step
}
next_step(m = m_cost, step = tail(path, n = 1))
path <- data.frame(
x = ncol(m_cost),
y = nrow(m_cost)
)
path$distance <- m_dist[path$x, path$y]
repeat{
new.step <- next_step(
m = m_cost,
step = tail(path, n = 1)
)
new.step$distance <- m_dist[new.step$row, new.step$col]
path <- rbind(path, new.step)
if(all(new.step[, c("col", "row")] == 1)){
break
}
}
path <- data.frame(
x = ncol(m_cost),
y = nrow(m_cost)
)
path$distance <- m_dist[path$x, path$y]
new.step <- next_step(
m = m_cost,
step = tail(path, n = 1)
)
new.step
new.step
path <- data.frame(
x = ncol(m_cost),
y = nrow(m_cost)
)
path$distance <- m_dist[path$x, path$y]
path
tail(path, n = 1)
m = m_cost
step = tail(path, n = 1)
steps <- list(
left = c(step$row, max(step$col - 1, 1)),
up = c(max(step$row - 1, 1), step$col)
)
steps
path <- data.frame(
row = ncol(m_cost),
col = nrow(m_cost)
)
path$distance <- m_dist[path$row, path$col]
new.step <- next_step(
m = m_cost,
step = tail(path, n = 1)
)
new.step
new.step$distance <- m_dist[new.step$row, new.step$col]
new.step
path <- rbind(path, new.step)
path <- data.frame(
row = ncol(m_cost),
col = nrow(m_cost)
)
path$distance <- m_dist[path$row, path$col]
repeat{
new.step <- next_step(
m = m_cost,
step = tail(path, n = 1)
)
new.step$distance <- m_dist[new.step$row, new.step$col]
path <- rbind(path, new.step)
if(all(new.step[, c("col", "row")] == 1)){
break
}
}
path <- data.frame(
row = ncol(m_cost),
col = nrow(m_cost)
)
path$distance <- m_dist[path$row, path$col]
repeat{
new.step <- next_step(
m = m_cost,
step = tail(path, n = 1)
)
new.step$distance <- m_dist[new.step$row, new.step$col]
path <- rbind(path, new.step)
if(all(new.step[, c("col", "row")] == 1)){
break
}
}
path
image(x = m_cost)
lines(x = path$row, y = path$col)
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = t(m)
)
lines(x = path$row, y = path$col)
path <- data.frame(
row = ncol(m_cost),
col = nrow(m_cost)
)
path$distance <- m_dist[path$row, path$col]
repeat{
new.step <- next_step(
m = m_cost,
step = tail(path, n = 1)
)
new.step$distance <- m_dist[new.step$row, new.step$col]
path <- rbind(path, new.step)
if(all(new.step[, c("col", "row")] == 1)){
break
}
}
rownames(path) <- NULL
path
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = t(m)
)
lines(x = path$row, y = path$col)
image(t(m))
lines(x = path$row, y = path$col)
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = t(m)
)
lines(x = path$row, y = path$col)
