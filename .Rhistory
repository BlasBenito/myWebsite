) + distance_matrix[row, col]
}
}
m[row, col] <- m[row, col] + m[1, 1]
m
}
m_cost <- cost_matrix(distance_matrix = m_dist)
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "zoo_spain",
ylab = "zoo_sweden",
main = "Cost Matrix"
)
#cleanup
rm(col, row, m, min_cost, n, new_value, row)
path <- data.frame(
row = ncol(m_cost),
col = nrow(m_cost)
)
path
steps <- list(
left = c(path$row, max(path$col - 1, 1)),
up = c(max(path$row - 1, 1), path$col)
)
steps
costs <- list(
left = m_cost[steps$left[1], steps$left[2]],
up = m_cost[steps$up[1], steps$up[2]]
)
costs
steps[[which.min(costs)[1]]]
#' Identify Next Step of Least-Cost Path
#' @param cost_matrix (required, matrix) cost matrix.
#' @param last_step (required, data frame) one row data frame with columns "row" and "col" representing the last step of a least-cost path.
#' @return one row data frame, new step in least-cost path
least_cost_step <- function(cost_matrix, last_step){
steps <- list(
left = c(last_step$row, max(last_step$col - 1, 1)),
up = c(max(last_step$row - 1, 1), last_step$col)
)
costs <- list(
left = cost_matrix[steps$left[1], steps$left[2]],
up = cost_matrix[steps$up[1], steps$up[2]]
)
coords <- steps[[which.min(costs)[1]]]
#rewrite input with new values
new_step <- last_step
new_step[,] <- c(coords[1], coords[2])
new_step
}
least_cost_step(
cost_matrix = m_cost,
last_step = path
)
repeat{
#find next step
new.step <- least_cost_step(
cost_matrix = m_cost,
last_step = tail(path, n = 1)
)
#join the new step with path
path <- rbind(
path, new.step,
make.row.names = FALSE
)
#stop when coordinates are 1, 1
if(all(tail(path, n = 1) == 1)){break}
}
path
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "zoo_spain",
ylab = "zoo_sweden",
main = "Cost Matrix and Least-Cost Path"
)
graphics::lines(
x = path$row,
y = path$col,
lwd = 2
)
#' Least-Cost Path from Cost Matrix
#' @param cost_matrix (required, matrix) cost matrix.
#' @return data frame with least-cost path coordinates
least_cost_path <- function(cost_matrix){
#first step of the least cost path
path <- data.frame(
row = ncol(cost_matrix),
col = nrow(cost_matrix)
)
#iterate until path is completed
repeat{
#merge path with result of least_cost_step()
path <- rbind(
path,
#find next step
least_cost_step(
cost_matrix = cost_matrix,
last_step = tail(path, n = 1)
),
make.row.names = FALSE
)
#stop when coordinates are 1, 1
if(all(tail(path, n = 1) == 1)){break}
}
path
}
least_cost_path(cost_matrix = m_cost)
distance <- m_cost[nrow(m_cost), ncol(m_cost)] - m_cost[1, 1]
distance
normalizer <- auto_sum_cpp(
x = zoo::coredata(zoo_spain),
y = zoo::coredata(zoo_sweden)
)
normalizer <- psi_auto_sum(
x = zoo::coredata(zoo_spain),
y = zoo::coredata(zoo_sweden)
)
normalizer
distance/normalizer
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
getOption("blogdown.method")
blogdown:::preview_site()
blogdown::check_content()
file.remove(c(
"content/post/01_home_cluster/index.html"
))
blogdown::clean_duplicates(preview = FALSE)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("xgboost")
install.packages("xgboost")
blogdown::build_site()
library(blogdown)
check_config()
check_gitignore()
check_ugo()
check_hugo()
blogdown::check_netlify()
blogdown::install_hugo("0.74.3")
blogdown::check_netlify()
check_content()
blogdown::check_content()
library(blogdown)
build_site()
blogdown::serve_site()
library(blogdown)
blogdown::new_post()
blogdown::new_post(title = "distantia-showcase")
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
blogdown:::preview_site()
build_site()
serve_site()
serve_site()
library(blogdown)
serve_site()
stop_server()
blogdown:::preview_site()
stop_server()
install.packages("distantia")
install.packages("distantia")
library(distantia)
library(mapview)
mapview()
build_site()
serve_site()
library(distantia)
library(mapview)
mapview(distantia::covid_counties) |>
htmlwidgets::saveWidget(figure, file = "map.html", selfcontained = TRUE)
library(distantia)
library(mapview)
htmlwidgets::saveWidget(mapview(distantia::covid_counties), file = "map.html", selfcontained = TRUE)
library(distantia)
library(mapview)
x <- mapview(distantia::covid_counties)
htmlwidgets::saveWidget(x, file = "map.html", selfcontained = TRUE)
x <- mapview(distantia::covid_counties)
htmlwidgets::saveWidget(x@map, file = "map.html", selfcontained = TRUE)
in_folder <- "home/blas/Dropbox/GITUB/R_packages/distantia/data_full"
out_folder <- "home/blas/Dropbox/GITHUB/myWebsite/static/data"
dir.exists(in_folder)
dir.exists(out_folder)
in_folder <- "/home/blas/Dropbox/GITHUB/R_packages/distantia/data_full"
out_folder <- "/home/blas/Dropbox/GITHUB/myWebsite/static/data"
dir.exists(in_folder)
dir.exists(out_folder)
in_folder <- "/home/blas/Dropbox/GITHUB/R_packages/distantia/data_full/"
out_folder <- "/home/blas/Dropbox/GITHUB/myWebsite/static/data/"
in_folder <- "/home/blas/Dropbox/GITHUB/R_packages/distantia/data_full/"
out_folder <- "/home/blas/Dropbox/GITHUB/myWebsite/static/data/"
#covid data
readRDS(file = paste0(in_folder, "covid_prevalence.rda"))
covid_prevalence <- readRDS(file = paste0(in_folder, "covid_prevalence.rda"))
covid_polygons <- readRDS(file = paste0(in_folder, "covid_polygons.rda"))
library(sf)
covid_polygons <- readRDS(file = paste0(in_folder, "covid_polygons.rda"))
paste0(in_folder, "covid_polygons.rda")
covid_polygons <- readRDS(file = paste0(in_folder, "covid_polygons.rda"))
library(sf)
covid_polygons <- readRDS(file = paste0(in_folder, "covid_polygons.rda"))
load("~/Dropbox/GITHUB/R_packages/distantia/data_full/covid_polygons.rda")
load(file = paste0(in_folder, "covid_polygons.rda"))
View(covid_polygons)
rownames(covid_polygons) <- NULL
nrow(covid_polygons)
nrow(covid_counties)
names(covid_polygons)
covid_polygons <- covid_polygons |>
dplyr::inner_join(
y = covid_counties |>
sf::st_drop_geometry(),
by = "name"
)
library(arrow)
install.packages("arrow")
View(covid_polygons)
arrow::write_parquet(
x = covid_prevalence,
sink = paste0(out_folder, "covid_prevalence.parquet"))
df <- arrow::read_parquet(paste0(out_folder, "covid_prevalence.parquet"))
View(df)
arrow::write_parquet(
x = covid_polygons,
sink = paste0(out_folder, "covid_polygons.parquet"))
library(sf)
sf::st_write(
obj = covid_polygons,
dsn = paste0(out_folder, "covid_polygons.parquet")
)
help(st_write)
st_drivers()
install.packages("geoarrow")
arrow::write_parquet(
x = covid_polygons,
sink = paste0(out_folder, "covid_polygons.parquet"))
help(geoarrow_writer)
library(geoarrow, quietly = TRUE)
library(arrow, quietly = TRUE)
library(sf, quietly = TRUE)
arrow::write_parquet(
x = covid_polygons,
sink = paste0(out_folder, "covid_polygons.parquet"))
df <- arrow::open_dataset(paste0(out_folder, "covid_polygons.parquet"))
covid_polygons
arrow::write_parquet(
x = covid_polygons,
sink = paste0(out_folder, "covid_polygons.parquet"))
arrow::write_parquet(
x = tibble::as.tibble(covid_polygons),
sink = paste0(out_folder, "covid_polygons.parquet"))
arrow::write_parquet(
x = tibble::as_tibble(covid_polygons),
sink = paste0(out_folder, "covid_polygons.parquet"))
help("write_parquet")
library(arrow, quietly = TRUE)
library(sf, quietly = TRUE)
in_folder <- "/home/blas/Dropbox/GITHUB/R_packages/distantia/data_full/"
out_folder <- "/home/blas/Dropbox/GITHUB/myWebsite/static/data/"
#covid data
covid_prevalence <- readRDS(file = paste0(in_folder, "covid_prevalence.rda"))
load(file = paste0(in_folder, "covid_polygons.rda"))
rownames(covid_polygons) <- NULL
library(arrow, quietly = TRUE)
library(sf, quietly = TRUE)
in_folder <- "/home/blas/Dropbox/GITHUB/R_packages/distantia/data_full/"
out_folder <- "/home/blas/Dropbox/GITHUB/myWebsite/static/data/"
#covid data
covid_prevalence <- readRDS(file = paste0(in_folder, "covid_prevalence.rda"))
load(file = paste0(in_folder, "covid_polygons.rda"))
rownames(covid_polygons) <- NULL
library(geoarrow)
library(arrow)
library(sf)
in_folder <- "/home/blas/Dropbox/GITHUB/R_packages/distantia/data_full/"
out_folder <- "/home/blas/Dropbox/GITHUB/myWebsite/static/data/"
covid_prevalence <- readRDS(file = paste0(in_folder, "covid_prevalence.rda"))
load(file = paste0(in_folder, "covid_polygons.rda"))
rownames(covid_polygons) <- NULL
nrow(covid_polygons)
nrow(covid_counties)
library(distantia)
in_folder <- "/home/blas/Dropbox/GITHUB/R_packages/distantia/data_full/"
out_folder <- "/home/blas/Dropbox/GITHUB/myWebsite/static/data/"
#covid data
covid_prevalence <- readRDS(file = paste0(in_folder, "covid_prevalence.rda"))
load(file = paste0(in_folder, "covid_polygons.rda"))
rownames(covid_polygons) <- NULL
nrow(covid_polygons)
nrow(covid_counties)
covid_polygons <- covid_polygons |>
dplyr::inner_join(
y = covid_counties |>
sf::st_drop_geometry(),
by = "name"
)
arrow::write_parquet(
x = covid_prevalence,
sink = paste0(out_folder, "covid_prevalence.parquet"))
#write prevalence
arrow::write_parquet(
x = covid_prevalence,
sink = paste0(out_folder, "covid_prevalence.parquet"))
#test file
df <- arrow::read_parquet(paste0(out_folder, "covid_prevalence.parquet"))
View(df)
df <- arrow::open_dataset(paste0(out_folder, "covid_prevalence.parquet"))
df
covid_polygons
arrow::write_parquet(
x = covid_polygons,
sink = paste0(out_folder, "covid_polygons.parquet"))
sf::st_write(
obj = covid_polygons,
dsn = paste0(out_folder, "covid_polygons.parquet")
)
df.drivers <- st_drivers()
View(df.drivers)
help(write_geoparquet)
help(write_geoparquet)
??geoparquet
help("geoarrow_writer")
library(distantia, quietly = TRUE)
library(mapview, quietly = TRUE)
library(gt, quietly = TRUE)
install.packages("gt")
library(distantia, quietly = TRUE)
library(mapview, quietly = TRUE)
library(gt, quietly = TRUE)
gt(data = covid_prevalence)
blogdown:::preview_site()
max(covid_prevalence$prevalence)
install.packages("dygraphs")
library(dygraphs)
tsl <- tsl_initialize(
x = covid_prevalence,
name_column = "name",
time_column = "time"
)
dygraphs(tsl[[1]])
library(dygraphs)
dygraphs(tsl[[1]])
library(dygraphs)
dygraph(tsl[[1]])
lapply(
X = tsl[1:5],
FUN = dygraph
)
help(dygraph)
lapply(
X = tsl[1:5],
FUN = function(x){
dygraph(x, main = zoo_name_get(x))
}
)
dygraph(tsl[[1]], main = "Alameda")
dygraph(tsl[[1]], main = "Alameda")
lapply(
X = tsl[1:5],
FUN = function(x){
dygraph(x)
}
)
out <- lapply(
X = tsl[1:5],
FUN = function(x){
dygraph(x)
}
)
for (g in out) print(g)
out <- lapply(
X = tsl[1:5],
FUN = function(x){
dygraph(x, main = zoo_name_get(x))
}
)
for (g in out) print(g)
tsl_plot(
tsl = tsl[1:10],
columns = 2,
guide = FALSE
)
colnames(covid_counties)
mapview(covid_counties, zcol = ~population)
mapview(covid_counties, zcol = "population")
help(mapview)
mapview(
covid_counties,
zcol = "population",
label = "name"
)
la_population <- mapview(
covid_counties,
zcol = "population",
label = "name"
)
htmlwidgets::saveWidget(
x = la_population@map,
file = "la_population.html",
selfcontained = TRUE
)
la_population <- mapview(
covid_counties,
zcol = "population",
label = "name"
)
la_population
la_population@map
htmlwidgets::saveWidget(
x = la_population@map,
file = "la_population.html",
selfcontained = TRUE
)
la_population <- mapview(
covid_counties,
zcol = "population",
label = "name"
)
htmlwidgets::saveWidget(
la_population@map,
file = "la_population.html",
selfcontained = TRUE
)
par(mar = c(5, 5, 5, 5))
tsl_plot(
tsl = tsl[1:12],
columns = 2,
guide = FALSE,
text_cex = 1.5
)
par(mar = c(5, 5, 5, 5), oma = c(5, 5, 5, 5))
tsl_plot(
tsl = tsl[1:12],
columns = 2,
guide = FALSE,
text_cex = 1.5
)
tsl_plot(
tsl = tsl[1:12],
columns = 2,
guide = FALSE,
text_cex = 1.2
)
library(blogdown)
build_site()
serve_site()
knitr::opts_chunk$set(
fig.width = 7, fig.height = 6
)
library(distantia, quietly = TRUE)
library(sf, quietly = TRUE)
library(mapview, quietly = TRUE)
library(gt, quietly = TRUE)
la_population <- mapview(
covid_counties,
zcol = "population",
label = "name"
)
htmlwidgets::saveWidget(
la_population@map,
file = "la_population.html",
selfcontained = TRUE
)
gt(data = head(covid_prevalence))
tsl <- tsl_initialize(
x = covid_prevalence,
name_column = "name",
time_column = "time"
)
tsl_plot(
tsl = tsl[1:12],
columns = 2,
guide = FALSE,
text_cex = 1.2
)
distantia_dtw_plot(tsl[c(1, 2)])
distantia_dtw_plot(tsl[c(1, 3)])
distantia_dtw_plot(tsl[c(1, 5)])
distantia_dtw_plot(tsl[c(1, 6)])
distantia_dtw_plot(tsl[c(1, 7)])
distantia_dtw_plot(tsl[c(1, 8)])
distantia_dtw_plot(tsl[c(1, 9)])
distantia_dtw_plot(tsl[c(2, 9)])
distantia_dtw_plot(tsl[c(3, 9)])
distantia_dtw_plot(tsl[c(4, 9)])
distantia_dtw_plot(tsl[c(5, 9)])
library(distantia)
library(sf)
library(mapview)
library(gt)
library(future)
stop_server()
build_site()
serve_site()
