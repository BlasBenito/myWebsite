check = FALSE
)
View(benchmark)
benchmark <- bench::mark(
y <- df$x,
y <- df[["x"]],
y <- df[, "x"],
y <- dplyr::pull(df, x),
iterations = 100,
check = FALSE
)
View(benchmark)
dplyr::pull(df, x)
df[, "x"]
f <- function(){
stats::cor.test(
x = stats::rnorm(n = 1e7),
y = stats::runif(n = 1e7)
)
}
profvis::profvis(expr = f())
f <- function(){
stats::cor.test(
x = stats::rnorm(n = 1e6),
y = stats::runif(n = 1e6)
)
}
profvis::profvis(expr = f())
profvis::profvis(expr = f(), rerun = TRUE)
f <- function(n = 1e7){
stats::cor.test(
x = stats::rnorm(n = n),
y = stats::runif(n = n)
)
}
profvis::profvis(
expr = f(),
rerun = TRUE
)
Sys.setenv(R_GC_MEM_GROWTH = "off")
profvis::profvis(
expr = f(),
rerun = TRUE
)
Sys.unsetenv("R_GC_MEM_GROWTH")
Sys.unsetenv("R_GC_MEM_GROWTH")
help(writeLines)
writeLines(
text = "f <- function(n = 1e7){
stats::cor.test(
x = stats::rnorm(n = n),
y = stats::runif(n = n)
)
}",
con = "f.R"
)
source("f.R")
profvis::profvis(
expr = f(),
rerun = TRUE
)
rm(f)
profvis::profvis(
expr = f(),
rerun = TRUE
)
writeLines(
text = "f <- function(n = 1e7){
stats::cor.test(
x = stats::rnorm(n = n),
y = stats::runif(n = n)
)
}",
con = "f.R"
)
source("f.R")
profvis::profvis(
expr = f(),
rerun = TRUE
)
blogdown:::preview_site()
help(profvis)
profvis::profvis(
expr = f(),
rerun = TRUE
)
Rprofmem
help(Rprofmem)
library(blogdown)
blogdown:::preview_site()
build_site()
serve_site()
stop_server()
serve_site()
serve_site()
library(blogdown)
serve_site()
p <- profvis::profvis(
expr = f(),
rerun = TRUE,
width = "100%",
height = "300"
)
f <- function(n = 1e7){
stats::cor.test(
x = stats::rnorm(n = n),
y = stats::runif(n = n)
)
}
p <- profvis::profvis(
expr = f(),
rerun = TRUE,
width = "100%",
height = "300"
)
htmlwidgets::saveWidget(
p,
file = "profiling.html",
selfcontained = TRUE
)
rm(p)
help(lineprof)
help(cor.test.default)
2180//730
2180/730
730/2180
f_alt <- function(n = 1e7){
stats::cor(
x = stats::rnorm(n = n),
y = stats::runif(n = n)
)
}
library(blogdown)
blogdown:::preview_site()
blogdown:::preview_site()
build_site()
library(blogdown)
build_site()
build_site()
serve_site()
library(blogdown)
serve_site()
stop_server()
serve_site()
stop_server()
blogdown:::preview_site()
help("vector")
seq_len(n)
n <- 1000
objects_memory <- used_memory <- vector(length = n)
seq_len(n)
#iterations
n <- 1000
#range of matrix sizes
m.sizes <- 1:1000
#vector to store memory values
objects_memory <- used_memory <- vector(length = n)
i <- 1
m <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
m
utils::object.size(x = m)
help(used_memory)
pryr::object_size(x = m)
pryr::mem_used()
library(pryr)
#iterations
n <- 1000
#range of matrix sizes
m.sizes <- 1:1000
#vector to store memory values
matrix_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
m <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
#matrix memory
matrix_memory[i] <- pryr::object_size(x = m)
#used memory
used_memory[i] <- pryr::mem_used()
}
matrix_memory
used_memory
plot(matrix_memory, used_memory)
plot(matrix_memory, used_memory)
matrix_memory
head(matrix_memory)
head(used_memory)
plot(cumsum(matrix_memory), used_memory)
plot(cumsum(matrix_memory), used_memory)
plot(cumsum(matrix_memory), used_memory, type = "l")
plot(used_memory)
library(pryr)
#iterations
n <- 100
#range of matrix sizes
m.sizes <- 1:1000
#vector to store memory values
matrix_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
m <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
#matrix memory
matrix_memory[i] <- pryr::object_size(x = m)
rm(m)
#used memory
used_memory[i] <- pryr::mem_used()
}
plot(cumsum(matrix_memory), used_memory, type = "l")
matrix_memory
used_memory
library(pryr)
#iterations
n <- 100
#range of matrix sizes
m.sizes <- 1:1000
#vector to store memory values
matrix_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
m <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
#matrix memory
matrix_memory[i] <- pryr::object_size(x = m)
#used memory
used_memory[i] <- pryr::mem_used()
rm(m)
}
plot(cumsum(matrix_memory), used_memory, type = "l")
plot(cumsum(matrix_memory), used_memory, type = "l")
matrix_memory
used_memory
plot(used_memory)
plot(matrix_memory, used_memory, type = "l")
cumsum(matrix_memory)
plot(cumsum(matrix_memory), used_memory, type = "l")
plot(cumsum(matrix_memory), cumsum(used_memory), type = "l")
plot(matrix_memory, used_memory, type = "l")
help(abline)
plot(matrix_memory, used_memory, type = "l")
abline(a = 0, b = 1)
plot(matrix_memory, used_memory, type = "l")
abline(a = 0, b = 1, col = "red")
plot(matrix_memory, used_memory, type = "l")
plot(scale(matrix_memory), scale(used_memory), type = "l")
abline(a = 0, b = 1, col = "red")
library(pryr)
#iterations
n <- 100
#range of matrix sizes
m.sizes <- 1:1000
#vector to store memory values
matrix_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
m <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
#matrix memory
matrix_memory[i] <- pryr::object_size(x = m)
#used memory
used_memory[i] <- pryr::mem_used()
rm(m)
invisible(gc())
}
plot(scale(matrix_memory), scale(used_memory), type = "l")
abline(a = 0, b = 1, col = "red")
plot(cumsum(matrix_memory), cumsum(used_memory), type = "l")
plot(used_memory)
plot(used_memory - matrix_memory)
library(pryr)
#iterations
n <- 100
#range of matrix sizes
m.sizes <- 1:1000
#vector to store memory values
matrix_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
m1 <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
m2 <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
#matrix memory
matrix_memory[i] <- pryr::object_size(x = m1) + pryr::object_size(x = m2)
#used memory
used_memory[i] <- pryr::mem_used()
rm(m1)
}
plot(used_memory)
plot(used_memory, type = "l")
plot(matrix_memory, type = "l")
library(pryr)
#iterations
n <- 100
#range of matrix sizes
m.sizes <- 1:1000
#vector to store memory values
matrix_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
m1 <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
m2 <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
#matrix memory
matrix_memory[i] <- pryr::object_size(x = m1) + pryr::object_size(x = m2)
rm(m1)
#used memory
used_memory[i] <- pryr::mem_used()
}
plot(matrix_memory)
plot(used_memory)
plot(used_memory, type = "l")
plot(matrix_memory, type = "l")
plot(cumsum(matrix_memory), cumsum(used_memory), type = "l")
abline(a = 0, b = 1, col = "red")
plot(matrix_memory, used_memory, type = "l")
abline(a = 0, b = 1, col = "red")
plot(matrix_memory, used_memory)
abline(a = 0, b = 1, col = "red")
library(pryr)
#iterations
n <- 100
#range of matrix sizes
m.sizes <- 1:1000
#vector to store memory values
matrix_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
m1 <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
m1.size <- pryr::object_size(x = m1)
m2 <- matrix(
data = 1,
nrow = sample(x = m.sizes, size = 1),
ncol = sample(x = m.sizes, size = 1)
)
m2.size <- pryr::object_size(x = m2)
#matrix memory
matrix_memory[i] <- m1.size + m2.size
#used memory
used_memory[i] <- pryr::mem_used()
#deallocate only one of the matrices
rm(m1)
}
plot(matrix_memory, type = "l")
plot(cumsum(matrix_memory), type = "l")
plot(cumsum(used_memory), type = "l")
plot(matrix_memory, used_memory)
abline(a = 0, b = 1, col = "red")
plot(cumsum(matrix_memory), cumsum(used_memory))
abline(a = 0, b = 1, col = "red")
library(pryr)
#iterations
n <- 100
#range of vector sizes
m.sizes <- 1:1000000
#vector to store memory values
vector_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
v1 <- runif(n = sample(x = m.sizes, size = 1))
v2 <- runif(n = sample(x = m.sizes, size = 1))
v3 <- runif(n = sample(x = m.sizes, size = 1))
v1.size <- pryr::object_size(x = v1)
v2.size <- pryr::object_size(x = v2)
v3.size <- pryr::object_size(x = v3)
#matrix memory
vector_memory[i] <- v1.size + v2.size + v3.size
#used memory
used_memory[i] <- pryr::mem_used()
#deallocate only one of the vectors
rm(v2)
}
plot(cumsum(vector_memory), type = "l")
plot(cumsum(used_memory), type = "l")
library(pryr)
#iterations
n <- 100
#range of vector sizes
m.sizes <- 1:1000000
#vector to store memory values
vector_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
v1 <- runif(n = sample(x = m.sizes, size = 1))
v2 <- runif(n = sample(x = m.sizes, size = 1))
v3 <- runif(n = sample(x = m.sizes, size = 1))
v1.size <- pryr::object_size(x = v1)
v2.size <- pryr::object_size(x = v2)
v3.size <- pryr::object_size(x = v3)
#matrix memory
vector_memory[i] <- v1.size + v2.size + v3.size
#deallocate only one of the vectors
rm(v2)
#used memory
used_memory[i] <- pryr::mem_used()
}
plot(cumsum(vector_memory), type = "l")
plot(cumsum(used_memory), type = "l")
plot(cumsum(vector_memory), cumsum(used_memory))
plot(vector_memory, used_memory)
library(pryr)
#iterations
n <- 100
#range of vector sizes
m.sizes <- 1:1000000
#vector to store memory values
vector_memory <- used_memory <- vector(length = n)
for(i in seq_len(n)){
#matrix of random size
v1 <- runif(n = sample(x = m.sizes, size = 1))
v2 <- runif(n = sample(x = m.sizes, size = 1))
v3 <- runif(n = sample(x = m.sizes, size = 1))
v1.size <- pryr::object_size(x = v1)
v2.size <- pryr::object_size(x = v2)
v3.size <- pryr::object_size(x = v3)
#matrix memory
vector_memory[i] <- v1.size + v2.size + v3.size
#used memory
used_memory[i] <- pryr::mem_used()
#deallocate only one of the vectors
rm(v2)
}
plot(cumsum(vector_memory), type = "l")
plot(cumsum(used_memory), type = "l")
plot(vector_memory, used_memory)
abline(a = 0, b = 1, col = "red")
l = c(1,2,3,4)
tracemem(l)
l[[1]] = 2
library(blogdown)
blogdown:::preview_site()
library(blogdown)
blogdown:::preview_site()
600*1.2
a <- b <- "chaos" -> c -> d
a
b
c
d
a <- b <- "chaos" -> c <- d
a <- b <- "chaos" -> c <- "a"
a = b <- "chaos" -> c = d
a <- b <- "chaos" -> c -> d
a <- b = "chaos" = c -> d
a = b = "chaos" = c = d
a = b <- "chaos" -> c = d
a <- b <- "chaos" -> c -> d
a = b = "chaos" = c = d
a = b <- "chaos" -> c = d
a <- b = "chaos" = c -> d
a <- b <- "chaos" -> c -> d
a = b = "chaos" = c = d
a = b <- "chaos" -> c = d
a <- b = "chaos" = c -> d
a <- b <- "chaos" -> c -> a
a
a <- b <- "chaos" |> b -> c -> d
a <- b <- "chaos" |> print() -> c -> d
c
d
a <- b <| "chaos" |> print() -> c -> d
a <- b <- "chaos" -> c -> d
a = b = "chaos" = c = d
a = b <- "chaos" -> c = d
a <- b = "chaos" = c -> d
a <- b <- "chaos" -> c -> d
a = b = "chaos" = c = d
a = b <- "chaos" -> c = d
a <- b = "chaos" = c -> d
a <- b <- "chaos" -> c -> d = e
a <- b <- "chaos" -> c -> d
a = b = "chaos" = c = d
a = b <- "chaos" -> c = d
a <- b = "chaos" = c -> d
library(blogdown)
blogdown:::preview_site()
a = b = "chaos" = c = d
d
c
