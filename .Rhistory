/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 1
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 2
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 1
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 0.5
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
#global mean of y
y_mean <- mean(yx$y)
#smoothing parameter
#you can experiment with different values!
#a value 0 applies no smoothing
m <- 1
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
weight = dplyr::n() / (dplyr::n() + m),
x_encoded =  weight * mean(y) + (1 - weight) * y_mean
)
y_mean <- mean(yx$y)
m <- 1
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 2
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
#global mean of y
y_mean <- mean(yx$y)
#smoothing parameter
#you can experiment with different values!
#a value 0 applies no smoothing
m <- 2
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
weight = dplyr::n() / (dplyr::n() + m),
x_encoded =  weight * mean(y) + (1 - weight) * y_mean
)
#global mean of y
y_mean <- mean(yx$y)
#smoothing parameter
#you can experiment with different values!
#a value 0 applies no smoothing
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
weight = dplyr::n() / (dplyr::n() + m),
x_encoded =  weight * mean(y) + (1 - weight) * y_mean
)
y_mean <- mean(yx$y)
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m),
distance_to_y_mean = y_mean - x_encoded
)
y_mean <- mean(yx$y)
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
library(rpart)
library(rpart.plot)
library(collinear)
library(fastDummies)
library(dplyr)
library(ggplot2)
data(
vi,
vi_predictors
)
dplyr::glimpse(vi)
vi_categorical <- collinear::identify_non_numeric_predictors(
df = vi,
predictors = vi_predictors
)
vi_categorical
data.frame(
name = vi_categorical,
categories = lapply(
X = vi_categorical,
FUN = function(x) length(unique(vi[[x]]))
) |>
unlist()
) |>
dplyr::arrange(
dplyr::desc(categories)
)
sort(unique(vi$koppen_zone))
lm(
formula = vi_mean ~ koppen_zone,
data = vi
) |>
summary()
dummy_variables <- stats::model.matrix(
~ koppen_zone,
data = vi
)
ncol(dummy_variables)
dummy_variables[1:10, 1:10]
df <- fastDummies::dummy_cols(
.data = vi[, "koppen_zone", drop = FALSE],
select_columns = "koppen_zone",
remove_selected_columns = TRUE
)
dplyr::glimpse(df)
collinear::vif_df(
df = df
)
#add response variable to df
df$vi_mean <- vi$vi_mean
#fit model using all one-hot encoded variables
koppen_zone_one_hot <- rpart::rpart(
formula = vi_mean ~ .,
data = df
)
koppen_zone_categorical <- rpart::rpart(
formula = vi_mean ~ koppen_zone,
data = vi
)
#plot tree skeleton
par(mfrow = c(1, 2))
plot(koppen_zone_one_hot, main = "One-hot encoding")
plot(koppen_zone_categorical, main = "Categorical")
yx <- data.frame(
y = 1:5,
x = c("a", "a", "b", "b", "c")
)
yx <- yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y)
)
yx
y_mean <- mean(yx$y)
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = (sum(y) - y) / (dplyr::n() - 1)
)
yx <- data.frame(
y = 1:7,
x = c("a", "a", "a", "b", "b", "b", "c")
)
yx <- yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y)
)
yx
y_mean <- mean(yx$y)
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 2
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 1
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
y_mean <- mean(yx$y)
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * mean(y) + m * y_mean)
/
(dplyr::n() + m)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = (sum(y) - y) / (dplyr::n() - 1)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = (sum(y) - y) / (dplyr::n() - 1)
)
m <- 3
yx %>%
dplyr::group_by(x) %>%
dplyr::mutate(
x_encoded = ((dplyr::n() - 1) * sum(y) + m * mean(y)) / (dplyr::n() + m)
)
m <- 3
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = ((dplyr::n() - 1) * sum(y) + m * mean(y)) / (dplyr::n() + m)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * ((sum(y) - y) / (dplyr::n() - 1)) + m * y_mean) / (dplyr::n() + m)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = (sum(y) - y) / (dplyr::n() - 1)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = (sum(y) - y) / (dplyr::n() - 1)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = ifelse(
dplyr::n() == 1,
y,
(sum(y) - y) / (dplyr::n() - 1)
)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = ifelse(
dplyr::n() == 1,
y,
(sum(y) - y) / (dplyr::n() - 1)
)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded =
(dplyr::n() * ((sum(y) - y) / (dplyr::n() - 1)) + m * y_mean) / (dplyr::n() + m)
)
y_sum <- sum(yx$y)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = ifelse(
dplyr::n() == 1,
(y_sum - y) / (nrow(yx) - 1),
(sum(y) - y) / (dplyr::n() - 1)
)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = (sum(y) - y) / (dplyr::n() - 1)
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif()
)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif(n = dplyr::n())
)
help(runif)
rnorm
help(rnorm)
help(runif)
1/100
7/100
y_max <- max(yx$y)
y_max <- max(yx$y)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif(n = dplyr::n(), max = y_max/100)
)
y_max/100
max_noise <- max(yx$y)/100
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif(n = dplyr::n(), max = max_noise)
)
max_noise <- max(yx$y)/10
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif(n = dplyr::n(), max = max_noise)
)
max_noise <- max(yx$y)/100
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif(n = dplyr::n(), max = max_noise)
)
max_noise <- max(yx$y)/100
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif(n = dplyr::n(), max = max_noise)
)
1/100
#maximum noise to add
max_noise <- max(yx$y)/100
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif(n = dplyr::n(), max = max_noise)
)
#maximum noise to add
max_noise <- max(yx$y)/100
#set seed for reproducibility
set.seed(1)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = mean(y) + runif(n = dplyr::n(), max = max_noise)
)
help(set.seed)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
encoded = stats::rnorm(
n = dplyr::n(),
mean = mean(y),
sd = stats::sd(y)
)
)
mean(1)
sd(1)
set.seed(1)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
encoded = stats::rnorm(
n = dplyr::n(),
mean = mean(y),
sd = ifelse(
dplyr::n() == 1,
stats::sd(yx$y), #use global sd for one-case groups
stats::sd(y)     #use local sd for n-cases groups
)
)
)
set.seed(1)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
encoded = stats::rnorm(
n = dplyr::n(),
mean = mean(y),
sd = ifelse(
dplyr::n() == 1,
stats::sd(yx$y), #use global sd for one-case groups
stats::sd(y)     #use local sd for n-cases groups
)
)
)
set.seed(1)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
encoded = stats::rnorm(
n = dplyr::n(),
mean = mean(y),
sd = ifelse(
dplyr::n() == 1,
stats::sd(yx$y), #use global sd for one-case groups
stats::sd(y)     #use local sd for n-cases groups
)
)
)
set.seed(1)
yx |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = stats::rnorm(
n = dplyr::n(),
mean = mean(y),
sd = ifelse(
dplyr::n() == 1,
stats::sd(yx$y), #use global sd for one-case groups
stats::sd(y)     #use local sd for n-cases groups
)
)
)
yx |>
dplyr::arrange(y) |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = dplyr::cur_group_id()
)
length(unique(yx$x))
length(unique(yx$x))/100
max_noise <- length(unique(yx$x))/100
yx |>
dplyr::arrange(y) |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = dplyr::cur_group_id() + runif(n = dplyr::n(), max = max_noise)
)
#maximum noise as function of the number of categories
max_noise <- length(unique(yx$x))/100
yx |>
dplyr::arrange(y) |>
dplyr::group_by(x) |>
dplyr::mutate(
x_encoded = dplyr::cur_group_id() + runif(n = dplyr::n(), max = max_noise)
)
blogdown::serve_site()
