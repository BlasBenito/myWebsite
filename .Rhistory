)
)
kableExtra::kable(head(penguins))
importance_to_df <- function(model){
x <- as.data.frame(model$variable.importance)
x$variable <- rownames(x)
colnames(x)[1] <- "importance"
rownames(x) <- NULL
return(x)
}
#create and register cluster
my.cluster <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl = my.cluster)
#assessing execution time
system.time(
#performing 1000 iterations in parallel
importance.scores <- foreach(
i = 1:1000,
.combine = 'rbind',
.packages = "ranger",
.export = c('penguins', 'importance_to_df')
) %dopar% {
#fit model
m.i <- ranger::ranger(
data = penguins,
dependent.variable.name = "species",
importance = "permutation",
seed = i
)
#format importance
m.importance.i <- importance_to_df(model = m.i)
#returning output
return(m.importance.i)
}
)
#stopping cluster
parallel::stopCluster(cl = my.cluster)
#create and register cluster
my.cluster <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl = my.cluster)
#assessing execution time
system.time(
#performing 1000 iterations in parallel
importance.scores <- foreach(
i = 1:1000,
.combine = 'rbind',
.packages = "ranger",
.export = c('penguins', 'importance_to_df')
) %dopar% {
#fit model
m.i <- ranger::ranger(
data = penguins,
dependent.variable.name = "species",
importance = "permutation",
seed = i
)
#format importance
m.importance.i <- importance_to_df(model = m.i)
#returning output
return(m.importance.i)
}
)
#stopping cluster
parallel::stopCluster(cl = my.cluster)
#create and register cluster
my.cluster <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl = my.cluster)
#assessing execution time
system.time(
#performing 1000 iterations in parallel
importance.scores <- foreach(
i = 1:1000,
.combine = 'rbind',
.packages = "ranger"
) %dopar% {
#fit model
m.i <- ranger::ranger(
data = penguins,
dependent.variable.name = "species",
importance = "permutation",
seed = i
)
#format importance
m.importance.i <- importance_to_df(model = m.i)
#returning output
return(m.importance.i)
}
)
#stopping cluster
parallel::stopCluster(cl = my.cluster)
#create and register cluster
my.cluster <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl = my.cluster)
#assessing execution time
system.time(
#performing 1000 iterations in parallel
importance.scores <- foreach(
i = 1:1000,
.combine = 'rbind',
.packages = "ranger"
) %dopar% {
#fit model
m.i <- ranger::ranger(
data = penguins,
dependent.variable.name = "species",
importance = "permutation",
seed = i
)
#format importance
m.importance.i <- importance_to_df(model = m.i)
#returning output
return(m.importance.i)
}
)
#stopping cluster
parallel::stopCluster(cl = my.cluster)
ggplot2::ggplot(data = importance.scores) +
ggplot2::aes(
y = reorder(variable, importance),
x = importance
) +
ggplot2::geom_boxplot() +
ggplot2::ylab("")
#list to save results
importance.scores.list <- list()
#performing 1000 iterations sequentially
system.time(
for(i in 1:1000){
#fit model
m.i <- ranger::ranger(
data = penguins,
dependent.variable.name = "species",
importance = "permutation",
seed = i,
num.threads = parallel::detectCores() - 1
)
#format importance
importance.scores.list[[i]] <- importance_to_df(model = m.i)
}
)
#removing NA and subsetting columns
penguins <- as.data.frame(
na.omit(
penguins[, c(
"species",
"bill_length_mm",
"bill_depth_mm",
"flipper_length_mm",
"body_mass_g"
)]
)
)
kableExtra::kable(head(penguins, 10))
blogdown::serve_site()
ggplot2::ggplot(data = importance.scores) +
ggplot2::aes(
y = reorder(variable, importance),
x = importance
) +
ggplot2::geom_boxplot() +
ggplot2::ylab("")
ggsave(filename = "/home/blas/Dropbox/GITHUB/myWebsite/content/post/02_parallelizing_loops_with_r/boxplot.png", width = 5, height = 3)
blogdown::serve_site()
blogdown::serve_site()
source("https://gist.githubusercontent.com/BlasBenito/93ee54d3a98d101754aaff0d658dccca/raw/19c309e3491b7cff0c72d20f05515e1b0565d136/cluster_spec.R")
#automatic install of packages if they are not installed already
list.of.packages <- c(
"foreach",
"doParallel",
"ranger"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages) > 0){
install.packages(new.packages, dep=TRUE)
}
#loading packages
for(package.i in list.of.packages){
suppressPackageStartupMessages(
library(
package.i,
character.only = TRUE
)
)
}
#generate cluster specification
spec <- cluster_spec(
ips = c('10.42.0.1', '10.42.0.34', '10.42.0.104'),
cores = c(7, 4, 4),
user = "blas"
)
#setting up cluster
my.cluster <- parallel::makeCluster(
master = '10.42.0.1',
spec = spec,
port = Sys.getenv("R_PARALLEL_PORT"),
outfile = "",
homogeneous = TRUE
)
Sys.getenv("R_PARALLEL_PORT")
parallel::stopCluster()
#generate cluster specification
spec <- cluster_spec(
ips = c('10.42.0.1', '10.42.0.34', '10.42.0.104'),
cores = c(7, 4, 4),
user = "blas"
)
#define parallel port
Sys.setenv(R_PARALLEL_PORT = 11000)
Sys.getenv("R_PARALLEL_PORT")
#setting up cluster
my.cluster <- parallel::makeCluster(
master = '10.42.0.1',
spec = spec,
port = Sys.getenv("R_PARALLEL_PORT"),
outfile = "",
homogeneous = TRUE
)
#check cluster definition (optional)
print(my.cluster)
#register cluster
doParallel::registerDoParallel(cl = my.cluster)
#how many workers are available? (optional)
foreach::getDoParWorkers()
parallel::stopCluster()
parallel::stopCluster(cl = my.cluster)
#generate cluster specification
spec <- cluster_spec(
ips = c('10.42.0.1', '10.42.0.34', '10.42.0.104'),
cores = c(7, 4, 4),
user = "blas"
)
#define parallel port
Sys.setenv(R_PARALLEL_PORT = 11000)
Sys.getenv("R_PARALLEL_PORT")
#setting up cluster
my.cluster <- parallel::makeCluster(
master = '10.42.0.1',
spec = spec,
port = Sys.getenv("R_PARALLEL_PORT"),
outfile = "",
homogeneous = TRUE
)
#check cluster definition (optional)
print(my.cluster)
#register cluster
doParallel::registerDoParallel(cl = my.cluster)
#check number of workers
foreach::getDoParWorkers()
dir.create("/home/blas/cluster_shared/input")
paste0("y", 1:100)
i <- "y1"
df.i <- data.frame(
y = rnorm(1000),
a = rnorm(1000),
b = rnorm(1000),
c = rnorm(1000),
d = rnorm(1000)
)
#changing name of the response variable
colnames(df.i)[1] <- i
colnames(df.i)
#assign to a variable with name i
assign(i, df.i)
i
y1
list(i)
save(
get(i),
file = paste0("/home/blas/cluster_shared/input/", i, ".RData")
)
i
get(i)
i
save(
list = i,
file = paste0("/home/blas/cluster_shared/input/", i, ".RData")
)
#data frame names
df.names <- paste0("y", 1:100)
#filling it with files
for(i in df.names){
#creating the df
df.i <- data.frame(
y = rnorm(1000),
a = rnorm(1000),
b = rnorm(1000),
c = rnorm(1000),
d = rnorm(1000)
)
#changing name of the response variable
colnames(df.i)[1] <- i
#assign to a variable with name i
assign(i, df.i)
#saving the object
save(
list = i,
file = paste0("/home/blas/cluster_shared/input/", i, ".RData")
)
}
print(my.cluster)
output.folder <- "/home/blas/cluster_shared/output"
dir.create(output.folder)
list.files(
path = input.folder,
full.names = FALSE
)
input.folder
input.folder <- "/home/blas/cluster_shared/input"
dir.create(input.folder)
list.files(
path = input.folder,
full.names = FALSE
)
input.file <- input.files[1]
input.files <- list.files(
path = input.folder,
full.names = FALSE
)
input.file <- input.files[1]
input.file
input.folder
#read file
df <- load(paste0(input.folder, input.file))
input.folder
#read file
df <- load(paste0(input.folder, "/", input.file))
df
i
get(i)
#automatic install of packages if they are not installed already
list.of.packages <- c(
"foreach",
"doParallel",
"ranger"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages) > 0){
install.packages(new.packages, dep=TRUE)
}
#loading packages
for(package.i in list.of.packages){
suppressPackageStartupMessages(
library(
package.i,
character.only = TRUE
)
)
}
input.folder <- "/home/blas/cluster_shared/input"
#data frame names
df.names <- paste0("y", 1:100)
#filling it with files
for(i in df.names){
#creating the df
df.i <- data.frame(
y = rnorm(1000),
a = rnorm(1000),
b = rnorm(1000),
c = rnorm(1000),
d = rnorm(1000)
)
#changing name of the response variable
colnames(df.i)[1] <- i
#assign to a variable with name i
assign(i, df.i)
#saving the object
save(
list = i,
file = paste0("/home/blas/cluster_shared/input/", i, ".RData")
)
rm(list = i)
rm(df.i)
}
source("https://gist.githubusercontent.com/BlasBenito/93ee54d3a98d101754aaff0d658dccca/raw/de57b23740ca90bc02fbd0d5cd3551106ff2fb6d/cluster_spec.R")
#generate cluster specification
spec <- cluster_spec(
ips = c('10.42.0.1', '10.42.0.34', '10.42.0.104'),
cores = c(7, 4, 4),
user = "blas"
)
#define parallel port
Sys.setenv(R_PARALLEL_PORT = 11000)
Sys.getenv("R_PARALLEL_PORT")
#setting up cluster
my.cluster <- parallel::makeCluster(
master = '10.42.0.1',
spec = spec,
port = Sys.getenv("R_PARALLEL_PORT"),
outfile = "",
homogeneous = TRUE
)
#check cluster definition (optional)
print(my.cluster)
#register cluster
doParallel::registerDoParallel(cl = my.cluster)
#check number of workers
foreach::getDoParWorkers()
output.folder <- "/home/blas/cluster_shared/output"
input.files <- list.files(
path = input.folder,
full.names = FALSE
)
input.file <- input.files[1]
#read input file
load(paste0(input.folder, "/", input.file))
help(load)
rm(y1)
#read input file
df <- get(load(paste0(input.folder, "/", input.file)))
#input file name without extension
input.file.name <- tools::file_path_sans_ext(input.file)
input.file.name
#creating the input folder
input.folder <- "/home/blas/cluster_shared/input"
dir.create(input.folder)
#data frame names
df.names <- paste0("y", 1:100)
#filling it with files
for(i in df.names){
#creating the df
df.i <- data.frame(
y = rnorm(1000),
a = rnorm(1000),
b = rnorm(1000),
c = rnorm(1000),
d = rnorm(1000)
)
#changing name of the response variable
colnames(df.i)[1] <- i
#assign to a variable with name i
assign(i, df.i)
#saving the object
save(
list = i,
file = paste0(input.folder, "/", i, ".RData")
)
rm(list = i, df.i, i)
}
#save it with the same name as the input dataframe
assign(input.file, m.i)
m.i <- ranger::ranger(
data = df,
dependent.variable.name = colnames(df)[1]
)
#save it with the same name as the input dataframe
assign(input.file, m.i)
#save it with the same name as the input dataframe
assign(input.file.name, m.i)
rm(y1.RData)
paste0(output.folder, "/", input.file)
assign(input.file.name, m.i)
m.i <- ranger::ranger(
data = df,
dependent.variable.name = colnames(df)[1],
importance = "permutation"
)
m.i$variable.importance["a"]
data.frame(
r.squared = m.i$r.squared,
importance.a = m.i$variable.importance["a"],
importance.b = m.i$variable.importance["b"],
importance.c = m.i$variable.importance["c"],
importance.d = m.i$variable.importance["d"]
)
data.frame(
response.variable = input.file.name,
r.squared = m.i$r.squared,
importance.a = m.i$variable.importance["a"],
importance.b = m.i$variable.importance["b"],
importance.c = m.i$variable.importance["c"],
importance.d = m.i$variable.importance["d"]
)
#list of input files as iterator
input.files <- list.files(
path = input.folder,
full.names = FALSE
)
modelling.summary <- foreach(
input.file = input.files,
.combine = 'rbind',
.packages = "ranger"
) %dopar% {
#input file name without extension
input.file.name <- tools::file_path_sans_ext(input.file)
#read input file
df <- get(load(paste0(input.folder, "/", input.file)))
#fit model
m.i <- ranger::ranger(
data = df,
dependent.variable.name = colnames(df)[1],
importance = "permutation"
)
#change name of the model to one of the response variable
assign(input.file.name, m.i)
#save model
save(
list = input.file.name,
file = paste0(output.folder, "/", input.file)
)
#returning summary
return(
data.frame(
response.variable = input.file.name,
r.squared = m.i$r.squared,
importance.a = m.i$variable.importance["a"],
importance.b = m.i$variable.importance["b"],
importance.c = m.i$variable.importance["c"],
importance.d = m.i$variable.importance["d"]
)
)
}
modelling.summary
