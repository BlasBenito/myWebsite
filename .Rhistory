)
}
#generate cluster specification
spec <- cluster_spec(
ips = c('10.42.0.1', '10.42.0.34', '10.42.0.104'),
cores = c(7, 4, 4),
user = "blas"
)
#setting up cluster
my.cluster <- parallel::makeCluster(
master = '10.42.0.1',
spec = spec,
port = Sys.getenv("R_PARALLEL_PORT"),
outfile = "",
homogeneous = TRUE
)
Sys.getenv("R_PARALLEL_PORT")
parallel::stopCluster()
#generate cluster specification
spec <- cluster_spec(
ips = c('10.42.0.1', '10.42.0.34', '10.42.0.104'),
cores = c(7, 4, 4),
user = "blas"
)
#define parallel port
Sys.setenv(R_PARALLEL_PORT = 11000)
Sys.getenv("R_PARALLEL_PORT")
#setting up cluster
my.cluster <- parallel::makeCluster(
master = '10.42.0.1',
spec = spec,
port = Sys.getenv("R_PARALLEL_PORT"),
outfile = "",
homogeneous = TRUE
)
#check cluster definition (optional)
print(my.cluster)
#register cluster
doParallel::registerDoParallel(cl = my.cluster)
#how many workers are available? (optional)
foreach::getDoParWorkers()
parallel::stopCluster()
parallel::stopCluster(cl = my.cluster)
#generate cluster specification
spec <- cluster_spec(
ips = c('10.42.0.1', '10.42.0.34', '10.42.0.104'),
cores = c(7, 4, 4),
user = "blas"
)
#define parallel port
Sys.setenv(R_PARALLEL_PORT = 11000)
Sys.getenv("R_PARALLEL_PORT")
#setting up cluster
my.cluster <- parallel::makeCluster(
master = '10.42.0.1',
spec = spec,
port = Sys.getenv("R_PARALLEL_PORT"),
outfile = "",
homogeneous = TRUE
)
#check cluster definition (optional)
print(my.cluster)
#register cluster
doParallel::registerDoParallel(cl = my.cluster)
#check number of workers
foreach::getDoParWorkers()
dir.create("/home/blas/cluster_shared/input")
paste0("y", 1:100)
i <- "y1"
df.i <- data.frame(
y = rnorm(1000),
a = rnorm(1000),
b = rnorm(1000),
c = rnorm(1000),
d = rnorm(1000)
)
#changing name of the response variable
colnames(df.i)[1] <- i
colnames(df.i)
#assign to a variable with name i
assign(i, df.i)
i
y1
list(i)
save(
get(i),
file = paste0("/home/blas/cluster_shared/input/", i, ".RData")
)
i
get(i)
i
save(
list = i,
file = paste0("/home/blas/cluster_shared/input/", i, ".RData")
)
#data frame names
df.names <- paste0("y", 1:100)
#filling it with files
for(i in df.names){
#creating the df
df.i <- data.frame(
y = rnorm(1000),
a = rnorm(1000),
b = rnorm(1000),
c = rnorm(1000),
d = rnorm(1000)
)
#changing name of the response variable
colnames(df.i)[1] <- i
#assign to a variable with name i
assign(i, df.i)
#saving the object
save(
list = i,
file = paste0("/home/blas/cluster_shared/input/", i, ".RData")
)
}
print(my.cluster)
output.folder <- "/home/blas/cluster_shared/output"
dir.create(output.folder)
list.files(
path = input.folder,
full.names = FALSE
)
input.folder
input.folder <- "/home/blas/cluster_shared/input"
dir.create(input.folder)
list.files(
path = input.folder,
full.names = FALSE
)
input.file <- input.files[1]
input.files <- list.files(
path = input.folder,
full.names = FALSE
)
input.file <- input.files[1]
input.file
input.folder
#read file
df <- load(paste0(input.folder, input.file))
input.folder
#read file
df <- load(paste0(input.folder, "/", input.file))
df
i
get(i)
#automatic install of packages if they are not installed already
list.of.packages <- c(
"foreach",
"doParallel",
"ranger"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages) > 0){
install.packages(new.packages, dep=TRUE)
}
#loading packages
for(package.i in list.of.packages){
suppressPackageStartupMessages(
library(
package.i,
character.only = TRUE
)
)
}
input.folder <- "/home/blas/cluster_shared/input"
#data frame names
df.names <- paste0("y", 1:100)
#filling it with files
for(i in df.names){
#creating the df
df.i <- data.frame(
y = rnorm(1000),
a = rnorm(1000),
b = rnorm(1000),
c = rnorm(1000),
d = rnorm(1000)
)
#changing name of the response variable
colnames(df.i)[1] <- i
#assign to a variable with name i
assign(i, df.i)
#saving the object
save(
list = i,
file = paste0("/home/blas/cluster_shared/input/", i, ".RData")
)
rm(list = i)
rm(df.i)
}
source("https://gist.githubusercontent.com/BlasBenito/93ee54d3a98d101754aaff0d658dccca/raw/de57b23740ca90bc02fbd0d5cd3551106ff2fb6d/cluster_spec.R")
#generate cluster specification
spec <- cluster_spec(
ips = c('10.42.0.1', '10.42.0.34', '10.42.0.104'),
cores = c(7, 4, 4),
user = "blas"
)
#define parallel port
Sys.setenv(R_PARALLEL_PORT = 11000)
Sys.getenv("R_PARALLEL_PORT")
#setting up cluster
my.cluster <- parallel::makeCluster(
master = '10.42.0.1',
spec = spec,
port = Sys.getenv("R_PARALLEL_PORT"),
outfile = "",
homogeneous = TRUE
)
#check cluster definition (optional)
print(my.cluster)
#register cluster
doParallel::registerDoParallel(cl = my.cluster)
#check number of workers
foreach::getDoParWorkers()
output.folder <- "/home/blas/cluster_shared/output"
input.files <- list.files(
path = input.folder,
full.names = FALSE
)
input.file <- input.files[1]
#read input file
load(paste0(input.folder, "/", input.file))
help(load)
rm(y1)
#read input file
df <- get(load(paste0(input.folder, "/", input.file)))
#input file name without extension
input.file.name <- tools::file_path_sans_ext(input.file)
input.file.name
#creating the input folder
input.folder <- "/home/blas/cluster_shared/input"
dir.create(input.folder)
#data frame names
df.names <- paste0("y", 1:100)
#filling it with files
for(i in df.names){
#creating the df
df.i <- data.frame(
y = rnorm(1000),
a = rnorm(1000),
b = rnorm(1000),
c = rnorm(1000),
d = rnorm(1000)
)
#changing name of the response variable
colnames(df.i)[1] <- i
#assign to a variable with name i
assign(i, df.i)
#saving the object
save(
list = i,
file = paste0(input.folder, "/", i, ".RData")
)
rm(list = i, df.i, i)
}
#save it with the same name as the input dataframe
assign(input.file, m.i)
m.i <- ranger::ranger(
data = df,
dependent.variable.name = colnames(df)[1]
)
#save it with the same name as the input dataframe
assign(input.file, m.i)
#save it with the same name as the input dataframe
assign(input.file.name, m.i)
rm(y1.RData)
paste0(output.folder, "/", input.file)
assign(input.file.name, m.i)
m.i <- ranger::ranger(
data = df,
dependent.variable.name = colnames(df)[1],
importance = "permutation"
)
m.i$variable.importance["a"]
data.frame(
r.squared = m.i$r.squared,
importance.a = m.i$variable.importance["a"],
importance.b = m.i$variable.importance["b"],
importance.c = m.i$variable.importance["c"],
importance.d = m.i$variable.importance["d"]
)
data.frame(
response.variable = input.file.name,
r.squared = m.i$r.squared,
importance.a = m.i$variable.importance["a"],
importance.b = m.i$variable.importance["b"],
importance.c = m.i$variable.importance["c"],
importance.d = m.i$variable.importance["d"]
)
#list of input files as iterator
input.files <- list.files(
path = input.folder,
full.names = FALSE
)
modelling.summary <- foreach(
input.file = input.files,
.combine = 'rbind',
.packages = "ranger"
) %dopar% {
#input file name without extension
input.file.name <- tools::file_path_sans_ext(input.file)
#read input file
df <- get(load(paste0(input.folder, "/", input.file)))
#fit model
m.i <- ranger::ranger(
data = df,
dependent.variable.name = colnames(df)[1],
importance = "permutation"
)
#change name of the model to one of the response variable
assign(input.file.name, m.i)
#save model
save(
list = input.file.name,
file = paste0(output.folder, "/", input.file)
)
#returning summary
return(
data.frame(
response.variable = input.file.name,
r.squared = m.i$r.squared,
importance.a = m.i$variable.importance["a"],
importance.b = m.i$variable.importance["b"],
importance.c = m.i$variable.importance["c"],
importance.d = m.i$variable.importance["d"]
)
)
}
modelling.summary
blogdown::serve_site()
all.taxa <- paste0("taxon_", 1:15)
paste0("taxon_", 1:15)
site1 <- site2 <- all.taxa[1:7]
site3 <- all.taxa[8:15]
site4 <- all.taxa[5:12]
site1
site3
site1 <- site2 <- all.taxa[1:7]
site3 <- all.taxa[8:12]
site4 <- all.taxa[10:15]
site1 #and site2
site3
site4
site4
a <- length(intersect(site1, site3))
a
site1
site3
a <- length(intersect(site3, site4))
a
b <- length(setdiff(site3, site4))
b
c <- length(setdiff(site4, site3))
c
Bsor <- 2 * a / (2 * a + b + c)
Bsor
Bsim<- min(b, c) / (min(b, c) + a)
Bsim
Bsim<- min(b, c) / (min(b, c) + a)
Bsim
Bsor <- function(a, b, c){
return(2 * a / (2 * a + b + c))
}
Bsim <- function(a, b, c){
return(min(b, c) / (min(b, c) + a))
}
Bsor <- function(a, b, c){
return(2 * a / (2 * a + b + c))
}
Bsim <- function(a, b, c){
return(min(b, c) / (min(b, c) + a))
}
Bsor()
Bsor(a, b, c)
Bsor <- function(a, b, c){
bsor <- 2 * a / (2 * a + b + c)
return(bsor)
}
Bsim <- function(a, b, c){
bsim <- min(b, c) / (min(b, c) + a)
return(bsim)
}
abc <- function(x, y){
out <- list()
out$a <- length(intersect(x, y))
out$b <- length(setdiff(x, y))
out$c <- length(setdiff(y, x))
return(out)
}
abc <- function(x, y){
out <- list()
out$a <- length(intersect(x, y))
out$b <- length(setdiff(x, y))
out$c <- length(setdiff(y, x))
return(out)
}
x <- abc(
x = site3,
y = site4
)
x
Bsor <- function(x){
bsor <- 2 * x$a / (2 * x$a + x$b + x$c)
return(bsor)
}
Bsim <- function(x){
bsim <- min(x$b, x$c) / (min(x$b, x$c) + x$a)
return(bsim)
}
Bsor(x)
Bsim(x)
Bsor <- function(x){
y <- 2 * x$a / (2 * x$a + x$b + x$c)
return(y)
}
Bsim <- function(x){
y <- min(x$b, x$c) / (min(x$b, x$c) + x$a)
return(y)
}
Bsor(x)
Bsim(x)
sorensen_beta <- function(x){
y <- 2 * x$a / (2 * x$a + x$b + x$c)
return(y)
}
simpson_beta <- function(x){
y <- min(x$b, x$c) / (min(x$b, x$c) + x$a)
return(y)
}
sorensen_beta(x)
simpson_beta(x)
Bsor <- function(x, y){
y <- sorensen_beta(x = abc(x, y))
return(y)
}
Bbsim <- function(x, y){
y <- simpson_beta(x = abc(x, y))
return(y)
}
Bsor <- function(x, y){
y <- sorensen_beta(x = abc(x, y))
return(y)
}
Bsor(x = site3, y = site4)
Bbsim <- function(x, y){
y <- simpson_beta(x = abc(x, y))
return(y)
}
Bbsim(x = site3, y = site4)
bsor <- function(x, y){
y <- sorensen_beta(x = abc(x, y))
return(y)
}
bsor(x = site3, y = site4)
bsim <- function(x, y){
y <- simpson_beta(x = abc(x, y))
return(y)
}
bsim(x = site3, y = site4)
beta <- function(x, y){
#computing abc
abc.out <- abc(x, y)
#list to store output values
out <- list()
#filling the list
out$bsim <- simpson_beta(x = abc.out)
out$bsor <- sorensen_beta(x = abc.out)
#returning results
return(out)
}
#test
beta(x = site3, y = site4)
beta_method <- function(x, y, method = "Bsim"){
#computing abc
abc.out <- abc(x, y)
#one method
if(method == "Bsim"){
out <- simpson_beta(x = abc.out)
names(out) <- "Bsim"
}
if(method == "Bsor"){
out <- sorensen_beta(x = abc.out)
names(out) <- "Bsor"
}
#returning results
return(out)
}
#test
beta_method(x = site3, y = site4, method = "Bsim")
beta_method(x = site3, y = site4, method = "Bsor")
beta_method <- function(x, y, method = "Bsim"){
#check method
if(!(method %in% c("Bsim", "Bsor"))){
stop("Argument 'method' must be 'Bsim' or 'Bsor'")
}
#computing abc
abc.out <- abc(x, y)
#one method
if(method == "Bsim"){
out <- simpson_beta(x = abc.out)
names(out) <- "Bsim"
}
if(method == "Bsor"){
out <- sorensen_beta(x = abc.out)
names(out) <- "Bsor"
}
#returning results
return(out)
}
#test
beta_method(x = site3, y = site4, method = "bsim")
