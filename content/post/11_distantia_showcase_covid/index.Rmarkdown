---
title: "{distantia} Demo: Covid-19 Prevalence in California"
author: ""
date: '2025-01-25'
slug: distantia-showcase-covid
categories: []
tags:
- Rstats
- Dynamic Time Warping
- Data Science
- Time Series Analysis
- Tutorial
subtitle: ''
summary: "Showcase with real examples of the analytical capabilities implemented in the R package 'distantia'."
authors: [admin]
lastmod: '2025-01-25T07:28:01+01:00'
featured: no
draft: true
image:
  caption: ''
  focal_point: Smart
  margin: auto
projects: []
toc: true
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  fig.width = 7, 
  fig.height = 6
)
```


## Summary

This post showcases the capabilities of the R package [`distantia`](https://blasbenito.github.io/distantia/) to process, compare, and analyze different types of time series.

## Setup

This tutorial requires the following packages:

  - [`distantia`](https://blasbenito.github.io/distantia/): time series analysis via dynamic time warping.
  - [`dplyr`](https://dplyr.tidyverse.org/): data frame manipulation.
  - [`mapview`](https://r-spatial.github.io/mapview/): easy to use interactive map visualization.
  - [`gt`](https://github.com/rstudio/gt): table formatting.

```{r, message = FALSE, warning = FALSE}
library(distantia)
library(dplyr)
library(mapview)
library(gt)
```

## Example Data

This demo focuses on two example datasets shipped with the package `distantia`:

  - `covid_prevalence`: weekly Covid-19 prevalence in 36 California counties between 2020-03-16 and 2023-12-18.
  - `covid_counties`: [`simple features`](https://r-spatial.github.io/sf/) data frame with county polygons and several socioeconomic variables (population, median income, employment, et).
  
The prevalence time series has the columns `name` (county name), `time` (date), and `prevalence` (expressed as proportion of infected population).
  
```{r, echo = FALSE}
covid_prevalence |> 
  head(n = 20) |>
  gt::gt() |> 
  gt::tab_style(
    style = gt::cell_text(font = "Montserrat"),
    locations = gt::cells_body()
  )
```

The spatial data frame contains county polygons identified by the column `name` (common with `covid_prevalence`).

```{r, echo = FALSE, cache=TRUE}
la_population <- mapview(
  covid_counties, 
  zcol = "population",
  label = "name"
  )

htmlwidgets::saveWidget(
  la_population@map, 
  file = "la_population.html", 
  selfcontained = TRUE
  )
```

<iframe src="la_population.html" name="LA_Population"
  width="800" height="600" scrolling="auto" frameborder="0">
   <p>California counties represented in the Covid-19 dataset.</p>
</iframe>

Additionally, the `covid_counties` dataset also contains the following columns:

  - `area_hectares`: county surface.
  - `population`: county population.
  - `poverty_percentage`: population percentage below the poverty line.
  - `median_income`: median county income in dollars.
  - `domestic_product`: yearly domestic product in **b**illions (not a typo) of dollars.
  - `daily_miles_traveled`: daily miles traveled by the average inhabitant.
  - `employed_percentage`: percentage of the county population under employment.
  
## Objective

This post focuses on the Covid-19 dataset described above to showcase the applications of `distantia` to the analysis of epidemiological time series.

This post touches base on these topics:

  - **Basic Data Exploration**: time series visualization and numerical exploration.
  - **Pairwise Dissimilarity Analysis**:
    - 
  - Spatial Clustering:
  - 
  
**DISCLAIMER:** I am not an epidemiologist, so I will refrain from interpreting any results, and will focus on technical details about the usage of `distantia` insted.
  
## Data Preparation and Exploration


```{r tsl_init, cache=TRUE, cache.path="cache/"}
tsl <- distantia::tsl_initialize(
  x = covid_prevalence,
  name_column = "name",
  time_column = "time"
)
```

```{r, fig.height=6}
tsl_plot(
  tsl = tsl[1:12],
  columns = 2,
  guide = FALSE,
  text_cex = 1.2
)
```

Time summary

```{r}
df_time <- tsl_time(
  tsl = tsl
)
```

```{r, echo = FALSE}
df_time |> 
  dplyr::select(name, class, units, length, resolution, begin, end) |> 
  slice_head(n = 5) |> 
  gt::gt() |> 
  gt::tab_style(
    style = gt::cell_text(font = "Montserrat"),
    locations = gt::cells_body()
  )
```

Time series stats ordered from max prevalence.

```{r}
df_stats <- tsl_stats(
  tsl = tsl,
  lags = 1:12 #weeks
)
```

```{r, echo = FALSE}
df_stats |> 
  select(name, q1, median, q3, max, ac_lag_1) |> 
  dplyr::arrange(dplyr::desc(max)) |> 
  gt::gt() |> 
  gt::fmt_number(decimals = 2) |> 
  gt::tab_style(
    style = gt::cell_text(font = "Montserrat"),
    locations = gt::cells_body()
  )
```

Computation of time series dissimilarity with dynamic time warping, and restricted permutation test with a block size of 12 weeks to assess significance.

```{r, echo = FALSE}
if(file.exists("distantia_output.RData")){
  load("distantia_output.RData")
}
```


```{r psi, eval=FALSE}
future::plan(
  strategy = future::multisession,
  workers = future::availableCores() - 1
)

df_psi_dtw <- distantia(
  tsl = tsl,
  distance = "euclidean",
  permutation = "restricted",
  block_size = 12, #3 months, one season
  repetitions = 1000
)

df_psi_ls <- distantia(
  tsl = tsl,
  lock_step = TRUE,
  distance = "euclidean",
  permutation = "restricted",
  block_size = 12, #3 months, one season
  repetitions = 1000
)
```

```{r}
save(df_psi_dtw, df_psi_ls, file = "distantia_output.RData")
```


```{r, echo = FALSE}
df_psi |> 
  select(x, y, psi, p_value) |> 
  dplyr::arrange(psi) |> 
  gt::gt() |> 
  gt::fmt_number(decimals = 3) |> 
  gt::tab_style(
    style = gt::cell_text(font = "Montserrat"),
    locations = gt::cells_body()
  )
```

The p-value represents the probability of finding a lower psi (higher similarity) when the time series are permuted. Low p-values indicate a strong similarity, better than expected by chance.