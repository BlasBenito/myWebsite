<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random Forest | Blas M. Benito, PhD</title>
    <link>https://blasbenito.com/tag/random-forest/</link>
      <atom:link href="https://blasbenito.com/tag/random-forest/index.xml" rel="self" type="application/rss+xml" />
    <description>Random Forest</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 19 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://blasbenito.com/media/avatar.jpg</url>
      <title>Random Forest</title>
      <link>https://blasbenito.com/tag/random-forest/</link>
    </image>
    
    <item>
      <title>R package &#34;memoria&#34;</title>
      <link>https://blasbenito.com/project/memoria/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/project/memoria/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://zenodo.org/badge/latestdoi/179102027&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/179102027.svg&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;

&lt;a href=&#34;https://CRAN.R-project.org/package=memoria&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version-ago/memoria&#34; alt=&#34;CRAN\_Release\_Badge&#34;&gt;&lt;/a&gt;

&lt;a href=&#34;https://CRAN.R-project.org/package=memoria&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/memoria&#34; alt=&#34;CRAN\_Download\_Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The goal of &lt;em&gt;memoria&lt;/em&gt; is to provide the tools to quantify &lt;strong&gt;ecological
memory&lt;/strong&gt; in long time-series involving environmental drivers and biotic
responses, including palaeoecological datasets.&lt;/p&gt;
&lt;p&gt;Ecological memory has two main components: the &lt;em&gt;endogenous&lt;/em&gt; component,
which represents the effect of antecedent values of the response on
itself, and &lt;em&gt;endogenous&lt;/em&gt; component, which represents the effect of
antecedent values of the driver or drivers on the current state of the
biotic response. Additionally, the &lt;em&gt;concurrent effect&lt;/em&gt;, which represents
the synchronic effect of the environmental drivers over the response is
measured. The functions in the package allow the user&lt;/p&gt;
&lt;p&gt;The package &lt;em&gt;memoria&lt;/em&gt; uses the fast implementation of Random Forest
available in the 
&lt;a href=&#34;https://CRAN.R-project.org/package=ranger&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ranger&lt;/a&gt;
package to fit a model of the form shown in &lt;strong&gt;Equation 1&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Equation 1&lt;/strong&gt; (simplified from the one in the paper):
$$p_{t} = p_{t-1} +&amp;hellip;+ p_{t-n} + d_{t} + d_{t-1} +&amp;hellip;+ d_{t-n}$$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$p$ is the response variable, &lt;em&gt;Pollen&lt;/em&gt; counts were used in this particular case..&lt;/li&gt;
&lt;li&gt;$d$ is an environmental &lt;em&gt;Driver&lt;/em&gt; influencing the response variable.&lt;/li&gt;
&lt;li&gt;$t$ is the time of any given value of the response $p$.&lt;/li&gt;
&lt;li&gt;$t-1$ is the lag 1.&lt;/li&gt;
&lt;li&gt;$p_{t-1} +&amp;hellip;+ p_{t-n}$ represents the endogenous component of
ecological memory.&lt;/li&gt;
&lt;li&gt;$d_{t-1} +&amp;hellip;+ d_{t-n}$ represents the exogenous component of
ecological memory.&lt;/li&gt;
&lt;li&gt;$d_{t}$ represents the concurrent effect of the driver over the
response.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Random Forest returns an importance score for each model term, and the
functions in &lt;em&gt;memoria&lt;/em&gt; let the user to plot the importance scores across
time lags for each ecological memory components, and to compute
different features of each memory component (length, strength, and
dominance).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output.png&#34; alt=&#34;Outputs produced by memoria from the analysis of a multivariate time series&#34;&gt;&lt;/p&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://github.com/BlasBenito/memoria&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub page&lt;/a&gt; of the package features complete examples on how to use the package. The 
&lt;a href=&#34;https://onlinelibrary.wiley.com/doi/full/10.1111/ecog.04772&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper published in the Ecography journal&lt;/a&gt; describes ecological memory concepts and the method based on Random Forest used to assess ecological memory components. The code used to generate the supplementary materials can be found in 
&lt;a href=&#34;https://github.com/BlasBenito/EcologicalMemory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; and 
&lt;a href=&#34;https://zenodo.org/record/3236128#.X941v9Yo-1c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zenodo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you ever use the package, please, cite it as:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Benito, B.M., Gil‐Romera, G. and Birks, H.J.B. (2020), Ecological memory at millennial time‐scales: the importance of data constraints, species longevity and niche features. Ecography, 43: 1-10. 
&lt;a href=&#34;https://doi.org/10.1111/ecog.04772&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://doi.org/10.1111/ecog.04772&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R package &#34;spatialRF&#34;</title>
      <link>https://blasbenito.com/project/spatialrf/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/project/spatialrf/</guid>
      <description>
&lt;script src=&#34;https://blasbenito.com/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://blasbenito.com/rmarkdown-libs/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://blasbenito.com/rmarkdown-libs/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;!---
[![R-CMD-check](https://github.com/BlasBenito/spatialRF/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/BlasBenito/spatialRF/actions/workflows/R-CMD-check.yaml)
--&gt;
&lt;!-- badges: start --&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/blasbenito/spatialRF&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/devel%20version-1.0.7-blue.svg&#34; alt=&#34;Devel-version&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg&#34; alt=&#34;lifecycle&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/blasbenito/spatialRF&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/CRAN-not_published_yet-red&#34; alt=&#34;CRAN&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL--3-blue.svg&#34; alt=&#34;License&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- badges: end --&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The package &lt;strong&gt;spatialRF&lt;/strong&gt; facilitates fitting spatial regression models on regular or irregular data with Random Forest by generating &lt;em&gt;spatial predictors&lt;/em&gt; that allow the model to take into account the spatial structure of the training data. The end goal is minimizing the spatial autocorrelation of the model residuals as much as possible.&lt;/p&gt;
&lt;p&gt;Two main methods to generate &lt;em&gt;spatial predictors&lt;/em&gt; from the distance matrix of the data points are implemented in the package:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moran’s Eigenvector Maps &lt;a href=&#34;https://www.sciencedirect.com/science/article/abs/pii/S0304380006000925&#34;&gt;(Dray, Legendre, and Peres-Neto 2006)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Distance matrix columns as explanatory variables &lt;a href=&#34;https://peerj.com/articles/5518/&#34;&gt;(Hengl et al. 2018)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The package is designed to minimize the amount of code required to fit a spatial model from a training dataset, the names of the response and the predictors, and a distance matrix, as the example below shows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spatial.model &amp;lt;- rf_spatial(
  data = your_dataframe,
  dependent.variable.name = &amp;quot;your_response_variable&amp;quot;,
  predictor.variable.names = c(&amp;quot;predictor1&amp;quot;, &amp;quot;predictor2&amp;quot;, ..., &amp;quot;predictorN&amp;quot;),
  distance.matrix = your_distance_matrix
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The package, that uses the &lt;code&gt;ranger&lt;/code&gt; package under the hood &lt;a href=&#34;https://arxiv.org/abs/1508.04409&#34;&gt;(Wright and Ziegler 2017)&lt;/a&gt;, also provides tools to identify potentially interesting variable interactions, tune random forest hyperparameters, assess model performance on spatially independent data folds, and examine the resulting models via importance plots, response curves, and response surfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;development&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Development&lt;/h1&gt;
&lt;p&gt;This package is reaching its final form, and big changes are not expected at this stage. However, it has many functions, and even though all them have been tested, only one dataset has been used for those tests. You will find bugs, and something will go wrong almost surely. If you have time to report bugs, please, do so in any of the following ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open a new issue in the &lt;a href=&#34;https://github.com/BlasBenito/spatialRF/issues&#34;&gt;Issues GitHub page of the package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Send me an email explaining the issue and the error messages with enough detail at blasbenito at gmail dot com.&lt;/li&gt;
&lt;li&gt;Send a direct message to &lt;a href=&#34;https://twitter.com/blasbenito&#34;&gt;my twitter account&lt;/a&gt; explaining the issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will do my best to solve any issues ASAP!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;applications&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Applications&lt;/h1&gt;
&lt;p&gt;The goal of &lt;code&gt;spatialRF&lt;/code&gt; is to help fitting &lt;em&gt;explanatory spatial regression&lt;/em&gt;, where the target is to understand how a set of predictors and the spatial structure of the data influences response variable. Therefore, the spatial analyses implemented in the package can be applied to any spatial dataset, regular or irregular, with a sample size between ~100 and ~5000 cases (the higher end will depend on the RAM memory available), a quantitative or binary (values 0 and 1) response variable, and a more or less large set of predictive variables.&lt;/p&gt;
&lt;p&gt;All functions but &lt;code&gt;rf_spatial()&lt;/code&gt; work with non-spatial data as well if the arguments &lt;code&gt;distance.matrix&lt;/code&gt; and &lt;code&gt;distance.thresholds&lt;/code&gt; are ignored. In such case, the number of cases is no longer limited by the size of the distance matrix, and models can be trained with hundreds of thousands of rows.&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;when the focus is on fitting spatial models&lt;/strong&gt;, and due to the nature of the &lt;em&gt;spatial predictors&lt;/em&gt; used to represent the spatial structure of the training data, &lt;strong&gt;there are many things this package cannot do&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Predict model results over raster data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Predict a model result over another region with a different spatial structure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work with “big data”, whatever that means.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Imputation or extrapolation (it can be done, but models based on spatial predictors are hardly transferable).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take temporal autocorrelation into account (but this is something that might be implemented later on).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If after considering these limitations you are still interested, follow me, I will show you how it works.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Install&lt;/h1&gt;
&lt;p&gt;The package is not yet in the CRAN repositories, so at the moment it must be installed from GitHub as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;remotes::install_github(
  repo = &amp;quot;blasbenito/spatialRF&amp;quot;, 
  ref = &amp;quot;main&amp;quot;,
  force = TRUE,
  quiet = TRUE
  )
library(spatialRF)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a few other libraries that will be useful during this tutorial.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(kableExtra)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-requirements&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data requirements&lt;/h1&gt;
&lt;p&gt;The data required to fit random forest models with &lt;code&gt;spatialRF&lt;/code&gt; must fulfill several conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The input format is data.frame&lt;/strong&gt;. At the moment, tibbles are not fully supported.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The number of rows must be somewhere between 100 and ~5000&lt;/strong&gt;, but that will depend on the RAM available in your system. However, this limitation only affects spatial analyses performed with &lt;code&gt;rf_spatial()&lt;/code&gt;, while all other modeling and plotting functions should work without a distance matrix (if they don’t tell me, that’d be a bug!), and therefore analyses in large datasets can still be done with the package.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The number of predictors should be larger than 3&lt;/strong&gt;, fitting a Random Forest model is moot otherwise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Factors in the response or the predictors are not explicitly supported in the package&lt;/strong&gt;, they may work, or they won’t, but in any case, I designed this package for quantitative data alone. However, binary data with values 0 and 1 in the response variable are supported.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Must be free of &lt;code&gt;NA&lt;/code&gt;&lt;/strong&gt;. You can check if there are NA records with &lt;code&gt;sum(apply(df, 2, is.na))&lt;/code&gt;. If the result is larger than 0, then just execute &lt;code&gt;df &amp;lt;- na.omit(df)&lt;/code&gt; to remove rows with empty cells.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Columns cannot have zero variance&lt;/strong&gt;. This condition can be checked with &lt;code&gt;apply(df, 2, var) == 0&lt;/code&gt;. Columns yielding TRUE should be removed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Columns must not yield &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;Inf&lt;/code&gt; when scaled&lt;/strong&gt;. You can check each condition with &lt;code&gt;sum(apply(scale(df), 2, is.nan))&lt;/code&gt; and &lt;code&gt;sum(apply(scale(df), 2, is.infinite))&lt;/code&gt;. If higher than 0, you can find what columns are giving issues with &lt;code&gt;sapply(as.data.frame(scale(df)), function(x)any(is.nan(x)))&lt;/code&gt; and &lt;code&gt;sapply(as.data.frame(scale(df)), function(x)any(is.infinite(x)))&lt;/code&gt;. Any column yielding &lt;code&gt;TRUE&lt;/code&gt; will generate issues while trying to fit models with &lt;code&gt;spatialRF&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;example-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Example data&lt;/h1&gt;
&lt;p&gt;The package includes an example dataset that fulfills the conditions mentioned above, named &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/plant_richness_df.html&#34;&gt;&lt;code&gt;plant_richness_df&lt;/code&gt;&lt;/a&gt;. It is a data frame with plant species richness and predictors for 227 ecoregions in the Americas, and a distance matrix among the ecoregion edges named, well, &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/distance_matrix.html&#34;&gt;&lt;code&gt;distance_matrix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(plant_richness_df)
data(distance_matrix)

#names of the response variable and the predictors
dependent.variable.name &amp;lt;- &amp;quot;richness_species_vascular&amp;quot;
predictor.variable.names &amp;lt;- colnames(plant_richness_df)[5:21]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The response variable of &lt;code&gt;plant_richness_df&lt;/code&gt; is “richness_species_vascular”, with the total count of vascular plant species found on each ecoregion. The figure below shows the centroids of each ecoregion along with their associated value of the response variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The predictors (columns 5 to 21) represent diverse factors that may influence plant richness such as sampling bias, the area of the ecoregion, climatic variables, human presence and impact, topography, geographical fragmentation, and features of the neighbors of each ecoregion. The figure below shows the scatterplots of the response variable (y axis) against each predictor (x axis).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;plot_training_df_moran()&lt;/code&gt; helps to check the spatial autocorrelation of the response variable and the predictors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure3.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-promising-variable-interactions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Finding promising variable interactions&lt;/h1&gt;
&lt;p&gt;Random Forests already takes into account variable interactions of the form “variable &lt;code&gt;a&lt;/code&gt; becomes important when &lt;code&gt;b&lt;/code&gt; is higher than x”. However, Random Forest can also take advantage of variable interactions of the form &lt;code&gt;a * b&lt;/code&gt;, as they are commonly defined in regression models.&lt;/p&gt;
&lt;p&gt;The function &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/rf_interactions.html&#34;&gt;&lt;code&gt;rf_interactions()&lt;/code&gt;&lt;/a&gt; tests all possible interactions among predictors by using each one of them in a separate model, and suggesting the ones with the higher potential contribution to the model’s R squared and the higher relative importance (presented as a percentage of the maximum importance of a variable in the model).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;interactions &amp;lt;- rf_interactions(
  data = plant_richness_df,
  dependent.variable.name = dependent.variable.name,
  predictor.variable.names = predictor.variable.names
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Testing 10 candidate interactions.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2 potential interactions identified.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       ┌─────────────────────────┬───────────────────────┬────────────────┐
##       │ Interaction             │ Importance (% of max) │ R2 improvement │
##       ├─────────────────────────┼───────────────────────┼────────────────┤
##       │ human_population_X_bias │                 100.0 │          0.002 │
##       │ _area_km2               │                       │                │
##       ├─────────────────────────┼───────────────────────┼────────────────┤
##       │ climate_bio1_average_X_ │                  81.7 │          0     │
##       │ bias_area_km2           │                       │                │
##       └─────────────────────────┴───────────────────────┴────────────────┘&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure4.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;rf_interactions()&lt;/code&gt; suggests several candidate interactions ordered by their impact on the model. The function cannot say whether an interaction &lt;em&gt;makes sense&lt;/em&gt;, and it is up to the user to choose wisely whether to select an interaction or not.&lt;/p&gt;
&lt;p&gt;For the sake of the example, I will choose &lt;code&gt;climate_bio1_average_X_bias_area_km2&lt;/code&gt;, hypothesizing that ecoregions with higher area (bias_area_km2) and energy (represented by the annual temperature, climate_bio1_average) will have more species of vascular plants (this is just an example, many other rationales are possible when choosing between candidate interactions). The data required to add the interaction to the training data is in the output of &lt;code&gt;rf_interactions()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#adding interaction column to the training data
plant_richness_df[, &amp;quot;climate_bio1_average_X_bias_area_km2&amp;quot;] &amp;lt;- interactions$columns[, &amp;quot;climate_bio1_average_X_bias_area_km2&amp;quot;]

#adding interaction name to predictor.variable.names
predictor.variable.names &amp;lt;- c(predictor.variable.names, &amp;quot;climate_bio1_average_X_bias_area_km2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reducing-multicollinearity-in-the-predictors&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reducing multicollinearity in the predictors&lt;/h1&gt;
&lt;p&gt;The functions &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/auto_cor.html&#34;&gt;&lt;code&gt;auto_cor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/auto_vif.html&#34;&gt;&lt;code&gt;auto_vif()&lt;/code&gt;&lt;/a&gt; help reduce redundancy in the predictors by using different criteria (bivariate R squared vs. &lt;a href=&#34;https://www.statisticshowto.com/variance-inflation-factor/&#34;&gt;variance inflation factor&lt;/a&gt;), while allowing the user to define an &lt;em&gt;order of preference&lt;/em&gt;, which can be based either on domain expertise or on a quantitative assessment. The preference order is defined as a character vector in the &lt;code&gt;preference.order&lt;/code&gt; argument of both functions, and does not need to include the names of all predictors, but just the ones the user would like to keep in the analysis.&lt;/p&gt;
&lt;p&gt;In the example below I give preference to the interaction suggested by &lt;code&gt;rf_interactions()&lt;/code&gt; over it’s two components, and prioritize climate over other types of predictors (any other choice would be valid, it just depends on the scope of the study). These rules are applied to both &lt;code&gt;auto_cor()&lt;/code&gt; and &lt;code&gt;auto_vif()&lt;/code&gt;, that are executed sequentially by using the &lt;code&gt;%&amp;gt;%&lt;/code&gt; pipe from the &lt;a href=&#34;https://magrittr.tidyverse.org/&#34;&gt;magrittr&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;Notice that I have set &lt;code&gt;cor.threshold&lt;/code&gt; and &lt;code&gt;vif.threshold&lt;/code&gt; to low values because the predictors in &lt;code&gt;plant_richness_df&lt;/code&gt; already have little multicollinearity,. The default values (&lt;code&gt;cor.threshold = 0.75&lt;/code&gt; and &lt;code&gt;vif.threshold = 5&lt;/code&gt;) should work well when combined together for any other set of predictors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;preference.order &amp;lt;- c(
    &amp;quot;climate_bio1_average_X_bias_area_km2&amp;quot;,
    &amp;quot;climate_aridity_index_average&amp;quot;,
    &amp;quot;climate_hypervolume&amp;quot;,
    &amp;quot;climate_bio1_average&amp;quot;,
    &amp;quot;climate_bio15_minimum&amp;quot;,
    &amp;quot;bias_area_km2&amp;quot;
  )

predictor.variable.names &amp;lt;- auto_cor(
  x = plant_richness_df[, predictor.variable.names],
  cor.threshold = 0.6,
  preference.order = preference.order
) %&amp;gt;% 
  auto_vif(
    vif.threshold = 2.5,
    preference.order = preference.order
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [auto_cor()]: Removed variables: bias_area_km2, human_footprint_average&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [auto_vif()]: Removed variables: human_population&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of &lt;code&gt;auto_cor()&lt;/code&gt; or &lt;code&gt;auto_vif()&lt;/code&gt; is of the class “variable_selection”, that can be used as input for the argument &lt;code&gt;predictor.variable.names&lt;/code&gt; of any modeling function within the package. An example is shown in the next section.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fitting-a-non-spatial-random-forest-model&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Fitting a non-spatial Random Forest model&lt;/h1&gt;
&lt;p&gt;To fit basic Random Forest models &lt;code&gt;spatialRF&lt;/code&gt; provides the &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/rf.html&#34;&gt;&lt;code&gt;rf()&lt;/code&gt;&lt;/a&gt; function. It takes the training data, the names of the response and the predictors, and optionally (to assess the spatial autocorrelation of the residuals), the distance matrix, and a vector of distance thresholds (in the same units as the distances in &lt;strong&gt;distance_matrix&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;These distance thresholds are the neighborhoods at which the model will check the spatial autocorrelation of the residuals. Their values may depend on the spatial scale of the data, and the ecological system under study.&lt;/p&gt;
&lt;p&gt;Notice that here I plug the object &lt;code&gt;predictor.variable.names&lt;/code&gt;, output of &lt;code&gt;auto_cor()&lt;/code&gt; and &lt;code&gt;auto_vif()&lt;/code&gt;, directly into the &lt;code&gt;predictor.variable.names&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model.non.spatial &amp;lt;- rf(
  data = plant_richness_df,
  dependent.variable.name = dependent.variable.name,
  predictor.variable.names = predictor.variable.names,
  distance.matrix = distance_matrix,
  distance.thresholds = c(0, 1500, 3000),
  seed = 100, #for reproducibility
  verbose = FALSE
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The model output can be printed or plotted with a plethora of functions such as &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/print.html&#34;&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/print_importance.html&#34;&gt;&lt;code&gt;print_importance()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/print_performance.html&#34;&gt;&lt;code&gt;print_performance()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/plot_importance.html&#34;&gt;&lt;code&gt;plot_importance()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/print_moran.html&#34;&gt;&lt;code&gt;print_moran()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/plot_moran.html&#34;&gt;&lt;code&gt;plot_moran()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/plot_response_curves.html&#34;&gt;&lt;code&gt;plot_response_curves()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/plot_response_surfaces.html&#34;&gt;&lt;code&gt;plot_response_surfaces)&lt;/code&gt;&lt;/a&gt;, among many others.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_response_curves(model.non.spatial)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure5.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the response curves above, the other predictors are set to their quantiles 0.1, 0.5, and 0.8, but the user can change this behavior by modifying the values of the &lt;code&gt;quantiles&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_response_surfaces(
  x = model.non.spatial,
  a = &amp;quot;climate_bio1_average&amp;quot;,
  b = &amp;quot;neighbors_count&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure6.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In this response surface, the predictors that are not shown are set to their medians (but other quantiles are possible).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_importance(model.non.spatial, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure7.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Predicting onto new data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Models fitted with &lt;code&gt;rf()&lt;/code&gt; and other &lt;code&gt;rf_X()&lt;/code&gt; functions within the package can be predicted onto new data just as it is done with &lt;code&gt;ranger()&lt;/code&gt; models:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predicted &amp;lt;- stats::predict(
  object = model.non.spatial,
  data = plant_richness_df,
  type = &amp;quot;response&amp;quot;
  )$predictions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Repeating a model execution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Random Forest is an stochastic algorithm that yields slightly different results on each run unless a random seed is set. This particularity has implications for the interpretation of variable importance scores. For example, in the plot above, the difference in importance between the predictors &lt;code&gt;climate_hypervolume&lt;/code&gt; and &lt;code&gt;climate_bio1_average_X_bias_area_km2&lt;/code&gt; could be just the result of chance. The function &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/rf_repeat.html&#34;&gt;&lt;code&gt;rf_repeat()&lt;/code&gt;&lt;/a&gt; repeats a model execution and yields the distribution of importance scores of the predictors across executions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model.non.spatial.repeat &amp;lt;- rf_repeat(
  model = model.non.spatial, 
  repetitions = 30,
  verbose = FALSE
)

plot_importance(model.non.spatial.repeat, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure8.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After 30 model repetitions it is clear that the difference in importance between &lt;code&gt;climate_hypervolume&lt;/code&gt; and &lt;code&gt;climate_bio1_average_X_bias_area_km2&lt;/code&gt; is not the result of chance.&lt;/p&gt;
&lt;p&gt;The response curves of models fitted with &lt;code&gt;rf_repeat()&lt;/code&gt; can be plotted with &lt;code&gt;plot_response_curves()&lt;/code&gt; as well. The median prediction is shown with a thicker line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_response_curves(
  model.non.spatial.repeat, 
  quantiles = 0.5
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure9.png&#34; /&gt;
The function &lt;code&gt;get_response_curves()&lt;/code&gt; returns a data frame with the data required to make custom plots of the response curves.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot.df &amp;lt;- get_response_curves(model.non.spatial.repeat)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;response&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;predictor&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;quantile&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;model&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;predictor.name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;response.name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-183.8091&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-181.5008&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-179.1924&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-176.8841&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-174.5758&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-172.2675&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-169.9592&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-167.6509&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-165.3426&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1347.937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-163.0343&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;richness_species_vascular&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;tuning-random-forest-hyperparameters&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tuning Random Forest hyperparameters&lt;/h1&gt;
&lt;p&gt;The model fitted above was based on the default hyperparameter values provided by &lt;code&gt;ranger()&lt;/code&gt;, and those might not be the most adequate ones for a given dataset. The function &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/rf_tuning.html&#34;&gt;&lt;code&gt;rf_tuning()&lt;/code&gt;&lt;/a&gt; helps the user to choose sensible values for three Random Forest hyperparameters that are critical to model performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;num.trees&lt;/code&gt;: number of regression trees in the forest.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mtry&lt;/code&gt;: number of variables to choose from on each tree split.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min.node.size&lt;/code&gt;: minimum number of cases on a terminal node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Model tuning can be done on out-of-bag (&lt;code&gt;method = &#34;oob&#34;&lt;/code&gt;) or spatial cross-validation (&lt;code&gt;method = &#34;spatial.cv&#34;&lt;/code&gt;) R squared values. The example below shows the out-of-bag approach because I will explain spatial cross-validation with &lt;code&gt;rf_evaluate()&lt;/code&gt; later in this document.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model.non.spatial.tuned &amp;lt;- rf_tuning(
  model = model.non.spatial,
  method = &amp;quot;spatial.cv&amp;quot;,
  xy = plant_richness_df[, c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)],
  repetitions = 30,
  num.trees = c(500, 1000),
  mtry = seq(
    2, 
    14, #equal or lower than the number of predictors
    by = 3
    ),
  min.node.size = c(5, 10, 20)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Exploring 30 combinations of hyperparameters.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Best hyperparameters:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   - num.trees:     1000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   - mtry:          14&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   - min.node.size: 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R squared gain: 0.029&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure10.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;rf_tuning()&lt;/code&gt; returns a model fitted with the same data as the original model, but using the best hyperparameters found during tuning. Model tuning has helped to a very small improvement in performance measures (+ 0.029 R squared), so from here, we can keep working with &lt;code&gt;model.non.spatial.tuned&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fitting-a-spatial-model&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Fitting a spatial model&lt;/h1&gt;
&lt;p&gt;The spatial autocorrelation of the residuals of &lt;code&gt;model.non.spatial&lt;/code&gt;, measured with &lt;a href=&#34;https://en.wikipedia.org/wiki/Moran%27s_I&#34;&gt;Moran’s I&lt;/a&gt;, can be plotted with &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/plot_moran.html&#34;&gt;&lt;code&gt;plot_moran()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_moran(model.non.spatial.tuned, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure11.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;According to the plot, the spatial autocorrelation of the residuals is highly positive for a neighborhood of 0 km, while it becomes non-significant (p-value &amp;gt; 0.05, whatever that means) at 1500 and 3000 km. To reduce the spatial autocorrelation of the residuals as much as possible, the non-spatial tuned model fitted above can be converted into a spatial model easily with &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/rf_spatial.html&#34;&gt;&lt;code&gt;rf_spatial()&lt;/code&gt;&lt;/a&gt;, that by default uses the Moran’s Eigenvector Maps method.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model.spatial &amp;lt;- rf_spatial(
  model = model.non.spatial.tuned,
  method = &amp;quot;mem.moran.sequential&amp;quot;, #default method
  verbose = FALSE,
  seed = 100
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The plot below shows the Moran’s I of the residuals of the spatial model. It shows that &lt;code&gt;rf_spatial()&lt;/code&gt; has managed to remove the spatial autocorrelation (p-values of the Moran’s I estimates for each neighborhood distance are higher than 0.05) of the model residuals for every neighborhood distance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_moran(model.spatial, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure12.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When comparing the variable importance plots of both models, we can see that the spatial model has an additional set of dots under the name “spatial_predictors”, and that the maximum importance of a few of these spatial predictors matches the importance of the most relevant non-spatial predictors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- plot_importance(
  model.non.spatial, 
  verbose = FALSE) + 
  ggplot2::ggtitle(&amp;quot;Non-spatial model&amp;quot;) 

p2 &amp;lt;- plot_importance(
  model.spatial,
  verbose = FALSE) + 
  ggplot2::ggtitle(&amp;quot;Spatial model&amp;quot;)

p1 | p2 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure13.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A few of the ten most important variables in &lt;code&gt;model.spatial&lt;/code&gt; are spatial predictors.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;importance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average_X_bias_area_km2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.151&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;spatial_predictor_0_2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.147&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;climate_hypervolume&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.140&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;climate_bio1_average&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.132&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;bias_species_per_record&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;spatial_predictor_0_1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.064&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;spatial_predictor_3000_1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.057&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;spatial_predictor_0_6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.053&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;spatial_predictor_0_5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.045&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;human_population_density&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.041&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Spatial predictors are named &lt;code&gt;spatial_predictor_X_Y&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the neighborhood distance at which the predictor has been generated, and &lt;code&gt;Y&lt;/code&gt; is the index of the predictor.&lt;/p&gt;
&lt;p&gt;Spatial predictors, as shown below, are smooth surfaces representing neighborhood among records at different spatial scales.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure14.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The spatial predictors in the spatial model have been generated using the method “mem.moran.sequential” (function’s default), that mimics the Moran’s Eigenvector Maps method described in &lt;a href=&#34;https://www.sciencedirect.com/science/article/abs/pii/S0304380006000925&#34;&gt;(Dray, Legendre, and Peres-Neto 2006)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In brief, the method consist on transforming the distance matrix into a double-centered matrix of normalized weights, to then compute the positive eigenvectors of the weights matrix (a.k.a, Moran’s Eigenvector Maps, or MEMs).&lt;/p&gt;
&lt;p&gt;The MEMs are included in the model one by one in the order of their Moran’s I, and the subset of MEMs maximizing the model’s R squared and minimizing the Moran’s I of the residuals and the number of MEMs added to the model are selected, as shown in the optimization plot below (dots linked by lines represent the selected spatial predictors). The selection procedure is performed by the function &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/select_spatial_predictors_sequential.html&#34;&gt;&lt;code&gt;select_spatial_predictors_sequential()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure15.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tuning spatial models&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spatial models fitted with &lt;code&gt;rf_spatial()&lt;/code&gt; can be tuned as well with &lt;code&gt;rf_tuning()&lt;/code&gt;. However, tuning may in some cases increase the spatial autocorrelation of the model residuals. In that case, the function will return a message explaining the situation, and the original model without any sort of tuning applied&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model.spatial.tuned &amp;lt;- rf_tuning(
  model = model.spatial,
  method = &amp;quot;spatial.cv&amp;quot;,
  xy = plant_richness_df[, c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)],
  repetitions = 30,
  num.trees = c(500, 1000),
  mtry = seq(
    2,
    length(model.spatial$ranger.arguments$predictor.variable.names),
    by = 9),
  min.node.size = c(5, 20)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Exploring 24 combinations of hyperparameters.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Best hyperparameters:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   - num.trees:     1000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   - mtry:          47&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   - min.node.size: 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R squared gain: 0.016&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure16.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;assessing-model-performance-on-spatially-independent-folds&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Assessing model performance on spatially independent folds&lt;/h1&gt;
&lt;p&gt;The function &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/rf_evaluate.html&#34;&gt;&lt;code&gt;rf_evaluate()&lt;/code&gt;&lt;/a&gt; separates the training data into a number of spatially independent training and testing folds, fits a model on each training fold, predicts over each testing fold, and computes performance measures, to finally aggregate them across model repetitions. Let’s see how it works.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model.spatial.tuned &amp;lt;- rf_evaluate(
  model = model.spatial.tuned,
  xy = plant_richness_df[, c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)], #data coordinates
  repetitions = 30,                      #number of folds
  training.fraction = 0.8,               #training data fraction
  metrics = c(&amp;quot;r.squared&amp;quot;, &amp;quot;rmse&amp;quot;),
  verbose = FALSE
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function generates a new slot in the model named “evaluation” with several objects that summarize the spatial cross-validation results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(model.spatial.tuned$evaluation)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;metrics&amp;quot;           &amp;quot;training.fraction&amp;quot; &amp;quot;spatial.folds&amp;quot;    
## [4] &amp;quot;per.fold&amp;quot;          &amp;quot;per.fold.long&amp;quot;     &amp;quot;per.model&amp;quot;        
## [7] &amp;quot;aggregated&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The slot “spatial.folds”, produced by &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/make_spatial_folds.html&#34;&gt;&lt;code&gt;make_spatial_folds()&lt;/code&gt;&lt;/a&gt;, contains the indices of the training and testing cases for each cross-validation repetition. The maps below show two sets of training and testing spatial folds.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure17.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The functions &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/plot_evaluation.html&#34;&gt;&lt;code&gt;plot_evaluation()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/print_evaluation.html&#34;&gt;&lt;code&gt;print_evaluation()&lt;/code&gt;&lt;/a&gt; allow to check the evaluation results as a plot or as a table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print_evaluation(model.spatial.tuned)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Spatial evaluation 
##   - Training fraction:             0.8
##   - Spatial folds:                 25
## 
##     Metric     Mean Standard deviation  Minimum  Maximum
##  r.squared    0.250              0.159    0.080    0.601
##       rmse 3223.499            810.886 2285.215 4748.118&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The low R squared yielded by the model evaluation shows that the spatial model is hard to transfer outside of the training space. Models based on a spatial structure like the ones fitted with &lt;code&gt;rf_spatial()&lt;/code&gt; do not work well when transferred to a different place (that is what &lt;code&gt;rf_compare()&lt;/code&gt; does), because spatial structures are not transferable when the data is irregularly distributed, as it is the case with &lt;code&gt;plant_richness_df&lt;/code&gt;. The comparison below shows how non-spatial models may show better (not bad, not great) evaluation scores on independent spatial folds.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;comparing-several-models&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Comparing several models&lt;/h1&gt;
&lt;p&gt;The function &lt;code&gt;rf_evaluate()&lt;/code&gt; only assesses the predictive performance on unseen data of one model at a time. If the goal is to compare two models, &lt;code&gt;rf_evaluate()&lt;/code&gt; can be indeed ran twice, but &lt;code&gt;spatialRF&lt;/code&gt; offers a more convenient option named &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/rf_compare.html&#34;&gt;&lt;code&gt;rf_compare()&lt;/code&gt;&lt;/a&gt;. It takes as input a named list with as many models as the user needs to compare.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;comparison &amp;lt;- rf_compare(
  models = list(
    `Non-spatial` = model.non.spatial,
    `Non-spatial tuned` = model.non.spatial.tuned,
    `Spatial` = model.spatial,
    `Spatial tuned` = model.spatial.tuned
  ),
  xy = plant_richness_df[, c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)],
  repetitions = 30,
  training.fraction = 0.8,
  metrics = c(&amp;quot;r.squared&amp;quot;, &amp;quot;rmse&amp;quot;),
  notch = TRUE
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figure18.png&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Model&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Metric&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Non-spatial&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;r.squared&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.336&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Non-spatial tuned&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;r.squared&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.412&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Spatial&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;r.squared&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.167&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Spatial tuned&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;r.squared&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.217&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Non-spatial&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rmse&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2817.225&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Non-spatial tuned&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rmse&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2329.933&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Spatial&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rmse&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3086.170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Spatial tuned&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rmse&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2930.469&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;generating-spatial-predictors-for-other-models&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Generating spatial predictors for other models&lt;/h1&gt;
&lt;p&gt;You might not love Random Forest, but &lt;code&gt;spatialRF&lt;/code&gt; loves you, and as such, it gives you tools to generate spatial predictors for other models anyway.&lt;/p&gt;
&lt;p&gt;The first step requires generating Moran’s Eigenvector Maps (MEMs) from the distance matrix. Here there are two options, computing MEMs for a single neighborhood distance with &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/mem.html&#34;&gt;&lt;code&gt;mem()&lt;/code&gt;&lt;/a&gt;, and computing MEMs for several neighborhood distances at once with &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/mem_multithreshold.html&#34;&gt;&lt;code&gt;mem_multithreshold()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#single distance (0km by default)
mems &amp;lt;- mem(x = distance_matrix)

#several distances
mems &amp;lt;- mem_multithreshold(
  x = distance_matrix,
  distance.thresholds = c(0, 1000, 2000)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In either case the result is a data frame with Moran’s Eigenvector Maps (“just” the positive eigenvectors of the double-centered distance matrix).&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;spatial_predictor_0_1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;spatial_predictor_0_2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;spatial_predictor_0_3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;spatial_predictor_0_4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.0259217&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0052203&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0416969&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0363324&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.0996679&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0539713&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1324480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.3826928&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.0010477&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0143046&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0443602&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0031386&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.0165695&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0047991&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0307457&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0005170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.0225761&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0019595&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0230368&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0524239&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.0155252&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0023742&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0197953&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0338956&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.0229197&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0039860&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0312561&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0416697&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;-0.2436009&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1155295&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0791452&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0189996&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;0.0150725&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0158684&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1010284&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0095590&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;-0.1187381&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0471879&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0359881&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0065211&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;But not all MEMs are made equal, and you will need to rank them by their Moran’s I. The function &lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/rank_spatial_predictors.html&#34;&gt;&lt;code&gt;rank_spatial_predictors()&lt;/code&gt;&lt;/a&gt; will help you do so.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mem.rank &amp;lt;- rank_spatial_predictors(
  distance.matrix = distance_matrix,
  spatial.predictors.df = mems
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of &lt;code&gt;rank_spatial_predictors()&lt;/code&gt; is a list with three slots: “method”, a character string with the name of the ranking method; “criteria”, an ordered data frame with the criteria used to rank the spatial predictors; and “ranking”, a character vector with the names of the spatial predictors in the order of their ranking (it is just the first column of the “criteria” data frame). We can use this “ranking” object to reorder or &lt;code&gt;mems&lt;/code&gt; data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mems &amp;lt;- mems[, mem.rank$ranking]

#also:
#mems &amp;lt;- mem.rank$spatial.predictors.df&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From here, spatial predictors can be included in any model one by one, in the order of the ranking, until the spatial autocorrelation of the residuals is gone, or our model gets totally defaced. A little example with a linear model follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#model definition
predictors &amp;lt;- c(
  &amp;quot;climate_aridity_index_average &amp;quot;,
  &amp;quot;climate_bio1_average&amp;quot;,
  &amp;quot;bias_species_per_record&amp;quot;,
  &amp;quot;human_population_density&amp;quot;,
  &amp;quot;topography_elevation_average&amp;quot;,
  &amp;quot;fragmentation_division&amp;quot;
)
model.formula &amp;lt;- as.formula(
  paste(
    dependent.variable.name,
    &amp;quot; ~ &amp;quot;,
    paste(
      predictors,
      collapse = &amp;quot; + &amp;quot;
    )
  )
)

#scaling the data
model.data &amp;lt;- scale(plant_richness_df) %&amp;gt;% 
  as.data.frame()

#fitting the model
m &amp;lt;- lm(model.formula, data = plant_richness_df)

#Moran&amp;#39;s I test of the residuals
moran.test &amp;lt;- moran(
  x = residuals(m),
  distance.matrix = distance_matrix,
)
moran.test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   moran.i p.value               interpretation
## 1    0.21       0 Positive spatial correlation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to the Moran’s I test, the model residuals show spatial autocorrelation. Let’s introduce MEMs one by one until the problem is solved.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#add mems to the data and applies scale()
model.data &amp;lt;- data.frame(
  plant_richness_df,
  mems
) %&amp;gt;%
  scale() %&amp;gt;%
  as.data.frame()

#initialize predictors.i
predictors.i &amp;lt;- predictors

#iterating through MEMs
for(mem.i in colnames(mems)){
  
  #add mem name to model definintion
  predictors.i &amp;lt;- c(predictors.i, mem.i)
  
  #generate model formula with the new spatial predictor
  model.formula.i &amp;lt;- as.formula(
    paste(
      dependent.variable.name,
      &amp;quot; ~ &amp;quot;,
      paste(
        predictors.i,
        collapse = &amp;quot; + &amp;quot;
      )
    )
  )
  
  #fit model
  m.i &amp;lt;- lm(model.formula.i, data = model.data)
  
  #Moran&amp;#39;s I test
  moran.test.i &amp;lt;- moran(
    x = residuals(m.i),
    distance.matrix = distance_matrix,
  )
  
  #stop if no autocorrelation
  if(moran.test.i$interpretation != &amp;quot;Positive spatial correlation&amp;quot;){
    break
  }
  
}#end of loop&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can compare the model without spatial predictors &lt;code&gt;m&lt;/code&gt; and the model with spatial predictors &lt;code&gt;m.i&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Model&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Predictors&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;R_squared&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;AIC&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;BIC&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Moran.I&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Non-spatial&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.38&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4238&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4266&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Spatial&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;530&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;608&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.06&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;According to the model comparison, it can be concluded that the addition of spatial predictors, in spite of the increase in complexity, has improved the model. In any case, this is just a simple demonstration of how spatial predictors generated with functions of the &lt;code&gt;spatialRF&lt;/code&gt; package can still help you fit spatial models with other modeling methods.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ecological memory at millennial time‐scales: the importance of data constraints, species longevity and niche features</title>
      <link>https://blasbenito.com/publication/2020_benito_ecography_memoria/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/publication/2020_benito_ecography_memoria/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Historical anthropogenic footprints in the distribution of threatened plants in China</title>
      <link>https://blasbenito.com/publication/2017_feng_biological_conservation/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/publication/2017_feng_biological_conservation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Supporting underrepresented forests in Mesoamerica</title>
      <link>https://blasbenito.com/publication/2015_albuquerque_naturaleza_and_conservacao/</link>
      <pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/publication/2015_albuquerque_naturaleza_and_conservacao/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Distribution and conservation of the relict interaction between the butterfly Agriades zullichi and its larval foodplant (Androsace vitaliana nevadensis)</title>
      <link>https://blasbenito.com/publication/2014_barea-azcon_and_benito_biodiversity_and_conservation/</link>
      <pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/publication/2014_barea-azcon_and_benito_biodiversity_and_conservation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Forecasting plant range collapse in a mediterranean hotspot: when dispersal uncertainties matter</title>
      <link>https://blasbenito.com/publication/2014_benito_diversity_and_distributions/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/publication/2014_benito_diversity_and_distributions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comparing the performance of species distribution models of Zostera marina: Implications for conservation</title>
      <link>https://blasbenito.com/publication/2013_valle_journal_of_sea_research/</link>
      <pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/publication/2013_valle_journal_of_sea_research/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The impact of modelling choices in the predictive performance of richness maps derived from species‐distribution models: guidelines to build better diversity models</title>
      <link>https://blasbenito.com/publication/2013_benito_methods_in_ecology_and_evolution/</link>
      <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/publication/2013_benito_methods_in_ecology_and_evolution/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
