) +
geom_line() +
geom_vline(xintercept = 2.5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 10, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = abcd_vif, col = "red4") +
geom_label(
aes(x = 17.1, y = 0.75, label = "VIF of a\n vs b, c, d"),
fill = "white",
color = "red4",
label.size = NA,
size = 3.5
) +
geom_vline(xintercept = ab_vif, col = "forestgreen") +
geom_label(
aes(x = 2.5, y = 0.85, label = "VIF of a vs b"),
fill = "white",
color = "forestgreen",
label.size = NA,
size = 3.5
) +
labs(title = "R-squared vs Variance Inflation Factor") +
scale_x_continuous(breaks = c(0, 1, 2.5, 5, 10, 20)) +
coord_cartesian(expand = FALSE) +
theme_bw()
help(coord_cartesian)
data.frame(
R2 = seq(from = 0, to = 0.99, by = 0.05),
VIF = 1/(1 - R2)
) |>
ggplot() +
aes(
x = VIF,
y = R2
) +
geom_line() +
geom_vline(xintercept = 2.5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 10, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = abcd_vif, col = "red4") +
geom_label(
aes(x = 17.1, y = 0.75, label = "VIF of a\n vs b, c, d"),
fill = "white",
color = "red4",
label.size = NA,
size = 3.5
) +
geom_vline(xintercept = ab_vif, col = "forestgreen") +
geom_label(
aes(x = 2.5, y = 0.85, label = "VIF of a vs b"),
fill = "white",
color = "forestgreen",
label.size = NA,
size = 3.5
) +
labs(title = "R-squared vs Variance Inflation Factor") +
scale_x_continuous(breaks = c(0, 1, 2.5, 5, 10, 20), expand = FALSE) +
theme_bw()
data.frame(
R2 = seq(from = 0, to = 0.99, by = 0.05),
VIF = 1/(1 - R2)
) |>
ggplot() +
aes(
x = VIF,
y = R2
) +
geom_line() +
geom_vline(xintercept = 2.5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 10, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = abcd_vif, col = "red4") +
geom_label(
aes(x = 17.1, y = 0.75, label = "VIF of a\n vs b, c, d"),
fill = "white",
color = "red4",
label.size = NA,
size = 3.5
) +
geom_vline(xintercept = ab_vif, col = "forestgreen") +
geom_label(
aes(x = 2.5, y = 0.85, label = "VIF of a vs b"),
fill = "white",
color = "forestgreen",
label.size = NA,
size = 3.5
) +
labs(title = "R-squared vs Variance Inflation Factor") +
scale_x_continuous(breaks = c(0, 1, 2.5, 5, 10, 20)) +
theme_bw()
library(dplyr)
library(ggplot2)
library(collinear)
toy |>
round(3) |>
head()
collinear::cor_df(
df = toy,
predictors = c("a", "b", "c", "d")
)
#model of a against all other predictors
abcd_model <- lm(
formula = a ~ b + c + d,
data = toy
)
#r-squared of the a_model
abcd_R2 <- summary(abcd_model)$r.squared
abcd_R2
abcd_vif <- 1/(1-abcd_R2)
abcd_vif
ab_model <- lm(
formula = a ~ b,
data = toy
)
ab_vif <- 1/(1 - summary(ab_model)$r.squared)
ab_vif
collinear::vif_df(
df = toy[, c("a", "b")]
)
data.frame(
R2 = seq(from = 0, to = 0.99, by = 0.05),
VIF = 1/(1 - R2)
) |>
ggplot() +
aes(
x = VIF,
y = R2
) +
geom_line() +
geom_vline(xintercept = 2.5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 10, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = abcd_vif, col = "red4") +
geom_label(
aes(x = 17.1, y = 0.75, label = "VIF of a\n vs b, c, d"),
fill = "white",
color = "red4",
label.size = NA,
size = 3.5
) +
geom_vline(xintercept = ab_vif, col = "forestgreen") +
geom_label(
aes(x = 2.5, y = 0.85, label = "VIF of a vs b"),
fill = "white",
color = "forestgreen",
label.size = NA,
size = 3.5
) +
labs(title = "R-squared vs Variance Inflation Factor") +
scale_x_continuous(breaks = c(0, 1, 2.5, 5, 10, 20)) +
theme_bw()
ci <- function(b, se){
x <- se * 1.96
as.numeric(c(b-x, b+x))
}
#note: stats::confint() which uses t-critical values to compute more precise confidence intervals.
yab_model <- lm(
formula = y ~ a + b,
data = toy
) |>
summary()
#coefficient estimate and standard error of a
a_coef <- yab_model$coefficients[2, 1:2]
a_coef
a_ci <- ci(
b = a_coef[1],
se = a_coef[2]
)
a_ci
old_width <- diff(a_ci)
old_width
#model y against all predictors and get summary
yabcd_model <- lm(
formula = y ~ a + b + c + d,
data = toy
) |>
summary()
#compute confidence interval of a
a_ci <- ci(
b = yabcd_model$coefficients["a", "Estimate"],
se = yabcd_model$coefficients["a", "Std. Error"]
)
#compute width of confidence interval of a
new_width <- diff(a_ci)
new_width
new_width/old_width
#vif of b vs a
ba_vif <- collinear::vif_df(
df = toy[, c("a", "b")]
) |>
dplyr::filter(variable == "b")
#vif of b vs a c d
bacd_vif <- collinear::vif_df(
df = toy[, c("a", "b", "c", "d")]
) |>
dplyr::filter(variable == "b")
#expeced inflation of the confidence interval
sqrt(bacd_vif$vif)
#compute confidence interval of b in y ~ a + b
b_ci_old <- ci(
b = yab_model$coefficients["b", "Estimate"],
se = yab_model$coefficients["b", "Std. Error"]
)
#compute confidence interval of b in y ~ a + b + c + d
b_ci_new <- ci(
b = yabcd_model$coefficients["b", "Estimate"],
se = yabcd_model$coefficients["b", "Std. Error"]
)
#compute inflation
diff(b_ci_new)/diff(b_ci_old)
yabcd_model$coefficients[-1, ] |>
round(4)
ci(
b = yabcd_model$coefficients["c", "Estimate"],
se = yabcd_model$coefficients["c", "Std. Error"]
)
ci(
b = yabcd_model$coefficients["d", "Estimate"],
se = yabcd_model$coefficients["d", "Std. Error"]
)
#predictor
predictor <- "d"
#number of cases
n <- nrow(toy)
#number of model terms
p <- nrow(yabcd_model$coefficients)
#one-tailed p-value
#q = absolute t-value
#df = degrees of freedom
p_value_one_tailed <- stats::pt(
q = abs(yabcd_model$coefficients[predictor, "t value"]),
df = n - p #degrees of freedom
)
#two-tailed p-value
2 * (1 - p_value_one_tailed)
#number of repetitions
repetitions <- 1000
#number of cases to subset in toy
sample_size <- 30
#vectors to store results
lowvif_p_value <-
highvif_p_value <-
lowvif_estimate <-
highvif_estimate <-
vector(length = repetitions)
#repetitions
for(i in 1:repetitions){
#seed to make randomization reproducible
set.seed(i)
#toy subset
toy.i <- toy[sample(x = 1:nrow(toy), size = sample_size), ]
#high vif model
highvif_model <- lm(
formula =  y ~ a + b + c + d,
data = toy.i
) |>
summary()
#gather results of high vif model
highvif_p_value[i] <- highvif_model$coefficients["b", "Pr(>|t|)"]
highvif_estimate[i] <- highvif_model$coefficients["b", "Estimate"]
#low_vif_model
lowvif_model <- lm(
formula =  y ~ a + b,
data = toy.i
) |>
summary()
#gather results of lowvif
lowvif_p_value[i] <- lowvif_model$coefficients["b", "Pr(>|t|)"]
lowvif_estimate[i] <- lowvif_model$coefficients["b", "Estimate"]
}
ggplot(data = experiment_df) +
aes(
x = estimate,
y = model,
group = model,
color = model
) +
geom_jitter(show.legend = FALSE) +
geom_vline(
xintercept = yab_model$coefficients["b", "Estimate"],
col = "gray50"
) +
annotate(
"text",
label = "Slope of b",
x = 0.32,
y = 2.5,
color = "gray50"
)  +
theme_bw() +
labs(
title = "estimates of b across repetitions",
x = "Coefficient estimate of b",
y = "Model"
)
library(dplyr)
library(ggplot2)
library(collinear)
toy |>
round(3) |>
head()
collinear::cor_df(
df = toy,
predictors = c("a", "b", "c", "d")
)
#model of a against all other predictors
abcd_model <- lm(
formula = a ~ b + c + d,
data = toy
)
#r-squared of the a_model
abcd_R2 <- summary(abcd_model)$r.squared
abcd_R2
abcd_vif <- 1/(1-abcd_R2)
abcd_vif
ab_model <- lm(
formula = a ~ b,
data = toy
)
ab_vif <- 1/(1 - summary(ab_model)$r.squared)
ab_vif
collinear::vif_df(
df = toy[, c("a", "b")]
)
data.frame(
R2 = seq(from = 0, to = 0.99, by = 0.05),
VIF = 1/(1 - R2)
) |>
ggplot() +
aes(
x = VIF,
y = R2
) +
geom_line() +
geom_vline(xintercept = 2.5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 5, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = 10, col = "gray70", lwd = 0.5, lty = 2) +
geom_vline(xintercept = abcd_vif, col = "red4") +
geom_label(
aes(x = 17.1, y = 0.75, label = "VIF of a\n vs b, c, d"),
fill = "white",
color = "red4",
label.size = NA,
size = 3.5
) +
geom_vline(xintercept = ab_vif, col = "forestgreen") +
geom_label(
aes(x = 2.5, y = 0.85, label = "VIF of a vs b"),
fill = "white",
color = "forestgreen",
label.size = NA,
size = 3.5
) +
labs(title = "R-squared vs Variance Inflation Factor") +
scale_x_continuous(breaks = c(0, 1, 2.5, 5, 10, 20)) +
theme_bw()
ci <- function(b, se){
x <- se * 1.96
as.numeric(c(b-x, b+x))
}
#note: stats::confint() which uses t-critical values to compute more precise confidence intervals.
yab_model <- lm(
formula = y ~ a + b,
data = toy
) |>
summary()
#coefficient estimate and standard error of a
a_coef <- yab_model$coefficients[2, 1:2]
a_coef
a_ci <- ci(
b = a_coef[1],
se = a_coef[2]
)
a_ci
old_width <- diff(a_ci)
old_width
#model y against all predictors and get summary
yabcd_model <- lm(
formula = y ~ a + b + c + d,
data = toy
) |>
summary()
#compute confidence interval of a
a_ci <- ci(
b = yabcd_model$coefficients["a", "Estimate"],
se = yabcd_model$coefficients["a", "Std. Error"]
)
#compute width of confidence interval of a
new_width <- diff(a_ci)
new_width
new_width/old_width
#vif of b vs a
ba_vif <- collinear::vif_df(
df = toy[, c("a", "b")]
) |>
dplyr::filter(variable == "b")
#vif of b vs a c d
bacd_vif <- collinear::vif_df(
df = toy[, c("a", "b", "c", "d")]
) |>
dplyr::filter(variable == "b")
#expeced inflation of the confidence interval
sqrt(bacd_vif$vif)
#compute confidence interval of b in y ~ a + b
b_ci_old <- ci(
b = yab_model$coefficients["b", "Estimate"],
se = yab_model$coefficients["b", "Std. Error"]
)
#compute confidence interval of b in y ~ a + b + c + d
b_ci_new <- ci(
b = yabcd_model$coefficients["b", "Estimate"],
se = yabcd_model$coefficients["b", "Std. Error"]
)
#compute inflation
diff(b_ci_new)/diff(b_ci_old)
yabcd_model$coefficients[-1, ] |>
round(4)
ci(
b = yabcd_model$coefficients["c", "Estimate"],
se = yabcd_model$coefficients["c", "Std. Error"]
)
ci(
b = yabcd_model$coefficients["d", "Estimate"],
se = yabcd_model$coefficients["d", "Std. Error"]
)
#predictor
predictor <- "d"
#number of cases
n <- nrow(toy)
#number of model terms
p <- nrow(yabcd_model$coefficients)
#one-tailed p-value
#q = absolute t-value
#df = degrees of freedom
p_value_one_tailed <- stats::pt(
q = abs(yabcd_model$coefficients[predictor, "t value"]),
df = n - p #degrees of freedom
)
#two-tailed p-value
2 * (1 - p_value_one_tailed)
#number of repetitions
repetitions <- 1000
#number of cases to subset in toy
sample_size <- 30
#vectors to store results
lowvif_p_value <-
highvif_p_value <-
lowvif_estimate <-
highvif_estimate <-
vector(length = repetitions)
#repetitions
for(i in 1:repetitions){
#seed to make randomization reproducible
set.seed(i)
#toy subset
toy.i <- toy[sample(x = 1:nrow(toy), size = sample_size), ]
#high vif model
highvif_model <- lm(
formula =  y ~ a + b + c + d,
data = toy.i
) |>
summary()
#gather results of high vif model
highvif_p_value[i] <- highvif_model$coefficients["b", "Pr(>|t|)"]
highvif_estimate[i] <- highvif_model$coefficients["b", "Estimate"]
#low_vif_model
lowvif_model <- lm(
formula =  y ~ a + b,
data = toy.i
) |>
summary()
#gather results of lowvif
lowvif_p_value[i] <- lowvif_model$coefficients["b", "Pr(>|t|)"]
lowvif_estimate[i] <- lowvif_model$coefficients["b", "Estimate"]
}
experiment_df <- data.frame(
model = c(
rep("high VIF", repetitions),
rep("low VIF", repetitions)
),
estimate = c(
highvif_estimate,
lowvif_estimate
),
p_value = c(
highvif_p_value,
lowvif_p_value
)
)
head(experiment_df)
ggplot(data = experiment_df) +
aes(
x = p_value,
y = model,
group = model,
color = model
) +
geom_jitter(show.legend = FALSE, alpha = 0.35) +
geom_vline(xintercept = 0.05, color = "gray50") +
annotate(
"text",
label = "Significance = 0.05",
x = 0.17,
y = 0.5,
color = "gray50"
)  +
theme_bw() +
labs(
title = "p-values of b across repetitions",
x = "p-value",
y = "Model"
)
