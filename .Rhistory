rm(max_prevalence)
tsl_smol <- distantia::tsl_subset(
tsl = tsl,
names = c("San_Francisco", "Napa", "Solano"),
time = c("2021-01-01", "2023-01-01")
)
distantia::tsl_plot(
tsl = tsl_smol,
guide = FALSE,
text_cex = 1.3
)
tsl_smol |>
distantia::distantia_ls() |>
dplyr::mutate(
psi = round(psi, 3)
) |>
reactable::reactable(
resizable = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
tsl_smol |>
distantia::distantia_dtw() |>
dplyr::mutate(
psi = round(psi, 3)
) |>
reactable::reactable(
resizable = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
xy_dtw <- dtw::dtw(
x = tsl_smol$Solano$prevalence,
y = tsl_smol$San_Francisco$prevalence,
keep = TRUE
)
dtw::dtwPlotTwoWay(xy_dtw, offset = 0.5)
rm(tsl_smol, xy_dtw)
df_psi_ls <- distantia::distantia_ls(
tsl = tsl,
distance = "euclidean"
)
str(df_psi_ls)
df_psi_dtw <- distantia::distantia_dtw(
tsl = tsl
)
str(df_psi_dtw)
df_table <- df_psi_dtw |>
dplyr::select(x, y, psi) |>
dplyr::inner_join(
y = dplyr::select(df_psi_ls, x, y, psi),
by = c("x", "y")
) |>
dplyr::transmute(
x, y,
`psi_dtw` = round(psi.x, 3),
psi_ls = round(psi.y, 3)
)
reactable::reactable(
df_table,
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
rm(df_table)
df_psi <- df_psi_dtw
df_psi_stats <- distantia::distantia_stats(
df = df_psi
)
reactable::reactable(
df_psi_stats |>
mutate_if(is.numeric, round, 3),
pagination = FALSE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = nrow(df_psi_stats),
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
distantia::distantia_boxplot(
df = df_psi,
text_cex = 1.4
)
psi_cluster <- distantia::distantia_cluster_hclust(
df = df_psi
)
names(psi_cluster)
reactable::reactable(
psi_cluster$df |>
mutate(silhouette_width = round(silhouette_width, 3)),
pagination = FALSE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = nrow(psi_cluster$df),
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
#number of clusters
k <- psi_cluster$clusters
factoextra::fviz_dend(
x = psi_cluster$cluster_object,
k = k,
k_colors = distantia::color_discrete(n = k),
cex = 1,
label_cols = "gray20",
rect = TRUE,
horiz = TRUE,
main = "",
ylab = "Dissimilarity"
)
sf_cluster <- dplyr::inner_join(
x = covid_counties[, "name"],
y = psi_cluster$df,
by = "name"
)
clustering <- mapview::mapview(
sf_cluster,
zcol = "cluster",
layer.name = "Cluster",
label = "name",
col.regions = distantia::color_discrete(n = k),
alpha.regions = distantia::f_rescale_local(
x = sf_cluster$silhouette_width,
new_min = 0.1
),
legend.position = "upperleft"
)
htmlwidgets::saveWidget(
clustering@map,
file = "clustering.html",
selfcontained = TRUE
)
rm(max_prevalence)
df_model <- distantia::distantia_model_frame(
response_df = df_psi,
predictors_df = covid_counties,
scale = FALSE
)
df_model |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.numeric), ~ round(.x, 2)
)
) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
df_model <- distantia::distantia_model_frame(
response_df = df_psi,
predictors_df = covid_counties,
composite_predictors = list(
economy = c(
"poverty_percentage",
"median_income",
"domestic_product",
"employed_percentage"
)
),
scale = TRUE
)
df_model |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.numeric), ~ round(.x, 2)
)
) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
predictors <- setdiff(
x = colnames(df_model),
y = c("x", "y", "psi")
)
df_model_vif <- collinear::vif_df(
df = df_model,
predictors = predictors
)
reactable::reactable(
df_model_vif,
striped = TRUE,
fullWidth = FALSE,
resizable = TRUE
)
selected_predictors <- collinear::collinear(
df = df_model,
response = "psi",
predictors = predictors,
preference_order = c(
"economy",
"population_density",
"geographic_distance"
),
quiet = TRUE,
max_cor = 0.60,
max_vif = 2.5
)
reactable(
as.data.frame(selected_predictors),
striped = TRUE,
fullWidth = FALSE,
resizable = TRUE
)
model_formula <- collinear::model_formula(
response = response,
predictors = selected_predictors
)[[1]]
model_formula <- collinear::model_formula(
response = response,
predictors = selected_predictors
)[[1]]
model_formula <- collinear::model_formula(
response = "psi",
predictors = selected_predictors
)[[1]]
model_formula
m <- stats::lm(
formula = model_formula,
data = df_model
)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE
)
m <- stats::lm(
formula = psi ~ economy + geographic_distance + area_hectares * population +
daily_miles_traveled,
data = df_model
)
summary(m)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE
)
m <- stats::lm(
formula = model_formula,
data = df_model
)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance"
)
visreg::visreg(
fit = m,
xvar = "economy"
)
visreg::visreg(
fit = m,
xvar = "population"
)
summary(m)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE
)
help(visreg)
help(coefplot)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE,
color = "red4"
)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE,
color = "blue"
)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE,
color = "red"
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
color = "red"
)
visreg::visreg(
fit = m,
xvar = "economy"
)
visreg::visreg(
fit = m,
xvar = "population"
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
col = "red"
)
help(visreg)
visreg::visreg(
fit = m,
xvar = "geographic_distance"
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance"
)
visreg::visreg(
fit = m,
xvar = "economy"
)
visreg::visreg(
fit = m,
xvar = "population"
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
line = list(col = "red")
)
visreg::visreg(
fit = m,
xvar = "economy",
line = list(col = "red")
)
visreg::visreg(
fit = m,
xvar = "population",
line = list(col = "red")
)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE,
color = "red4"
)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE,
color = "red"
)
coefplot::coefplot(
model = m,
interactive = TRUE,
intercept = FALSE,
color = "red"
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
line = list(col = "red")
)
visreg::visreg(
fit = m,
xvar = "economy",
line = list(col = "red")
)
visreg::visreg(
fit = m,
xvar = "population",
line = list(col = "red")
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
line = list(col = "red")
)
visreg::visreg(
fit = m,
xvar = "economy",
line = list(col = "red", lwd = 0.5)
)
visreg::visreg(
fit = m,
xvar = "population",
line = list(col = "red")
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
line = list(col = "red")
)
visreg::visreg(
fit = m,
xvar = "economy",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "population",
line = list(col = "red")
)
par(mfrow = c(3, 1))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "economy",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "population",
line = list(col = "red", lwd = 1)
)
par(mfrow = c(1, 3))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "economy",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "population",
line = list(col = "red", lwd = 1)
)
par(mfrow = c(1, 3))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "economy",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "population",
line = list(col = "red", lwd = 1)
)
par(mfrow = c(1, 3))
visreg::visreg(
fit = m,
xvar = "geographic_distance",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "economy",
line = list(col = "red", lwd = 1)
)
visreg::visreg(
fit = m,
xvar = "area_hectares",
line = list(col = "red", lwd = 1)
)
