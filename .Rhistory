x = zoo_germany,
y = zoo_sweden
)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m,
xlab = "zoo_sweden",
ylab = "zoo_germany"
)
source("mini_dtw.R")
m <- distance_matrix(
x = zoo_germany,
y = zoo_sweden
)
graphics::image(
x = m,
xlab = "zoo_sweden",
ylab = "zoo_germany"
)
source("mini_dtw.R")
m <- distance_matrix(
x = zoo_germany,
y = zoo_sweden
)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m,
xlab = "zoo_sweden",
ylab = "zoo_germany"
)
help(matrix)
m_cost <- matrix(
data = NA,
nrow = nrow(m_dist),
ncol = ncol(m_dist)
)
library(distantia, quietly = TRUE)
library(zoo, quietly = TRUE)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
) |>
tsl_colnames_set(
names = c("evi", "rain", "temp")
)
tsl_plot(tsl)
zoo_sweden <- tsl$Sweden
zoo_spain <- tsl$Spain
zoo_germany <- tsl$Germany
class(zoo_sweden)
zoo::coredata(zoo_sweden)
class(zoo::coredata(zoo_sweden))
zoo::index(zoo_sweden)
file.create("mini_dtw.R")
model_sweden <- stats::lm(
formula = zoo_sweden ~ stats::time(zoo_sweden)
)
model_sweden
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(
x = zoo_sweden_detrended,
col = "red4"
mar = c(0.5, 5, 0, 5)
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(
x = zoo_sweden_detrended,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
#' Linear Detrending
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_detrend <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y
}
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(
x = zoo_spain_detrended,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
x <- zoo::zoo(0:10)
plot(
x = x,
col = "red4",
mar = c(0.5, 1, 0, 1)
)
x_detrended <- ts_detrend(x = x)
plot(
x = x_detrended,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
zoo_spain_scaled <- scale(
x = zoo_spain,
center = TRUE,
scale = TRUE
)
class(zoo_spain_scaled)
#' Linear Detrending and Normalization
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_preprocessing <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y.scaled <- scale(x = y)
y.scaled
}
source("mini_dtw.R")
zoo_spain_ready <- ts_preprocessing(x = zoo_spain)
plot(
x = zoo_spain_ready,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
sqrt(sum((x-y)^2))
}
source("mini_dtw.R")
d_euclidean(
x = zoo::coredata(zoo_germany)[1, ],
y = zoo::coredata(zoo_spain)[2, ]
)
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
d_euclidean(
x = as.numeric(zoo_germany[1, ]),
y = as.numeric(zoo_spain[2, ])
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
sqrt(sum((x-y)^2))
}
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
m_dist <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
for(i in 1:nrow(zoo_spain)){
for(j in 1:nrow(zoo_germany)){
m_dist[i, j] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
m_dist <- matrix(
data = NA,
nrow = nrow(zoo_spain),
ncol = nrow(zoo_germany)
)
for(i in 1:nrow(zoo_spain)){
for(j in 1:nrow(zoo_germany)){
m_dist[i, j] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
m_dist[1:5, 1:5]
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_dist,
xlab = "zoo_spain",
ylab = "zoo_germany"
)
#' Distance Matrix Between Time Series
#' @param x (required, zoo object) time series.
#' @param y (required, zoo object) time series with same columns as `x`
#' @return matrix
distance_matrix <- function(x, y){
x.rows <- nrow(x)
y.rows <- nrow(y)
m_dist <- matrix(
data = NA,
nrow = y.rows,
ncol = x.rows
)
for (i in 1:x.rows) {
for (j in 1:y.rows) {
m_dist[i, j] <- d_euclidean(
x = x[i, ],
y = y[j, ]
)
}
}
m_dist
}
blogdown:::preview_site()
library(distantia, quietly = TRUE)
library(zoo, quietly = TRUE)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
) |>
tsl_colnames_set(
names = c("evi", "rain", "temp")
)
tsl_plot(tsl)
zoo_sweden <- tsl$Sweden
zoo_spain <- tsl$Spain
zoo_germany <- tsl$Germany
class(zoo_sweden)
zoo::coredata(zoo_sweden)
class(zoo::coredata(zoo_sweden))
zoo::index(zoo_sweden)
model_sweden <- stats::lm(
formula = zoo_sweden ~ stats::time(zoo_sweden)
)
model_sweden
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(
x = zoo_sweden_detrended,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
#' Linear Detrending
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_detrend <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y
}
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(
x = zoo_spain_detrended,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
x <- zoo::zoo(0:10)
plot(
x = x,
col = "red4",
mar = c(0.5, 1, 0, 1)
)
x_detrended <- ts_detrend(x = x)
plot(
x = x_detrended,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
zoo_spain_scaled <- scale(
x = zoo_spain,
center = TRUE,
scale = TRUE
)
zoo_spain_scaled
class(zoo_spain_scaled)
#' Linear Detrending and Normalization
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_preprocessing <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y.scaled <- scale(x = y)
y.scaled
}
source("mini_dtw.R")
zoo_spain_ready <- ts_preprocessing(x = zoo_spain)
plot(
x = zoo_spain_ready,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
d <- sqrt(sum((x-y)^2))
d
}
d_euclidean(
x = zoo::coredata(zoo_germany)[1, ],
y = zoo::coredata(zoo_spain)[2, ]
)
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
d_euclidean(
x = as.numeric(zoo_germany[1, ]),
y = as.numeric(zoo_spain[2, ])
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
d <- sqrt(sum((x-y)^2))
d
}
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
m_dist <- matrix(
data = NA,
nrow = nrow(zoo_spain),
ncol = nrow(zoo_germany)
)
for(row.i in 1:nrow(zoo_spain)){
for(col.j in 1:nrow(zoo_germany)){
m_dist[row.i, col.j] <- d_euclidean(
x = zoo_spain[row.i, ],
y = zoo_germany[col.j, ]
)
}
}
m_dist[1:5, 1:5]
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_dist,
xlab = "zoo_spain",
ylab = "zoo_germany"
)
#' Distance Matrix Between Time Series
#' @param x (required, zoo object) time series.
#' @param y (required, zoo object) time series with same columns as `x`
#' @return matrix
distance_matrix <- function(x, y){
m_dist <- matrix(
data = NA,
nrow = nrow(y),
ncol = nrow(x)
)
for(row.i in 1:nrow(y)){
for(col.j in 1:nrow(x)){
m_dist[row.i, col.j] <- d_euclidean(
x = x[row.i, ],
y = y[col.j, ]
)
}
}
m_dist
}
m_dist <- distance_matrix(
x = zoo_spain,
y = zoo_sweden
)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_dist,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
m_cost <- matrix(
data = NA,
nrow = nrow(m_dist),
ncol = ncol(m_dist)
)
m_cost[1, ] <- cumsum(m_dist[1, ])
m_cost[, 1] <- cumsum(m_dist[, 1])
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_cost,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
m_cost[1:2, 1:2]
m_cost[2, 2] <- min(m_cost[1, 2], m_cost[2, 1 - 1]) + m_dist[2, 2]
m_cost[2, 2] <- min(
m_cost[1, 2],
m_cost[2, 1]
) + m_dist[2, 2]
m_cost[1:2, 1:2]
m_cost[2, 2] <- min(
m_cost[1, 2],
m_cost[2, 1]
) + m_dist[2, 2]
m_cost[1:2, 1:2]
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_cost,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
#iterate over rows of the cost matrix
for(row.i in 2:nrow(m_dist)){
#iterate over columns of the cost matrix
for(col.j in 2:ncol(m_dist)){
#get cost of neighbor with minimum accumulated cost
min_cost <- min(
m_cost[row.i - 1, col.j],
m_cost[row.i, col.j - 1]
)
#add it to the distance of the target cell
new_value <- min_cost + m_dist[row.i, col.j]
#fill the empty cell with the new value
m_cost[row.i, col.j] <- new_value
}
}
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_cost,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
m_cost <- cost_matrix(m = m_dist)
#' Cost Matrix from Distance Matrix
#' @param m (required, matrix) distance matrix.
#' @return matrix
cost_matrix <- function(m){
m_cost <- matrix(
data = NA,
nrow = nrow(m),
ncol = ncol(m)
)
m_cost[1, ] <- cumsum(m[1, ])
m_cost[, 1] <- cumsum(m[, 1])
for(row.i in 2:nrow(m)){
for(col.j in 2:ncol(m)){
m_cost[row.i, col.j] <- min(
m_cost[row.i - 1, col.j],
m_cost[row.i, col.j - 1]
) + m[row.i, col.j]
}
}
m_cost
}
m_cost <- cost_matrix(m = m_dist)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_cost,
xlab = "zoo_sweden",
ylab = "zoo_spain"
)
cost_path <- function(
dist_matrix,
cost_matrix
){
# Initialize variables
d_rows <- nrow(dist_matrix)
d_cols <- ncol(dist_matrix)
path_x <- numeric()
path_y <- numeric()
path_dist <- numeric()
path_cost <- numeric()
# Start from the bottom-right corner
x <- d_cols
y <- d_rows
repeat {
# Record the current position
path_x <- c(path_x, x)
path_y <- c(path_y, y)
path_dist <- c(path_dist, dist_matrix[y, x])
path_cost <- c(path_cost, cost_matrix[y, x])
# Define neighbors
neighbors <- list(
x = c(x, x - 1),
y = c(y - 1, y)
)
# Compute costs for neighbors
valid_neighbors <- neighbors$x > 0 & neighbors$y > 0
neighbor_costs <- cost_matrix[
neighbors$y[valid_neighbors],
neighbors$x[valid_neighbors]
]
# Find the neighbor with the minimum cost
if (length(neighbor_costs) == 0) break
min_index <- which.min(neighbor_costs)
# Update coordinates
x <- neighbors$x[valid_neighbors][min_index]
y <- neighbors$y[valid_neighbors][min_index]
}
# Return as a data frame
data.frame(
x = path_x,
y = path_y,
dist = path_dist,
cost = path_cost
)
}
path <- cost_path(
dist_matrix = m_dist,
cost_matrix = m_cost
)
path
