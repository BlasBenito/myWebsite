<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spatial Regression | Blas M. Benito, PhD</title>
    <link>https://blasbenito.com/tag/spatial-regression/</link>
      <atom:link href="https://blasbenito.com/tag/spatial-regression/index.xml" rel="self" type="application/rss+xml" />
    <description>Spatial Regression</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 26 Sep 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://blasbenito.com/media/avatar.jpg</url>
      <title>Spatial Regression</title>
      <link>https://blasbenito.com/tag/spatial-regression/</link>
    </image>
    
    <item>
      <title>R package spatialRF</title>
      <link>https://blasbenito.com/project/post-title/</link>
      <pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://blasbenito.com/project/post-title/</guid>
      <description>&lt;!---
[![R-CMD-check](https://github.com/BlasBenito/spatialRF/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/BlasBenito/spatialRF/actions/workflows/R-CMD-check.yaml)
--&gt;
&lt;!-- badges: start --&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/blasbenito/spatialRF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/devel%20version-1.1.3-blue.svg&#34; alt=&#34;Devel-version&#34;&gt;&lt;/a&gt; 
&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-green.svg&#34; alt=&#34;lifecycle&#34;&gt;&lt;/a&gt;

&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL--3-blue.svg&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; 
&lt;a href=&#34;https://zenodo.org/badge/latestdoi/330962704&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/330962704.svg&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://cran.r-project.org/package=spatialRF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/spatialRF&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://CRAN.R-project.org/package=spatialRF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/spatialRF&#34; alt=&#34;CRAN\_Download\_Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- badges: end --&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The package &lt;strong&gt;spatialRF&lt;/strong&gt; facilitates fitting spatial regression models on regular or irregular data with Random Forest. It does so by generating &lt;em&gt;spatial predictors&lt;/em&gt; that help the model &amp;ldquo;understand&amp;rdquo; the spatial structure of the training data with the end goal of minimizing the spatial autocorrelation of the model residuals and offering honest variable importance scores.&lt;/p&gt;
&lt;p&gt;Two main methods to generate &lt;em&gt;spatial predictors&lt;/em&gt; from the distance matrix of the data points are implemented in the package:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moran&amp;rsquo;s Eigenvector Maps 
&lt;a href=&#34;https://www.sciencedirect.com/science/article/abs/pii/S0304380006000925&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;(Dray, Legendre, and Peres-Neto 2006)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Distance matrix columns as explanatory variables 
&lt;a href=&#34;https://peerj.com/articles/5518/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;(Hengl et al. 2018)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The package is designed to minimize the code required to fit a spatial model from a training dataset, the names of the response and the predictors, and a distance matrix, as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spatial.model &amp;lt;- spatialRF::rf_spatial(
  data = your_dataframe,
  dependent.variable.name = &amp;quot;your_response_variable&amp;quot;,
  predictor.variable.names = c(&amp;quot;predictor1&amp;quot;, &amp;quot;predictor2&amp;quot;, ..., &amp;quot;predictorN&amp;quot;),
  distance.matrix = your_distance_matrix
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;spatialRF&lt;/strong&gt; uses the fast and efficient &lt;code&gt;ranger&lt;/code&gt; package under the hood 
&lt;a href=&#34;https://arxiv.org/abs/1508.04409&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;(Wright and Ziegler 2017)&lt;/a&gt;, so please, cite the &lt;code&gt;ranger&lt;/code&gt; package when using &lt;code&gt;spatialRF&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;This package also provides tools to identify potentially interesting variable interactions, tune random forest hyperparameters, assess model performance on spatially independent data folds, and examine the resulting models via importance plots, response curves, and response surfaces.&lt;/p&gt;
&lt;h1 id=&#34;development&#34;&gt;Development&lt;/h1&gt;
&lt;p&gt;This package is reaching its final form, and big changes are not expected at this stage. However, it has many functions, and even though all them have been tested, only one dataset has been used for those tests. You will find bugs, and something will go wrong almost surely. If you have time to report bugs, please, do so in any of the following ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open a new issue in the 
&lt;a href=&#34;https://github.com/BlasBenito/spatialRF/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Issues GitHub page of the package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Send me an email explaining the issue and the error messages with enough detail at blasbenito at gmail dot com.&lt;/li&gt;
&lt;li&gt;Send a direct message to 
&lt;a href=&#34;https://twitter.com/blasbenito&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;my twitter account&lt;/a&gt; explaining the issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will do my best to solve any issues ASAP!&lt;/p&gt;
&lt;h1 id=&#34;applications&#34;&gt;Applications&lt;/h1&gt;
&lt;p&gt;The goal of &lt;code&gt;spatialRF&lt;/code&gt; is to help fitting &lt;em&gt;explanatory spatial regression&lt;/em&gt;, where the target is to understand how a set of predictors and the spatial structure of the data influences response variable. Therefore, the spatial analyses implemented in the package can be applied to any spatial dataset, regular or irregular, with a sample size between ~100 and ~5000 cases (the higher end will depend on the RAM memory available), a quantitative or binary (values 0 and 1) response variable, and a more or less large set of predictive variables.&lt;/p&gt;
&lt;p&gt;All functions but &lt;code&gt;rf_spatial()&lt;/code&gt; work with non-spatial data as well if the arguments &lt;code&gt;distance.matrix&lt;/code&gt; and &lt;code&gt;distance.thresholds&lt;/code&gt; are not provided In such case, the number of training cases is no longer limited by the size of the distance matrix, and models can be trained with hundreds of thousands of rows. In such case, the spatial autocorrelation of the model&amp;rsquo;s residuals is not assessed.&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;when the focus is on fitting spatial models&lt;/strong&gt;, and due to the nature of the &lt;em&gt;spatial predictors&lt;/em&gt; used to represent the spatial structure of the training data, &lt;strong&gt;there are many things this package cannot do&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Predict model results over raster data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Predict a model result over another region with a different spatial structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work with &amp;ldquo;big data&amp;rdquo;, whatever that means.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Imputation or extrapolation (it can be done, but models based on spatial predictors are hardly transferable).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take temporal autocorrelation into account (but this is something that might be implemented later on).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If after considering these limitations you are still interested, follow me, I will show you how it works.&lt;/p&gt;
&lt;h1 id=&#34;citation&#34;&gt;Citation&lt;/h1&gt;
&lt;p&gt;There is a paper in the making about this package. In the meantime, if you find it useful for your academic work, please cite the &lt;code&gt;ranger&lt;/code&gt; package as well, it is the true core of &lt;code&gt;spatialRF&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Marvin N. Wright, Andreas Ziegler (2017). ranger: A Fast Implementation of Random Forests for High Dimensional Data in C++ and R. Journal of Statistical Software, 77(1), 1-17. doi:10.18637/jss.v077.i01&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Blas M. Benito (2021). spatialRF: Easy Spatial Regression with Random Forest. R package version 1.1.0. doi: 10.5281/zenodo.4745208. url: 
&lt;a href=&#34;https://blasbenito.github.io/spatialRF/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blasbenito.github.io/spatialRF/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;
&lt;p&gt;The version 1.1.3 can be installed from CRAN:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;spatialRF&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The package can also be installed from GitHub as follows. There are several branches in the repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;: latest stable version (1.1.0 currently).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;development&lt;/code&gt;: development version, usually very broken.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v.1.0.9&lt;/code&gt; to &lt;code&gt;v.1.1.2&lt;/code&gt;: archived versions.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(
  repo = &amp;quot;blasbenito/spatialRF&amp;quot;, 
  ref = &amp;quot;main&amp;quot;,
  force = TRUE,
  quiet = TRUE
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a few other libraries that will be useful during this tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(spatialRF)
library(kableExtra)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidyverse)
library(randomForestExplainer)
library(pdp)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;data-requirements&#34;&gt;Data requirements&lt;/h1&gt;
&lt;p&gt;The data required to fit random forest models with &lt;code&gt;spatialRF&lt;/code&gt; must fulfill several conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The input format is data.frame&lt;/strong&gt;. At the moment, tibbles are not fully supported.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The number of rows must be somewhere between 100 and ~5000&lt;/strong&gt;, at least if your target is fitting spatial models. This limitation comes from the fact that the distance matrix grows very fast with an increasing number of training records, so for large datasets, there might not be enough RAM in your machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The number of predictors should be larger than 3&lt;/strong&gt;. Fitting a Random Forest model is moot otherwise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Factors in the response or the predictors are not explicitly supported in the package&lt;/strong&gt;. They may work, or they won&amp;rsquo;t, but in any case, I designed this package for quantitative data alone. However, binary responses with values 0 and 1 are partially supported.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Must be free of &lt;code&gt;NA&lt;/code&gt;&lt;/strong&gt;. You can check if there are NA records with &lt;code&gt;sum(apply(df, 2, is.na))&lt;/code&gt;. If the result is larger than 0, then just execute &lt;code&gt;df &amp;lt;- na.omit(df)&lt;/code&gt; to remove rows with empty cells.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Columns cannot have zero variance&lt;/strong&gt;. This condition can be checked with &lt;code&gt;apply(df, 2, var) == 0&lt;/code&gt;. Columns yielding TRUE should be removed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Columns must not yield &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;Inf&lt;/code&gt; when scaled&lt;/strong&gt;. You can check each condition with &lt;code&gt;sum(apply(scale(df), 2, is.nan))&lt;/code&gt; and &lt;code&gt;sum(apply(scale(df), 2, is.infinite))&lt;/code&gt;. If higher than 0, you can find what columns are giving issues with &lt;code&gt;sapply(as.data.frame(scale(df)), function(x)any(is.nan(x)))&lt;/code&gt; and &lt;code&gt;sapply(as.data.frame(scale(df)), function(x)any(is.infinite(x)))&lt;/code&gt;. Any column yielding &lt;code&gt;TRUE&lt;/code&gt; will generate issues while trying to fit models with &lt;code&gt;spatialRF&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;example-data&#34;&gt;Example data&lt;/h1&gt;
&lt;p&gt;The package includes an example dataset that fulfills the conditions mentioned above, named 
&lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/plant_richness_df.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;plant_richness_df&lt;/code&gt;&lt;/a&gt;. It is a data frame with plant species richness and predictors for 227 ecoregions in the Americas, and a distance matrix among the ecoregion edges named, well, 
&lt;a href=&#34;https://blasbenito.github.io/spatialRF/reference/distance_matrix.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;distance_matrix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The package follows a convention throughout functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The argument &lt;code&gt;data&lt;/code&gt; requires a training data frame.&lt;/li&gt;
&lt;li&gt;The argument &lt;code&gt;dependent.variable.name&lt;/code&gt; is the column name of the response variable.&lt;/li&gt;
&lt;li&gt;The argument &lt;code&gt;predictor.variable.names&lt;/code&gt; contains the column names of the predictors.&lt;/li&gt;
&lt;li&gt;The argument &lt;code&gt;xy&lt;/code&gt; takes a data frame or matrix with two columns named &amp;ldquo;x&amp;rdquo; and &amp;ldquo;y&amp;rdquo;, in that order, with the case coordinates.&lt;/li&gt;
&lt;li&gt;The argument &lt;code&gt;distance.matrix&lt;/code&gt; requires a matrix of distances between the cases in &lt;code&gt;data&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The argument &lt;code&gt;distance.thresholds&lt;/code&gt; is a numeric vector of distances at with spatial autocorrelation wants to be computed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is convenient to define these arguments at the beginning of the workflow.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#loading training data and distance matrix from the package
data(plant_richness_df)
data(distance_matrix)

#names of the response variable and the predictors
dependent.variable.name &amp;lt;- &amp;quot;richness_species_vascular&amp;quot;
predictor.variable.names &amp;lt;- colnames(plant_richness_df)[5:21]

#coordinates of the cases
xy &amp;lt;- plant_richness_df[, c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)]

#distance matrix
distance.matrix &amp;lt;- distance_matrix

#distance thresholds (same units as distance_matrix)
distance.thresholds &amp;lt;- c(0, 1000, 2000, 4000, 8000)

#random seed for reproducibility
random.seed &amp;lt;- 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The response variable of &lt;code&gt;plant_richness_df&lt;/code&gt; is &amp;ldquo;richness_species_vascular&amp;rdquo;, that represents the total count of vascular plant species found on each ecoregion. The figure below shows the centroids of each ecoregion along with their associated value of the response variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;world &amp;lt;- rnaturalearth::ne_countries(
  scale = &amp;quot;medium&amp;quot;, 
  returnclass = &amp;quot;sf&amp;quot;
  )

ggplot2::ggplot() +
  ggplot2::geom_sf(
    data = world, 
    fill = &amp;quot;white&amp;quot;
    ) +
  ggplot2::geom_point(
    data = plant_richness_df,
    ggplot2::aes(
      x = x,
      y = y,
      color = richness_species_vascular
    ),
    size = 2.5
  ) +
  ggplot2::scale_color_viridis_c(
    direction = -1, 
    option = &amp;quot;F&amp;quot;
    ) +
  ggplot2::theme_bw() +
  ggplot2::labs(color = &amp;quot;Plant richness&amp;quot;) +
  ggplot2::scale_x_continuous(limits = c(-170, -30)) +
  ggplot2::scale_y_continuous(limits = c(-58, 80))  +
  ggplot2::ggtitle(&amp;quot;Plant richness of the American ecoregions&amp;quot;) + 
  ggplot2::xlab(&amp;quot;Longitude&amp;quot;) + 
  ggplot2::ylab(&amp;quot;Latitude&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://blasbenito.com/project/post-title/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;576&#34; /&gt;
&lt;p&gt;The predictors (columns 5 to 21) represent diverse factors that may influence plant richness such as sampling bias, the area of the ecoregion, climatic variables, human presence and impact, topography, geographical fragmentation, and features of the neighbors of each ecoregion. The figure below shows the scatterplots of the response variable (y axis) against each predictor (x axis).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Every plotting function in the package now allows changing the colors of their main features via specific arguments such as &lt;code&gt;point.color&lt;/code&gt;, &lt;code&gt;line.color&lt;/code&gt;, or &lt;code&gt;fill.color&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spatialRF::plot_training_df(
  data = plant_richness_df,
  dependent.variable.name = dependent.variable.name,
  predictor.variable.names = predictor.variable.names,
  ncol = 3,
  point.color = viridis::viridis(100, option = &amp;quot;F&amp;quot;),
  line.color = &amp;quot;gray30&amp;quot;
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://blasbenito.com/project/post-title/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;960&#34; /&gt;
</description>
    </item>
    
  </channel>
</rss>
