global_mean
global_mean <- mean(df[[response]], na.rm = TRUE)
global_n <- nrow(df) - 1
global_n
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded = ifelse(
test = dplyr::n() > 1,
yes = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
no = 0
)
df |>
df
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded = ifelse(
test = dplyr::n() > 1,
yes = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
no = 0
)
)
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded =
(sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
)
df <- df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded =
(sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
) |>
dplyr::ungroup()
df
mean(yx$y)
mean(df[[response]], na.rm = TRUE)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
df = yx
response = "y"
predictors = "x"
white_noise = 0.1
smoothing = 2
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
yx_encoded <- collinear::target_encoding_lab(
df = yx,
response = "y",
predictors = "x",
white_noise = 0.1,
smoothing = 2
)
dplyr::glimpse(yx_encoded)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
target_encoding_rank(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
white_noise.i
target_encoding_mean(
df = df,
response = response,
predictor = predictors.to.encode.i,
smoothing = smoothing.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
target_encoding_loo(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
predictor = predictors.to.encode.i
white_noise = white_noise.i
if(length(white_noise) > 1){
white_noise <- white_noise[1]
}
if(white_noise == 0){
name.noise <- ""
} else {
name.noise <- paste0("__noise_", white_noise)
}
encoded.variable.name <- paste0(
predictor,
"__encoded_loo",
name.noise
)
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded =
(sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
) |>
dplyr::ungroup()
df <- df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded =
(sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
) |>
dplyr::ungroup()
df[is.na(df$encoded)]
df$encoded
is.na(df$encoded)
df[is.na(df$encoded), "encoded"] <- mean(df[[response]], na.rm = TRUE)
df[is.nan(df$encoded), "encoded"] <- mean(df[[response]], na.rm = TRUE)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
target_encoding_loo(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i <- 0
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i
predictor = predictors.to.encode.i
rnorm_sd_multiplier = rnorm_sd_multiplier.i
rnorm_sd_multiplier.i
rnorm_sd_multiplier = 1
rnorm_sd_multiplier.i <- 1
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i <- 0
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
mean(1:3)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
rnorm_sd_multiplier.i
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i
rnorm_sd_multiplier.i <- 1
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
yx_encoded <- target_encoding_lab(
df = yx,
response = "y",
predictors = "x",
white_noise = 0.1,
smoothing = 2
)
dplyr::glimpse(yx_encoded)
yx_encoded <- target_encoding_lab(
df = yx,
response = "y",
predictors = "x",
white_noise = c(0, 1),
smoothing = c(0, 2)
)
dplyr::glimpse(yx_encoded)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
#required
install.packages("remotes")
remotes::install_github(
repo = "blasbenito/collinear",
ref = "development"
)
install.packages("ranger")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
library(dplyr)
library(ggplot2)
library(collinear)
toy |>
round(3) |>
head()
install.packages("blogdown")
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::new_post("09_dynamic_time_warping")
blogdown::build_site()
blogdown::serve_site()
blogdown:::preview_site()
library(distantia, quietly = TRUE)
library(dplyr, quietly = TRUE)
tsl <- tsl_initialize(
x = distantia::honeycomb_climate,
name = "cell",
time = time
)
head(distantia::honeycomb_climate)
tsl <- tsl_initialize(
x = distantia::honeycomb_climate,
name = "cell",
time = "time"
)
tsl_plot(tsl[1:5])
tsl <- tsl_initialize(
x = distantia::fagus_dynamics,
name = "name",
time = "time"
)
tsl_plot(tsl)
tsl <- tsl_initialize(
x = distantia::fagus_dynamics,
name = "name",
time = "time"
) |>
tsl_subset(
colnames = "temperature"
)
tsl_plot(tsl)
tsl_plot(tsl)
tsl <- tsl_initialize(
x = distantia::cities_temperature,
name = "name",
time = "time"
)
tsl_plot(tsl)
tsl_plot(tsl)
tsl_plot(tsl, columns = 2)
tsl_names_get(tsl)
tsl <- tsl_initialize(
x = distantia::cities_temperature,
name = "name",
time = "time"
) |>
tsl_subset(
names = c(
"London",
"Rio De Janeiro"
)
)
tsl_plot(tsl)
tsl_plot(tsl)
tsl_plot(tsl)
dev.off()
dev.off()
tsl_plot(tsl)
tsl_plot(tsl, ylim = "relative")
tsl <- tsl_initialize(
x = distantia::cities_temperature,
name = "name",
time = "time"
) |>
tsl_subset(
names = c(
"London",
"Rio De Janeiro"
),
time = c(
"2005-01-01",
"2010-01-01"
)
)
tsl_plot(tsl)
tsl <- tsl_initialize(
x = distantia::cities_temperature,
name = "name",
time = "time"
) |>
tsl_subset(
names = c(
"London",
"Rio De Janeiro"
),
time = c(
"2005-01-01",
"2010-01-01"
)
)
tsl_plot(tsl, ylim = "relative")
tsl <- tsl_initialize(
x = distantia::cities_temperature,
name = "name",
time = "time"
) |>
tsl_subset(
names = c(
"London",
"Rio De Janeiro"
),
time = c(
"2005-01-01",
"2010-01-01"
)
)
tsl_plot(tsl, guide = FALSE)
tsl <- tsl_initialize(
x = distantia::cities_temperature,
name = "name",
time = "time"
) |>
tsl_subset(
names = c(
"London",
"Rio De Janeiro"
),
time = c(
"2005-01-01",
"2010-01-01"
)
)
tsl_plot(
tsl,
guide = FALSE,
ylim = "relative"
)
tsl <- tsl_initialize(
x = distantia::cities_temperature,
name = "name",
time = "time"
) |>
tsl_subset(
names = c(
"London",
"Rio De Janeiro"
),
time = c(
"2005-01-01",
"2010-01-01"
)
)
tsl_plot(
tsl,
guide = FALSE,
ylim = "relative"
)
tsl <- tsl_initialize(
x = distantia::cities_temperature,
name = "name",
time = "time"
) |>
tsl_subset(
names = c(
"London",
"Rio De Janeiro"
),
time = c(
"2005-01-01",
"2010-01-01"
)
)
tsl_plot(
tsl,
guide = FALSE,
ylim = "relative"
)
library(dtw, quietly = TRUE)
tsl_scaled <- tsl_transform(
tsl = tsl,
f = f_scale_local
)
xy_dtw <- dtw::dtw(
x = tsl_scaled$London$temperature,
y = tsl_scaled$`Rio De Janeiro`$temperature,
keep = TRUE
)
plot(xy_dtw, type = "threeway")
tsl_scaled <- tsl_transform(
tsl = tsl,
f = f_scale_local
)
xy_dtw <- dtw::dtw(
x = tsl_scaled$London$temperature,
y = tsl_scaled$`Rio De Janeiro`$temperature,
keep = TRUE
)
plot(xy_dtw, type = "twoway")
tsl_scaled <- tsl_transform(
tsl = tsl,
f = f_scale_local
)
xy_dtw <- dtw::dtw(
x = tsl_scaled$London$temperature,
y = tsl_scaled$`Rio De Janeiro`$temperature,
keep = TRUE
)
plot(xy_dtw, type = "twoway")
tsl_scaled <- tsl_transform(
tsl = tsl,
f = f_scale_local
)
xy_dtw <- dtw::dtw(
x = tsl_scaled$London$temperature,
y = tsl_scaled$`Rio De Janeiro`$temperature,
keep = TRUE
)
plot(xy_dtw, type = "twoway")
tsl_scaled <- tsl_transform(
tsl = tsl,
f = f_scale_local
)
xy_dtw <- dtw::dtw(
x = tsl_scaled$London$temperature,
y = tsl_scaled$`Rio De Janeiro`$temperature,
keep = TRUE
)
plot(xy_dtw, type = "twoway")
tsl_scaled <- tsl_transform(
tsl = tsl,
f = f_scale_local
)
xy_dtw <- dtw::dtw(
x = tsl_scaled$London$temperature,
y = tsl_scaled$`Rio De Janeiro`$temperature,
keep = TRUE
)
plot(xy_dtw, type = "twoway")
plot(xy_dtw, type = "twoway", main = "Dynamic Time Warping")
plot(xy_dtw, type = "twoway", main = "DTW - London vs Rio")
plot(xy_dtw, type = "twoway", main = "DTW - London vs Rio", xlab = "Observation", ylab = "")
