#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- sites[sites$site %in% site.one, "taxon"]
taxa.list.two <- sites[sites$site %in% site.two, "taxon"]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
return(beta)
}
names(betadiversity.df)
betadiversity.df
colnames(betadiversity.df)
betadiversity_multisite <- function(
x,
site.column, #column with site names
taxa.column #column with taxa names
){
#get site combinations
site.combinations <- utils::combn(
x = unique(x[, site.column]),
m = 2
)
#iterating through site pairs
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations),
.combine = 'rbind'
) %do% {
#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- x[x[, site.column] %in% site.one, taxa.column]
taxa.list.two <- x[x[, site.column] %in% site.two, taxa.column]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
return(beta)
}
#remove bad rownames
rownames(betadiversity.df) <- NULL
#reordering columns
betadiversity.df <- betadiversity.df[, c(
"site.one",
"site.two",
"a",
"b",
"c",
"bsor",
"bsim"
)]
#returning output
return(betadiversity.df)
}
colnames(sites)
source("https://gist.githubusercontent.com/BlasBenito/4c3740b056a0c9bb3602f33dfd35990c/raw/bbb40d868787fc5d10e391a2121045eb5d75f165/functions_betadiversity.R")
x <- list()
x$a <- 1
f <- function(x){
x$b <- 2
}
f(x)
x <- list()
x$a <- 1
f <- function(x){
x$b <- 2
}
out <- f(x)
out
f <- function(x){
x$b <- 2
return(x)
}
out <- f(x)
out
x <- list()
x$a <- 1
f <- function(x){
x$b <- 2
}
out <- f(x)
out
f2 <- function(x){
x$b <- 2
return(x)
}
out2 <- f2(x)
out2
f2(x)
install.packages("VennDiagram")
library(VennDiagram)
blogdown::serve_site()
library(magrittr)
library(foreach)
library(doParallel)
taxa <- paste0("taxon_", 1:15)
site1 <- site2 <- taxa[1:7]
site3 <- taxa[8:12]
site4 <- taxa[10:15]
site1 #and site2
site3
site4
a <- length(intersect(site3, site4))
a
b <- length(setdiff(site3, site4))
b
c <- length(setdiff(site4, site3))
c
Bsor <- 2 * a / (2 * a + b + c)
Bsor
Bsim<- min(b, c) / (min(b, c) + a)
Bsim
#x: taxa list of one site
#y: taxa list of another site
abc <- function(x, y){
#list to store output
out <- list()
#filling the list
out$a <- length(intersect(x, y))
out$b <- length(setdiff(x, y))
out$c <- length(setdiff(y, x))
#returning the output
out
}
x <- abc(
x = site3,
y = site4
)
x
sorensen_beta <- function(x){
x$bsor <- round(2 * x$a / (2 * x$a + x$b + x$c), 3)
x
}
simpson_beta <- function(x){
x$bsim <- round(min(x$b, x$c) / (min(x$b, x$c) + x$a), 3)
x
}
sorensen_beta(x)
simpson_beta(x)
x <- abc(
x = site3,
y = site4
) %>%
sorensen_beta() %>%
simpson_beta()
x
betadiversity <- function(x, y){
require(magrittr)
abc(x, y) %>%
sorensen_beta() %>%
simpson_beta()
}
x <- betadiversity(
x = site3,
y = site4
)
x
sites <- data.frame(
site = c(
rep("site1", length(site1)),
rep("site2", length(site2)),
rep("site3", length(site3)),
rep("site4", length(site4))
),
taxon = c(
site1,
site2,
site3,
site4
)
)
kableExtra::kable(sites)
site.combinations <- utils::combn(
x = unique(sites$site),
m = 2
)
site.combinations
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations), #iterates through columns of site.combinations
.combine = 'rbind' #to produce a data frame
) %do% {
#site names
site.one <- site.combinations[1, i] #from column i, row 1
site.two <- site.combinations[2, i] #from column i, row 2
#getting taxa lists
taxa.list.one <- sites[sites$site %in% site.one, "taxon"]
taxa.list.two <- sites[sites$site %in% site.two, "taxon"]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
#returning output
beta
}
rownames(betadiversity.df) <- NULL
kableExtra::kable(betadiversity.df)
betadiversity_multisite <- function(
x,
site.column, #column with site names
taxa.column #column with taxa names
){
#get site combinations
site.combinations <- utils::combn(
x = unique(x[, site.column]),
m = 2
)
#iterating through site pairs
betadiversity.df <- foreach::foreach(
i = 1:ncol(site.combinations),
.combine = 'rbind'
) %do% {
#site names
site.one <- site.combinations[1, i]
site.two <- site.combinations[2, i]
#getting taxa lists
taxa.list.one <- x[x[, site.column] %in% site.one, taxa.column]
taxa.list.two <- x[x[, site.column] %in% site.two, taxa.column]
#betadiversity
beta <- betadiversity(
x = taxa.list.one,
y = taxa.list.two
)
#adding site names
beta$site.one <- site.one
beta$site.two <- site.two
#returning output
beta
}
#remove bad rownames
rownames(betadiversity.df) <- NULL
#reordering columns
betadiversity.df <- betadiversity.df[, c(
"site.one",
"site.two",
"a",
"b",
"c",
"bsor",
"bsim"
)]
#returning output
return(betadiversity.df)
}
sites.betadiversity <- betadiversity_multisite(
x = sites,
site.column = "site",
taxa.column = "taxon"
)
kableExtra::kable(sites.betadiversity)
hugo_version()
blogdown::serve_site()
blogdown::serve_site()
install.packages("blogdown")
remotes::install_github(
repo = "blasbenito/spatialRF",
ref = "main",
force = TRUE,
quiet = TRUE
)
library(spatialRF)
library(kableExtra)
library(rnaturalearth)
library(rnaturalearthdata)
data(plant_richness_df)
help(plant_richness_df)
data(plant_richness_sf)
data(distance_matrix)
#names of the response variable and the predictors
dependent.variable.name <- "richness_species_vascular"
predictor.variable.names <- colnames(plant_richness_df)[5:21]
pr <- cbind(plant_richness_df, plant_richness_sf)
world <- rnaturalearth::ne_countries(
scale = "medium",
returnclass = "sf"
)
ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_sf(data = pr,
ggplot2::aes(
geometry = geom_centroids,
color = richness_species_vascular
),
size = 2.5
) +
ggplot2::scale_color_viridis_c(direction = -1) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Plant richness") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 75))  +
ggplot2::ggtitle("Plant richness of the American ecoregions")
plot.list <- list()
for(variable in predictor.variable.names){
plot.list[[variable]] <- ggplot2::ggplot(
data = plant_richness_df,
ggplot2::aes_string(
x = variable,
y = "richness_species_vascular",
color = "richness_species_vascular"
)
) +
ggplot2::geom_point() +
ggplot2::scale_color_viridis_c(direction = -1) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "none")
}
patchwork::wrap_plots(plot.list, ncol = 3)
interactions <- rf_interactions(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names
)
#adding interaction column to the training data
plant_richness_df[, "climate_bio1_average_X_bias_area_km2"] <- interactions$columns[, "climate_bio1_average_X_bias_area_km2"]
#adding interaction name to predictor.variable.names
predictor.variable.names <- c(predictor.variable.names, "climate_bio1_average_X_bias_area_km2")
preference.order <- c(
"climate_bio1_average_X_bias_area_km2",
"climate_aridity_index_average",
"climate_hypervolume",
"climate_bio1_average",
"climate_bio15_minimum",
"bias_area_km2"
)
predictor.variable.names <- auto_cor(
x = plant_richness_df[, predictor.variable.names],
cor.threshold = 0.6,
preference.order = preference.order
) %>%
auto_vif(
vif.threshold = 2.5,
preference.order = preference.order
)
model.non.spatial <- rf(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names,
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1500, 3000),
seed = 100, #just for reproducibility
verbose = FALSE
)
plot_response_curves(model.non.spatial)
plot_response_surfaces(
x = model.non.spatial,
a = "climate_bio1_average",
b = "neighbors_count"
)
plot_importance(model.non.spatial, verbose = FALSE)
predicted <- stats::predict(
object = model.non.spatial,
data = plant_richness_df,
type = "response"
)$predictions
model.non.spatial.repeat <- rf_repeat(
model = model.non.spatial,
repetitions = 30,
verbose = FALSE
)
plot_importance(model.non.spatial.repeat, verbose = FALSE)
model.non.spatial.tuned <- rf_tuning(
model = model.non.spatial,
method = "oob",
num.trees = c(500, 750, 1000),
mtry = c(5, 10, 14),
min.node.size = c(5, 10, 15)
)
print_performance(model.non.spatial)
print_performance(model.non.spatial.tuned)
plot_moran(model.non.spatial.tuned, verbose = FALSE)
model.spatial <- rf_spatial(
model = model.non.spatial.tuned,
method = "mem.moran.sequential", #default method
verbose = FALSE
)
plot_moran(model.spatial, verbose = FALSE)
p1 <- plot_importance(
model.non.spatial.tuned,
verbose = FALSE) +
ggplot2::ggtitle("Non-spatial model")
p2 <- plot_importance(
model.spatial,
verbose = FALSE) +
ggplot2::ggtitle("Spatial model")
p1 | p2
kableExtra::kbl(
head(model.spatial$variable.importance$per.variable, n = 10),
format = "markdown"
) %>%
kable_paper("hover", full_width = F)
spatial.predictors <- get_spatial_predictors(model.spatial)
pr <- cbind(spatial.predictors, plant_richness_sf)
p1 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_sf(data = pr,
ggplot2::aes(
geometry = geom_centroids,
color = spatial_predictor_1500_2
),
size = 2.5
) +
ggplot2::scale_color_viridis_c(direction = -1) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Eigenvalue") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 75))  +
ggplot2::ggtitle("Variable: spatial_predictor_1500_2") +
ggplot2::theme(legend.position = "bottom")
p2 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_sf(data = pr,
ggplot2::aes(
geometry = geom_centroids,
color = spatial_predictor_0_6
),
size = 2.5
) +
ggplot2::scale_color_viridis_c(direction = -1) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Eigenvalue") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 75))  +
ggplot2::ggtitle("Variable: spatial_predictor_0_6") +
ggplot2::theme(legend.position = "bottom")
p1 | p2
p <- plot_optimization(model.spatial)
model.spatial.tuned <- rf_tuning(
model = model.spatial
)
print_performance(model.spatial)
print_performance(model.spatial.tuned)
model.spatial.tuned <- rf_evaluate(
model = model.spatial.tuned,
xy = plant_richness_df[, c("x", "y")], #data coordinates
repetitions = 30,                      #number of folds
training.fraction = 0.8,               #training data fraction
metrics = c("r.squared", "rmse"),
verbose = FALSE
)
names(model.spatial.tuned$evaluation)
pr <- plant_richness_sf
pr$group.2 <- pr$group.1 <- "Training"
pr[model.spatial.tuned$evaluation$spatial.folds[[1]]$testing, "group.1"] <- "Testing"
pr[model.spatial.tuned$evaluation$spatial.folds[[25]]$testing, "group.2"] <- "Testing"
p1 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_sf(data = pr,
ggplot2::aes(
geometry = geom_centroids,
color = group.1
),
size = 2.5
) +
ggplot2::scale_color_viridis_d(direction = -1, end = 0.8, alpha = 0.6) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Group") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 75))  +
ggplot2::ggtitle("Spatial fold 1") +
ggplot2::theme(legend.position = "none")
p2 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_sf(data = pr,
ggplot2::aes(
geometry = geom_centroids,
color = group.2
),
size = 2.5
) +
ggplot2::scale_color_viridis_d(direction = -1, end = 0.8, alpha = 0.6) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Group") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 75)) +
ggplot2::ggtitle("Spatial fold 25")
p1 | p2
plot_evaluation(model.spatial.tuned, notch = TRUE)
comparison <- rf_compare(
models = list(
`Non-spatial` = model.non.spatial.tuned,
`Spatial` = model.spatial.tuned
),
xy = plant_richness_df[, c("x", "y")],
metrics = c("r.squared", "rmse"),
notch = TRUE
)
x <- comparison$comparison.df %>%
dplyr::group_by(model, metric) %>%
dplyr::summarise(value = round(mean(value), 3)) %>%
dplyr::arrange(metric) %>%
as.data.frame()
colnames(x) <- c("Model", "Metric", "Mean")
kableExtra::kbl(
x,
format = "markdown"
) %>%
kable_paper("hover", full_width = F)
blogdown::serve_site()
