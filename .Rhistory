df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
smoothing
white_noise.i
target_encoding_mean_smoothing(
df = df,
response = response,
predictor = predictors.to.encode.i,
smoothing = smoothing.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
smoothing.i <- smooting
smoothing.i <- smoothing
target_encoding_mean_smoothing(
df = df,
response = response,
predictor = predictors.to.encode.i,
smoothing = smoothing.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
smoothing = smoothing.i
white_noise = white_noise.i
if(white_noise == 0){
name.noise <- ""
} else {
name.noise <- paste0("__noise_", white_noise)
}
smoothing
if(white_noise == 0){
name.noise <- ""
} else {
name.noise <- paste0("__noise_", white_noise)
}
if(smoothing == 0){
name.smoothing <- ""
} else {
name.smoothing <- paste0("_", smoothing)
}
paste0(
predictor,
"__encoded_mean_smoothing",
name.smoothing,
name.noise
)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
if(smoothing == 0){
name.smoothing <- ""
} else {
name.smoothing <- paste0("_", smoothing)
}
paste0(
predictor,
"__encoded_mean__smoothing",
name.smoothing,
name.noise
)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
smoothing <- 0
white_noise <- 0
target_encoding_rank(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
white_noise.i <- 0
target_encoding_rank(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
target_encoding_mean(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
target_encoding_mean_smoothing(
df = df,
response = response,
predictor = predictors.to.encode.i,
smoothing = smoothing.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
smoothing.i <- 0
target_encoding_mean_smoothing(
df = df,
response = response,
predictor = predictors.to.encode.i,
smoothing = smoothing.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
smoothing.i <- 30
target_encoding_mean_smoothing(
df = df,
response = response,
predictor = predictors.to.encode.i,
smoothing = smoothing.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
target_encoding_loo(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
predictors.to.encode.i
predictor = predictors.to.encode.i
white_noise = white_noise.i
replace
verbose
if(length(white_noise) > 1){
white_noise <- white_noise[1]
}
if(white_noise == 0){
name.noise <- ""
} else {
name.noise <- paste0("__noise_", white_noise)
}
encoded.variable.name <- paste0(
predictor,
"__encoded_loo",
name.noise
)
encoded.variable.name
df <- df |>
dplyr::group_by(df[[predictor]]) |>
dplyr::mutate(
encoded = (
sum(
get(response),
na.rm = TRUE
) -
get(response)
) /
(dplyr::n() - 1)
) |>
dplyr::ungroup()
df
df |>
dplyr::group_by(!!predictor) |>
dplyr::mutate(
encoded = (
sum(
get(response),
na.rm = TRUE
) -
get(response)
) /
(dplyr::n() - 1)
) |>
dplyr::ungroup()
df
df <- yx
df |>
dplyr::group_by(!!predictor) |>
dplyr::mutate(
encoded = (
sum(
get(response),
na.rm = TRUE
) -
get(response)
) /
(dplyr::n() - 1)
) |>
dplyr::ungroup()
df |>
dplyr::group_by(!!predictor)
predictor
df |>
dplyr::group_by(get(predictor))
df |>
dplyr::group_by(get(predictor)) |>
dplyr::mutate(
encoded = (
sum(
get(response),
na.rm = TRUE
) -
get(response)
) /
(dplyr::n() - 1)
) |>
dplyr::ungroup()
df |>
dplyr::group_by(get(predictor)) |>
dplyr::mutate(
encoded = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1)
) |>
dplyr::ungroup()
predictor
df |>
dplyr::group_by(!!predictor) |>
dplyr::mutate(
encoded = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1)
) |>
dplyr::ungroup()
df |>
dplyr::group_by(get(predictor)) |>
dplyr::mutate(
encoded = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1)
) |>
dplyr::ungroup()
df |>
dplyr::group_by(df[[predictor]]) |>
dplyr::mutate(
encoded = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1)
)
df |>
dplyr::group_by(df[[predictor]]) |>
dplyr::mutate(
encoded = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1)
)
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1)
) |>
dplyr::ungroup()
6 - NA
(6 - NA)/8
global_mean <- mean(df[[response]], na.rm = TRUE)
global_mean
global_mean <- mean(df[[response]], na.rm = TRUE)
global_n <- nrow(df) - 1
global_n
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded = ifelse(
test = dplyr::n() > 1,
yes = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
no = 0
)
df |>
df
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded = ifelse(
test = dplyr::n() > 1,
yes = (sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
no = 0
)
)
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded =
(sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
)
df <- df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded =
(sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
) |>
dplyr::ungroup()
df
mean(yx$y)
mean(df[[response]], na.rm = TRUE)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
df = yx
response = "y"
predictors = "x"
white_noise = 0.1
smoothing = 2
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
yx_encoded <- collinear::target_encoding_lab(
df = yx,
response = "y",
predictors = "x",
white_noise = 0.1,
smoothing = 2
)
dplyr::glimpse(yx_encoded)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
target_encoding_rank(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
white_noise.i
target_encoding_mean(
df = df,
response = response,
predictor = predictors.to.encode.i,
smoothing = smoothing.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
target_encoding_loo(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
predictor = predictors.to.encode.i
white_noise = white_noise.i
if(length(white_noise) > 1){
white_noise <- white_noise[1]
}
if(white_noise == 0){
name.noise <- ""
} else {
name.noise <- paste0("__noise_", white_noise)
}
encoded.variable.name <- paste0(
predictor,
"__encoded_loo",
name.noise
)
df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded =
(sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
) |>
dplyr::ungroup()
df <- df |>
dplyr::group_by_at(predictor) |>
dplyr::mutate(
encoded =
(sum(get(response), na.rm = TRUE) - get(response)) /
(dplyr::n() - 1),
) |>
dplyr::ungroup()
df[is.na(df$encoded)]
df$encoded
is.na(df$encoded)
df[is.na(df$encoded), "encoded"] <- mean(df[[response]], na.rm = TRUE)
df[is.nan(df$encoded), "encoded"] <- mean(df[[response]], na.rm = TRUE)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
target_encoding_loo(
df = df,
response = response,
predictor = predictors.to.encode.i,
white_noise = white_noise.i,
seed = seed,
replace = replace,
verbose = verbose
)
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i <- 0
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i
predictor = predictors.to.encode.i
rnorm_sd_multiplier = rnorm_sd_multiplier.i
rnorm_sd_multiplier.i
rnorm_sd_multiplier = 1
rnorm_sd_multiplier.i <- 1
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i <- 0
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
mean(1:3)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
rnorm_sd_multiplier.i
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
rnorm_sd_multiplier.i
rnorm_sd_multiplier.i <- 1
target_encoding_rnorm(
df = df,
response = response,
predictor = predictors.to.encode.i,
rnorm_sd_multiplier = rnorm_sd_multiplier.i,
seed = seed,
replace = replace,
verbose = verbose
)
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_lab.R")
source("~/Dropbox/GITHUB/R_packages/collinear/R/target_encoding_methods.R")
yx_encoded <- target_encoding_lab(
df = yx,
response = "y",
predictors = "x",
white_noise = 0.1,
smoothing = 2
)
dplyr::glimpse(yx_encoded)
yx_encoded <- target_encoding_lab(
df = yx,
response = "y",
predictors = "x",
white_noise = c(0, 1),
smoothing = c(0, 2)
)
dplyr::glimpse(yx_encoded)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
