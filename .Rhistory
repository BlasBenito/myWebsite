p1 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_sf(data = pr,
ggplot2::aes(
geometry = geom_centroids,
color = group.1
),
size = 2.5
) +
ggplot2::scale_color_viridis_d(direction = -1, end = 0.8, alpha = 0.6) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Group") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 75))  +
ggplot2::ggtitle("Spatial fold 1") +
ggplot2::theme(legend.position = "none")
p2 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_sf(data = pr,
ggplot2::aes(
geometry = geom_centroids,
color = group.2
),
size = 2.5
) +
ggplot2::scale_color_viridis_d(direction = -1, end = 0.8, alpha = 0.6) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Group") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 75)) +
ggplot2::ggtitle("Spatial fold 25")
p1 | p2
plot_evaluation(model.spatial.tuned, notch = TRUE)
comparison <- rf_compare(
models = list(
`Non-spatial` = model.non.spatial.tuned,
`Spatial` = model.spatial.tuned
),
xy = plant_richness_df[, c("x", "y")],
metrics = c("r.squared", "rmse"),
notch = TRUE
)
x <- comparison$comparison.df %>%
dplyr::group_by(model, metric) %>%
dplyr::summarise(value = round(mean(value), 3)) %>%
dplyr::arrange(metric) %>%
as.data.frame()
colnames(x) <- c("Model", "Metric", "Mean")
kableExtra::kbl(
x,
format = "markdown"
) %>%
kable_paper("hover", full_width = F)
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
library(spatialRF)
data(plant_richness_df)
data(distance_matrix)
#names of the response variable and the predictors
dependent.variable.name <- "richness_species_vascular"
predictor.variable.names <- colnames(plant_richness_df)[5:21]
world <- rnaturalearth::ne_countries(
scale = "medium",
returnclass = "sf"
)
ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_point(
data = plant_richness_df,
ggplot2::aes(
x = x,
y = y,
color = richness_species_vascular
),
size = 2.5
) +
ggplot2::scale_color_viridis_c(direction = -1) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Plant richness") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 80))  +
ggplot2::ggtitle("Plant richness of the American ecoregions") +
ggplot2::xlab("Longitude") +
ggplot2::ylab("Latitude")
ggsave(file = "figure1.png")
world <- rnaturalearth::ne_countries(
scale = "medium",
returnclass = "sf"
)
ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_point(
data = plant_richness_df,
ggplot2::aes(
x = x,
y = y,
color = richness_species_vascular
),
size = 2.5
) +
ggplot2::scale_color_viridis_c(direction = -1) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Plant richness") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 80))  +
ggplot2::ggtitle("Plant richness of the American ecoregions") +
ggplot2::xlab("Longitude") +
ggplot2::ylab("Latitude")
ggplot2::ggsave(file = "figure1.png")
plot_training_df(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names,
ncol = 3
)
plot_training_df(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names,
ncol = 3
)
ggsave("figure2.png")
plot_training_df(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names,
ncol = 3
)
ggplot2::ggsave("figure2.png")
plot_training_df_moran(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names,
distance.matrix = distance_matrix,
distance.thresholds = c(
0, 1000, 2000, 4000, 8000
)
)
ggplot2::ggsave("figure3.png")
interactions <- rf_interactions(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names
)
interactions <- rf_interactions(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names
)
ggplot2::ggsave("figure4.png")
#adding interaction column to the training data
plant_richness_df[, "climate_bio1_average_X_bias_area_km2"] <- interactions$columns[, "climate_bio1_average_X_bias_area_km2"]
#adding interaction name to predictor.variable.names
predictor.variable.names <- c(predictor.variable.names, "climate_bio1_average_X_bias_area_km2")
preference.order <- c(
"climate_bio1_average_X_bias_area_km2",
"climate_aridity_index_average",
"climate_hypervolume",
"climate_bio1_average",
"climate_bio15_minimum",
"bias_area_km2"
)
predictor.variable.names <- auto_cor(
x = plant_richness_df[, predictor.variable.names],
cor.threshold = 0.6,
preference.order = preference.order
) %>%
auto_vif(
vif.threshold = 2.5,
preference.order = preference.order
)
library(tidyverse)
library(kableExtra)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidyverse)
preference.order <- c(
"climate_bio1_average_X_bias_area_km2",
"climate_aridity_index_average",
"climate_hypervolume",
"climate_bio1_average",
"climate_bio15_minimum",
"bias_area_km2"
)
predictor.variable.names <- auto_cor(
x = plant_richness_df[, predictor.variable.names],
cor.threshold = 0.6,
preference.order = preference.order
) %>%
auto_vif(
vif.threshold = 2.5,
preference.order = preference.order
)
model.non.spatial <- rf(
data = plant_richness_df,
dependent.variable.name = dependent.variable.name,
predictor.variable.names = predictor.variable.names,
distance.matrix = distance_matrix,
distance.thresholds = c(0, 1500, 3000),
seed = 100, #for reproducibility
verbose = FALSE
)
plot_response_curves(model.non.spatial)
ggplot2::ggsave("figure5.png")
plot_response_surfaces(
x = model.non.spatial,
a = "climate_bio1_average",
b = "neighbors_count"
)
ggplot2::ggsave("figure6.png")
plot_importance(model.non.spatial, verbose = FALSE)
ggplot2::ggsave("figure7.png")
predicted <- stats::predict(
object = model.non.spatial,
data = plant_richness_df,
type = "response"
)$predictions
model.non.spatial.repeat <- rf_repeat(
model = model.non.spatial,
repetitions = 30,
verbose = FALSE
)
plot_importance(model.non.spatial.repeat, verbose = FALSE)
ggplot2::ggsave("figure8.png")
plot_response_curves(
model.non.spatial.repeat,
quantiles = 0.5
)
ggplot2::ggsave("figure9.png")
plot.df <- get_response_curves(model.non.spatial.repeat)
kableExtra::kbl(
head(plot.df, n = 10),
format = "markdown"
) %>%
kableExtra::kable_paper("hover", full_width = F)
model.non.spatial.tuned <- rf_tuning(
model = model.non.spatial,
method = "spatial.cv",
xy = plant_richness_df[, c("x", "y")],
repetitions = 30,
num.trees = c(500, 1000),
mtry = seq(
2,
14, #equal or lower than the number of predictors
by = 3
),
min.node.size = c(5, 10, 20)
)
ggplot2::ggsave("figure10.png")
plot_moran(model.non.spatial.tuned, verbose = FALSE)
ggplot2::ggsave("figure11.png")
model.spatial <- rf_spatial(
model = model.non.spatial.tuned,
method = "mem.moran.sequential", #default method
verbose = FALSE,
seed = 100
)
plot_moran(model.spatial, verbose = FALSE)
ggplot2::ggsave("figure12.png")
p1 <- plot_importance(
model.non.spatial,
verbose = FALSE) +
ggplot2::ggtitle("Non-spatial model")
p2 <- plot_importance(
model.spatial,
verbose = FALSE) +
ggplot2::ggtitle("Spatial model")
p1 | p2
ggplot2::ggsave("figure13.png")
kableExtra::kbl(
head(model.spatial$variable.importance$per.variable, n = 10),
format = "markdown"
) %>%
kableExtra::kable_paper("hover", full_width = F)
spatial.predictors <- get_spatial_predictors(model.spatial)
pr <- data.frame(spatial.predictors, plant_richness_df[, c("x", "y")])
p1 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_point(
data = pr,
ggplot2::aes(
x = x,
y = y,
color = spatial_predictor_0_2
),
size = 2.5
) +
ggplot2::scale_color_viridis_c(direction = -1) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Eigenvalue") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 80))  +
ggplot2::ggtitle("Variable: spatial_predictor_0_2") +
ggplot2::theme(legend.position = "bottom")+
ggplot2::xlab("Longitude") +
ggplot2::ylab("Latitude")
p2 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_point(
data = pr,
ggplot2::aes(
x = x,
y = y,
color = spatial_predictor_3000_1,
),
size = 2.5
) +
ggplot2::scale_color_viridis_c(direction = -1) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Eigenvalue") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 80))  +
ggplot2::ggtitle("Variable: spatial_predictor_3000_1") +
ggplot2::theme(legend.position = "bottom") +
ggplot2::xlab("Longitude") +
ggplot2::ylab("")
p1 | p2
ggplot2::ggsave("figure14.png")
p <- plot_optimization(model.spatial)
ggplot2::ggsave("figure15.png")
model.spatial.tuned <- rf_tuning(
model = model.spatial,
method = "spatial.cv",
xy = plant_richness_df[, c("x", "y")],
repetitions = 30,
num.trees = c(500, 1000),
mtry = seq(
2,
length(model.spatial$ranger.arguments$predictor.variable.names),
by = 9),
min.node.size = c(5, 20)
)
ggplot2::ggsave("figure16.png")
model.spatial.tuned <- rf_evaluate(
model = model.spatial.tuned,
xy = plant_richness_df[, c("x", "y")], #data coordinates
repetitions = 30,                      #number of folds
training.fraction = 0.8,               #training data fraction
metrics = c("r.squared", "rmse"),
verbose = FALSE
)
names(model.spatial.tuned$evaluation)
pr <- plant_richness_df[, c("x", "y")]
pr$group.2 <- pr$group.1 <- "Training"
pr[model.spatial.tuned$evaluation$spatial.folds[[1]]$testing, "group.1"] <- "Testing"
pr[model.spatial.tuned$evaluation$spatial.folds[[25]]$testing, "group.2"] <- "Testing"
p1 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_point(data = pr,
ggplot2::aes(
x = x,
y = y,
color = group.1
),
size = 2.5
) +
ggplot2::scale_color_viridis_d(direction = -1, end = 0.8, alpha = 0.6) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Group") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 80))  +
ggplot2::ggtitle("Spatial fold 1") +
ggplot2::theme(legend.position = "none") +
ggplot2::xlab("Longitude") +
ggplot2::ylab("Latitude")
p2 <- ggplot2::ggplot() +
ggplot2::geom_sf(data = world, fill = "white") +
ggplot2::geom_point(data = pr,
ggplot2::aes(
x = x,
y = y,
color = group.2
),
size = 2.5
) +
ggplot2::scale_color_viridis_d(direction = -1, end = 0.8, alpha = 0.6) +
ggplot2::theme_bw() +
ggplot2::labs(color = "Group") +
ggplot2::scale_x_continuous(limits = c(-170, -30)) +
ggplot2::scale_y_continuous(limits = c(-58, 80)) +
ggplot2::ggtitle("Spatial fold 25") +
ggplot2::xlab("Longitude") +
ggplot2::ylab("")
p1 | p2
ggplot2::ggsave("figure17.png")
print_evaluation(model.spatial.tuned)
comparison <- rf_compare(
models = list(
`Non-spatial` = model.non.spatial,
`Non-spatial tuned` = model.non.spatial.tuned,
`Spatial` = model.spatial,
`Spatial tuned` = model.spatial.tuned
),
xy = plant_richness_df[, c("x", "y")],
repetitions = 30,
training.fraction = 0.8,
metrics = c("r.squared", "rmse"),
notch = TRUE
)
ggplot2::ggsave("figure18.png")
x <- comparison$comparison.df %>%
dplyr::group_by(model, metric) %>%
dplyr::summarise(value = round(median(value), 3)) %>%
dplyr::arrange(metric) %>%
as.data.frame()
colnames(x) <- c("Model", "Metric", "Mean")
kableExtra::kbl(
x,
format = "markdown"
) %>%
kableExtra::kable_paper("hover", full_width = F)
#single distance (0km by default)
mems <- mem(x = distance_matrix)
#several distances
mems <- mem_multithreshold(
x = distance_matrix,
distance.thresholds = c(0, 1000, 2000)
)
kableExtra::kbl(
head(mems[, 1:4], n = 10),
format = "markdown"
) %>%
kableExtra::kable_paper("hover", full_width = F)
mem.rank <- rank_spatial_predictors(
distance.matrix = distance_matrix,
spatial.predictors.df = mems
)
mems <- mems[, mem.rank$ranking]
#also:
#mems <- mem.rank$spatial.predictors.df
#model definition
predictors <- c(
"climate_aridity_index_average ",
"climate_bio1_average",
"bias_species_per_record",
"human_population_density",
"topography_elevation_average",
"fragmentation_division"
)
model.formula <- as.formula(
paste(
dependent.variable.name,
" ~ ",
paste(
predictors,
collapse = " + "
)
)
)
#scaling the data
model.data <- scale(plant_richness_df) %>%
as.data.frame()
#fitting the model
m <- lm(model.formula, data = plant_richness_df)
#Moran's I test of the residuals
moran.test <- moran(
x = residuals(m),
distance.matrix = distance_matrix,
)
moran.test
#add mems to the data and applies scale()
model.data <- data.frame(
plant_richness_df,
mems
) %>%
scale() %>%
as.data.frame()
#initialize predictors.i
predictors.i <- predictors
#iterating through MEMs
for(mem.i in colnames(mems)){
#add mem name to model definintion
predictors.i <- c(predictors.i, mem.i)
#generate model formula with the new spatial predictor
model.formula.i <- as.formula(
paste(
dependent.variable.name,
" ~ ",
paste(
predictors.i,
collapse = " + "
)
)
)
#fit model
m.i <- lm(model.formula.i, data = model.data)
#Moran's I test
moran.test.i <- moran(
x = residuals(m.i),
distance.matrix = distance_matrix,
)
#stop if no autocorrelation
if(moran.test.i$interpretation != "Positive spatial correlation"){
break
}
}#end of loop
comparison.df <- data.frame(
Model = c("Non-spatial", "Spatial"),
Predictors = c(length(predictors), length(predictors.i)),
R_squared = round(c(summary(m)$r.squared, summary(m.i)$r.squared), 2),
AIC = round(c(AIC(m), AIC(m.i)), 0),
BIC = round(c(BIC(m), BIC(m.i)), 0),
`Moran I` = round(c(moran.test$moran.i, moran.test.i$moran.i), 2)
)
kableExtra::kbl(
comparison.df,
format = "markdown"
) %>%
kableExtra::kable_paper("hover", full_width = F)
blogdown::serve_site()
blogdown::build_site()
