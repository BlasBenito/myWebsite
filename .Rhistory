ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (i in 1:nrow(zoo_spain)) {
for (j in 1:nrow(zoo_germany)) {
m[j, i] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
help(outer)
m_ <- outer(
X = 1:nrow(zoo_germany),
Y = 1:nrow(zoo_spain),
FUN = Vectorize(function(i, j) d_euclidean(zoo_germany[i, ], zoo_spain[j, ]))
)
m_
m_ <- outer(
X = 1:nrow(zoo_germany),
Y = 1:nrow(zoo_spain),
FUN = Vectorize(
function(i, j){
d_euclidean(
x = zoo_germany[i, ],
y = zoo_spain[j, ])
}
)
)
m_
m
library(fields)
help(rdist)
blogdown:::preview_site()
head(m)
library(distantia, quietly = TRUE)
library(zoo)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
) |>
tsl_colnames_set(
names = c("evi", "rain", "temp")
)
tsl_plot(tsl)
zoo_sweden <- tsl$Sweden
zoo_spain <- tsl$Spain
zoo_germany <- tsl$Germany
class(zoo_sweden)
zoo::coredata(zoo_sweden)
class(zoo::coredata(zoo_sweden))
zoo::index(zoo_sweden)
file.create("mini_dtw.R")
model_sweden <- stats::lm(
formula = zoo_sweden ~ stats::time(zoo_sweden)
)
model_sweden
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(zoo_sweden_detrended)
#' Linear Detrending
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_detrend <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y
}
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(zoo_spain_detrended)
help("plot.zoo")
plot(zoo_spain_detrended, mar = c(1,1,1,1))
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(zoo_spain_detrended, mar = c(1,4,1,1))
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(zoo_spain_detrended, mar = c(1,5,1,1))
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(zoo_spain_detrended, mar = c(0.5,5,1,1))
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(zoo_spain_detrended, mar = c(0.25,5,1,1))
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(zoo_spain_detrended, mar = c(0.25,5,0,5))
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(zoo_spain_detrended, mar = c(0.5,5,0,5))
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(zoo_sweden_detrended, mar = c(0.5, 5, 0, 5))
x <- zoo::zoo(1:100)
x <- zoo::zoo(1:100)
plot(x)
x <- zoo::zoo(1:100)
plot(x)
x <- zoo::zoo(1:100)
plot(x)
x <- zoo::zoo(1:100)
plot(x)
x <- zoo::zoo(1:100)
plot(x, mar = c(0.5, 5, 0, 5))
x <- zoo::zoo(1:100)
plot(x, mar = c(0.5, 1, 0, 1))
x <- zoo::zoo(1:100)
plot(x, mar = c(0.5, 1, 0, 1))
x_detrended <- ts_detrend(x = x)
plot(x_detrended, mar = c(0.5, 5, 0, 5))
x <- zoo::zoo(1:100)
plot(x, mar = c(0.5, 1, 0, 1))
x_detrended <- ts_detrend(x = x)
plot(x_detrended, mar = c(0.5, 5, 0, 5))
x <- zoo::zoo(1:100)
plot(x, mar = c(0.5, 1, 0, 1))
m <- stats::lm(formula = x ~ stats::time(x))
m
summary(m)
stats::residuals(object = m)
options(scipen = 9999)
stats::residuals(object = m)
help(residuals)
y <- stats::residuals(object = m)
x_detrended <- ts_detrend(x = x)
plot(x_detrended, mar = c(0.5, 5, 0, 5), ylim = range(x))
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(
x = zoo_sweden_detrended,
mar = c(0.5, 5, 0, 5),
col = "red4"
)
x_detrended <- ts_detrend(x = x)
plot(
x = x_detrended,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
x <- zoo::zoo(1:10)
plot(
x = x,
col = "red4",
mar = c(0.5, 1, 0, 1)
)
x_detrended <- ts_detrend(x = x)
plot(
x = x_detrended,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
range(x)
x <- zoo::zoo(0:10)
plot(
x = x,
col = "red4",
mar = c(0.5, 1, 0, 1)
)
x_detrended <- ts_detrend(x = x)
plot(
x = x_detrended,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
scale(
x = zoo_spain,
center = TRUE,
scale = TRUE
)
zoo_spain_scaled <- scale(
x = zoo_spain,
center = TRUE,
scale = TRUE
)
class(zoo_spain_scaled)
source("mini_dtw.R")
zoo_spain_ready <- ts_preprocessing(x = zoo_spain)
plot(
x = zoo_spain_ready,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
source("mini_dtw.R")
zoo_spain_ready <- ts_preprocessing(x = zoo_spain)
plot(
x = zoo_spain_ready,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
source("mini_dtw.R")
d_euclidean(
x = zoo::coredata(zoo_germany)[1, ],
y = zoo::coredata(zoo_spain)[2, ]
)
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
d_euclidean(
x = as.numeric(zoo_germany[1, ]),
y = as.numeric(zoo_spain[2, ])
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
sqrt(sum((x-y)^2))
}
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
for(i in 1:nrow(zoo_spain)){
for(j in 1:nrow(zoo_germany)){
m[j, i] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
m[1:5, 1:5]
dim(m)
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
for(i in 1:nrow(zoo_spain)){
for(j in 1:nrow(zoo_germany)){
m[i, j] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
m[1:5, 1:5]
image(m)
help(image)
graphics::image(m)
graphics::image(m)
par(mar = c(1, 1, 1, 1))
graphics::image(m)
par(mar = c(2, 2, 1, 1))
graphics::image(m)
par(mar = c(4, 4, 1, 1))
graphics::image(m)
par(mar = c(4, 4, 1, 1))
graphics::image(m)
distantia::utils_matrix_plot(m)
par(mar = c(4, 4, 1, 1))
graphics::image(m)
distantia::utils_matrix_plot(m)
distantia::utils_matrix_plot(m)
par(mar = c(4, 4, 1, 1))
graphics::image(t(m))
par(mar = c(4, 4, 1, 1))
graphics::image(m)
par(mar = c(4, 4, 1, 1))
graphics::image(m)
par(mar = c(4, 4, 1, 1))
graphics::image(t(m))
par(mar = c(4, 4, 1, 1))
graphics::image(t(m))
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m,
xlab = "zoo_spain",
ylab = "zoo_germany"
)
source("mini_dtw.R")
m <- distance_matrix(
x = zoo_germany,
y = zoo_sweden
)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m,
xlab = "zoo_sweden",
ylab = "zoo_germany"
)
source("mini_dtw.R")
m <- distance_matrix(
x = zoo_germany,
y = zoo_sweden
)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m,
xlab = "zoo_sweden",
ylab = "zoo_germany"
)
source("mini_dtw.R")
m <- distance_matrix(
x = zoo_germany,
y = zoo_sweden
)
graphics::image(
x = m,
xlab = "zoo_sweden",
ylab = "zoo_germany"
)
source("mini_dtw.R")
m <- distance_matrix(
x = zoo_germany,
y = zoo_sweden
)
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m,
xlab = "zoo_sweden",
ylab = "zoo_germany"
)
help(matrix)
m_cost <- matrix(
data = NA,
nrow = nrow(m_dist),
ncol = ncol(m_dist)
)
library(distantia, quietly = TRUE)
library(zoo, quietly = TRUE)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
) |>
tsl_colnames_set(
names = c("evi", "rain", "temp")
)
tsl_plot(tsl)
zoo_sweden <- tsl$Sweden
zoo_spain <- tsl$Spain
zoo_germany <- tsl$Germany
class(zoo_sweden)
zoo::coredata(zoo_sweden)
class(zoo::coredata(zoo_sweden))
zoo::index(zoo_sweden)
file.create("mini_dtw.R")
model_sweden <- stats::lm(
formula = zoo_sweden ~ stats::time(zoo_sweden)
)
model_sweden
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(
x = zoo_sweden_detrended,
col = "red4"
mar = c(0.5, 5, 0, 5)
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(
x = zoo_sweden_detrended,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
#' Linear Detrending
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_detrend <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y
}
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(
x = zoo_spain_detrended,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
x <- zoo::zoo(0:10)
plot(
x = x,
col = "red4",
mar = c(0.5, 1, 0, 1)
)
x_detrended <- ts_detrend(x = x)
plot(
x = x_detrended,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
zoo_spain_scaled <- scale(
x = zoo_spain,
center = TRUE,
scale = TRUE
)
class(zoo_spain_scaled)
#' Linear Detrending and Normalization
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_preprocessing <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y.scaled <- scale(x = y)
y.scaled
}
source("mini_dtw.R")
zoo_spain_ready <- ts_preprocessing(x = zoo_spain)
plot(
x = zoo_spain_ready,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
sqrt(sum((x-y)^2))
}
source("mini_dtw.R")
d_euclidean(
x = zoo::coredata(zoo_germany)[1, ],
y = zoo::coredata(zoo_spain)[2, ]
)
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
d_euclidean(
x = as.numeric(zoo_germany[1, ]),
y = as.numeric(zoo_spain[2, ])
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
sqrt(sum((x-y)^2))
}
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
m_dist <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
for(i in 1:nrow(zoo_spain)){
for(j in 1:nrow(zoo_germany)){
m_dist[i, j] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
m_dist <- matrix(
data = NA,
nrow = nrow(zoo_spain),
ncol = nrow(zoo_germany)
)
for(i in 1:nrow(zoo_spain)){
for(j in 1:nrow(zoo_germany)){
m_dist[i, j] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
m_dist[1:5, 1:5]
par(mar = c(4, 4, 1, 1))
graphics::image(
x = m_dist,
xlab = "zoo_spain",
ylab = "zoo_germany"
)
#' Distance Matrix Between Time Series
#' @param x (required, zoo object) time series.
#' @param y (required, zoo object) time series with same columns as `x`
#' @return matrix
distance_matrix <- function(x, y){
x.rows <- nrow(x)
y.rows <- nrow(y)
m_dist <- matrix(
data = NA,
nrow = y.rows,
ncol = x.rows
)
for (i in 1:x.rows) {
for (j in 1:y.rows) {
m_dist[i, j] <- d_euclidean(
x = x[i, ],
y = y[j, ]
)
}
}
m_dist
}
