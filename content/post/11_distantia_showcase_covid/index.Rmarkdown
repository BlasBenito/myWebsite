---
title: "{distantia} Demo: Covid-19 Prevalence in California"
author: ""
date: '2025-01-25'
slug: distantia-showcase-covid
categories: []
tags:
- Rstats
- Dynamic Time Warping
- Data Science
- Time Series Analysis
- Tutorial
subtitle: ''
summary: "Showcase with real examples of the analytical capabilities implemented in the R package 'distantia'."
authors: [admin]
lastmod: '2025-01-25T07:28:01+01:00'
featured: no
draft: true
image:
  caption: ''
  focal_point: Smart
  margin: auto
projects: []
toc: true
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  fig.width = 8, 
  fig.height = 6
)
```


## Summary

This post showcases the capabilities of the R package [`distantia`](https://blasbenito.github.io/distantia/) to process, compare, and analyze different types of time series.

## Setup

This tutorial requires the following packages:

  - [`distantia`](https://blasbenito.github.io/distantia/): time series analysis via dynamic time warping.
  - [`dplyr`](https://dplyr.tidyverse.org/): data frame manipulation.
  - [`mapview`](https://r-spatial.github.io/mapview/): easy to use interactive map visualization.
  - [`gt`](https://github.com/rstudio/gt): table formatting.

```{r, message = FALSE, warning = FALSE}
library(distantia)
library(zoo)
library(dplyr)
library(mapview)
library(gt)
library(reactable)
library(dygraphs)
```

## Example Data

This demo focuses on two example data frames shipped with the package `distantia`: `covid_counties`, and `covid_prevalence`.

### `covid_counties`

Stored as a [`simple features`](https://r-spatial.github.io/sf/) data frame, `covid_counties` contains county polygons and several socioeconomic variables. It is connected to `covid_prevalence` by county name, which is stored in the column `name`.

```{r, echo = FALSE, cache=TRUE}
la_population <- mapview(
  covid_counties, 
  zcol = "population",
  label = "name"
  )

htmlwidgets::saveWidget(
  la_population@map, 
  file = "la_population.html", 
  selfcontained = TRUE
  )
```

<iframe src="la_population.html" name="LA_Population"
  width="800" height="600" scrolling="auto" frameborder="0">
   <p>California counties represented in the Covid-19 dataset.</p>
</iframe>

The socioeconomic variables available in `covid_counties` are:

  - `area_hectares`: county surface.
  - `population`: county population.
  - `poverty_percentage`: population percentage below the poverty line.
  - `median_income`: median county income in dollars.
  - `domestic_product`: yearly domestic product in **b**illions (not a typo) of dollars.
  - `daily_miles_traveled`: daily miles traveled by the average inhabitant.
  - `employed_percentage`: percentage of the county population under employment.
  
Please, take in mind that these variables were included in the dataset because they were easy to capture from on-line sources, not because of their importance for epidemiological analyses.

### `covid_prevalence`

This data frame contains weekly Covid-19 prevalence in 36 California counties between 2020-03-16 and 2023-12-18. It is derived from a daily prevalence dataset available [here](https://github.com/BlasBenito/distantia/blob/main/data_full/covid_prevalence.rda).
  
The prevalence time series has the columns `name`, `time`, with the date of the first day of the week each data point represents, and `prevalence`, expressed as proportion of positive tests. The table below shows the first rows of this data frame.
  
```{r, echo = FALSE}
covid_prevalence |> 
  reactable::reactable(
    pagination = TRUE,
    searchable = TRUE,
    sortable = TRUE,
    showSortable = TRUE,
    filterable = TRUE,
    resizable = TRUE,
    defaultPageSize = 10,
    showPageSizeOptions = TRUE,
    striped = TRUE,
    compact = TRUE,
    wrap = FALSE,
    fullWidth = FALSE
  )
```

## Objective

This post focuses on the Covid-19 dataset described above to showcase the applications of `distantia` to the analysis of epidemiological time series. 

  - **Prepare**: transform the data into a format compatible with `distantia`.
  - **Explore**: time series visualization and computation of descriptive statistics.
  - **Compare**: 
  - **Analyze**:
  
**DISCLAIMER:** I am not an epidemiologist, so I will refrain from interpreting any results, and will focus on technical details about the usage of `distantia` insted.

## Data Preparation

This section shows how to transform the data frame `covid_prevalence` into a format compatible with `distantia`.

A **time series list**, or `tsl` for short, is a list of [`zoo`](https://cran.r-project.org/web/packages/zoo/index.html) time series representing unique realizations of the same phenomena observed in different sites, times, or individuals. All [data manipulation](https://blasbenito.github.io/distantia/articles/time_series_lists.html) and analysis functions in `distantia` are designed to be applied to all time series in a `tsl` at once.

The function `tsl_initialize()` transforms time series stored as long data frames into time series lists.

```{r tsl_init, cache=TRUE, cache.path="cache/"}
tsl <- distantia::tsl_initialize(
  x = covid_prevalence,
  name_column = "name",
  time_column = "time"
)
```

Each element in `tsl` is named after the county the data belongs to.

```{r}
names(tsl)
```
The `zoo` objects within `tsl` also have the attribute `name` to help track the data in case it is extracted from the time series list.

```{r}
attributes(tsl[[1]])$name
attributes(tsl[[2]])$name
```
Each individual `zoo` object comprises a time index and a data matrix.

```{r}
zoo::index(tsl[["Alameda"]]) |> 
  head()
```

```{r}
zoo::coredata(tsl[["Alameda"]]) |> 
  head()
```

## Exploration

This section describes the tools in `distantia` that may help develop an intuition on the properties of the data at hand, either via visualization or descriptive analysis.

### Visualization

The function `tsl_plot()` provides a static multipanel visualization of a large number of time series at once.

```{r, fig.height=12}
distantia::tsl_plot(
  tsl = tsl,
  columns = 3,
  guide = FALSE,
  text_cex = 1.2
)
```

Combined with `tsl_subset()`, it can help focus on particular counties and zoom-in over specific time periods.

```{r, fig.height=3}
distantia::tsl_plot(
  tsl = tsl_subset(
    tsl = tsl,
    names = c("Los_Angeles", "Kings"),
    time = c("2021-09-01", "2022-01-31")
  ),
  guide = FALSE
)
```

The individual `zoo` objects in `tsl` can be plotted right away using `plot()` or `distantia::zoo_plot()`. 

```{r, fig.height=2.5}
distantia::zoo_plot(
  x = tsl$Los_Angeles
  )
```

Another good option to plot zoo objects comes with the package [`dygraphs`](https://rstudio.github.io/dygraphs/). The function `dygraphs::dygraph()` produces an interactive visualization that helps localize specific events in time and compare several time series at once.

```{r, fig.height=2}
dygraphs::dygraph(
  data = cbind(tsl$Los_Angeles, tsl$Kings), 
  ylab = "Covid-19 Prevalence"
  )
```

<br>

### Descriptive Stats

Time series have at least two dimensions of interest: *time*, and the variable/s of interest, such as prevalence in this case.

Having a good understanding of the time features of a time series is important, because some data management decisions depend on it. Details like length, resolution, time units, or regularity may define how we design an analysis. In `distantia`, the function `tsl_time()` provides all relevant details about the time in your time series list. 

```{r}
df_time <- distantia::tsl_time(
  tsl = tsl
)
```

The table below shows the first five rows of `df_time`, with the name of the time series, the class of the time index in each zoo object, the units, length and resolution, and their time ranges.

```{r, echo = FALSE}
df_time |> 
  dplyr::select(name, class, units, length, resolution, begin, end) |> 
  reactable::reactable(
    pagination = TRUE,
    searchable = TRUE,
    sortable = TRUE,
    showSortable = TRUE,
    filterable = TRUE,
    resizable = TRUE,
    defaultPageSize = 10,
    showPageSizeOptions = TRUE,
    striped = TRUE,
    compact = TRUE,
    wrap = FALSE,
    fullWidth = FALSE
  )
```
Here, all time series are regular and have the same time resolution and range, which makes the table above rightfully boring.

Once acquainted with time, having a summary of the values in each time series also helps make sense of the main properties of the data. The function `tsl_stats()` summarizes several important statistical properties of the time series in `tsl`.
  
```{r}
df_stats <- distantia::tsl_stats(
  tsl = tsl,
  lags = 1:6 #weeks
)
```

The first part of the output corresponds with common statistical descriptors, such as centrality and dispersion metrics, and higher moments.

```{r, echo=FALSE}
df_stats |> 
  dplyr::select(name, min, q1, median, q3, max, sd, range, iq_range, skewness, kurtosis) |> 
  dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 2))) |> 
  reactable::reactable(
    pagination = TRUE,
    searchable = TRUE,
    sortable = TRUE,
    showSortable = TRUE,
    filterable = TRUE,
    resizable = TRUE,
    defaultPageSize = 10,
    showPageSizeOptions = TRUE,
    striped = TRUE,
    compact = TRUE,
    wrap = FALSE,
    fullWidth = FALSE
  )
```

The second part of the output, produced by the `lags` argument, shows time series autocorrelation (Moran's I) for different time lags. Since the resolution of all time series is 7 days per data-point, each time lag represents a week. A value of 0.9 for the lag 1 indicates the Pearson correlation between the prevalence of each data point and its precedent neighbor.

```{r, echo = FALSE}
df_stats |> 
  select(name, dplyr::contains("lag")) |> 
  dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 2))) |> 
  dplyr::rename_with(~ gsub("ac_", "", .)) |> 
  dplyr::rename_with(~ gsub("_", "", .)) |> 
  reactable::reactable(
    pagination = TRUE,
    searchable = TRUE,
    sortable = TRUE,
    showSortable = TRUE,
    filterable = TRUE,
    resizable = TRUE,
    defaultPageSize = 10,
    showPageSizeOptions = TRUE,
    striped = TRUE,
    compact = TRUE,
    wrap = FALSE,
    fullWidth = TRUE
  )
```

The stats produced by `tsl_stats()` can be joined to the spatial data frame `covid_counties` using their common column `name` to link cases.

```{r}
covid_counties <- dplyr::inner_join(
  x = covid_counties,
  y = df_stats,
  by = "name"
)
```

This join facilitates mapping any of the descriptive stats. For example, the map below shows the maximum prevalence per county. 

```{r, eval = FALSE, warning = FALSE}
mapview::mapview(
  covid_counties, 
  zcol = "q3",
  layer.name = "Max prevalence",
  label = "name",
  col.regions = grDevices::hcl.colors(n = 5, palette = "Zissou 1")
  )
```

```{r, echo = FALSE, cache=TRUE, warning = FALSE}
max_prevalence <- mapview(
  covid_counties, 
  zcol = "max",
  label = "name",
  col.regions = grDevices::hcl.colors(n = 5, palette = "Zissou 1")
  )

htmlwidgets::saveWidget(
  max_prevalence@map, 
  file = "la_population.html", 
  selfcontained = TRUE
  )
```

<iframe src="la_population.html" name="LA_Population"
  width="800" height="600" scrolling="auto" frameborder="0">
   <p>California counties represented in the Covid-19 dataset.</p>
</iframe>


## Dissimilarity Analysis



The package `distantia` 

This section describes a pairwise time series comparison analysis using two different methods:

  - **Lock-Step**: 

```{r, echo = FALSE}
if(file.exists("distantia_output.RData")){
  load("distantia_output.RData")
}
```

Parallelization setup.

```{r, eval = FALSE}
future::plan(
  strategy = future::multisession,
  workers = future::availableCores() - 1
)
```

### Lock-Step

```{r}
df_psi_ls <- distantia::distantia(
  tsl = tsl,
  lock_step = TRUE,
  distance = "euclidean",
  permutation = "restricted",
  block_size = 12, #3 months, one season
  repetitions = 1000
)
```


### Dynamic Time Warping

```{r psi, eval=FALSE}
df_psi_dtw <- distantia::distantia(
  tsl = tsl,
  distance = "euclidean",
  permutation = "restricted",
  block_size = 12, #3 months, one season
  repetitions = 1000
)
```


```{r, echo = FALSE}
save(df_psi_dtw, df_psi_ls, file = "distantia_output.RData")
```


```{r, echo = FALSE}
df_psi_dtw |> 
  select(x, y, psi, p_value) |> 
  reactable::reactable(
    pagination = TRUE,
    searchable = TRUE,
    sortable = TRUE,
    showSortable = TRUE,
    filterable = TRUE,
    resizable = TRUE,
    defaultPageSize = 10,
    showPageSizeOptions = TRUE,
    striped = TRUE,
    compact = TRUE,
    wrap = FALSE,
    fullWidth = TRUE
  )
```

The p-value represents the probability of finding a lower psi (higher similarity) when the time series are permuted. Low p-values indicate a strong similarity, better than expected by chance.