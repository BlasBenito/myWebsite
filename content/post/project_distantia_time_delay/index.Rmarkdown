---
title: "Time Delay Analysis with the R package {distantia}"
author: ""
date: '2025-02-21'
slug: distantia-showcase-covid
categories: []
tags:
- Rstats
- Dynamic Time Warping
- Data Science
- Time Series Analysis
- Tutorial
subtitle: ''
summary: "A brief tutorial on how to perform time-delay analyses with the R package {distantia}."
authors: [admin]
lastmod: '2025-01-25T07:28:01+01:00'
featured: no
draft: true
image:
  caption: ''
  focal_point: Smart
  margin: auto
projects: []
toc: true
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  fig.width = 8, 
  fig.height = 6
)
```


## Summary

The R package [`distantia`](https://blasbenito.github.io/distantia/) has an experimental function named `distantia_time_delay()`


This post explains how to perform a time-delay analysis in epidemiological time series with the R pacakge  .

## Setup

This tutorial requires the following packages:

  - [`distantia`](https://blasbenito.github.io/distantia/): time series analysis via dynamic time warping.
  - [`future`](https://future.futureverse.org/): parallelized execution.
  - [`dplyr`](https://dplyr.tidyverse.org/): data frame manipulation.
  - [`mapview`](https://r-spatial.github.io/mapview/): easy to use interactive map visualization.
  - [`reactable`](https://glin.github.io/reactable/): interactive tables.

```{r, message = FALSE, warning = FALSE}
library(distantia)
library(dtw)
library(zoo)
library(dplyr)
library(mapview)
library(reactable)
```

## Example Data

This demo focuses on two example data frames shipped with the package `distantia`: `covid_counties` and `covid_prevalence`.

### `covid_counties`

Stored as a [`simple features`](https://r-spatial.github.io/sf/) data frame, `covid_counties` contains county polygons and several socioeconomic variables. It is connected to `covid_prevalence` by county name, which is stored in the column `name`.

```{r, echo = FALSE, cache=TRUE}
la_population <- mapview(
  covid_counties, 
  zcol = "population",
  label = "name"
  )

htmlwidgets::saveWidget(
  la_population@map, 
  file = "la_population.html", 
  selfcontained = TRUE
  )
```

<iframe src="la_population.html" name="LA_Population"
  width="600" height="600" scrolling="auto" frameborder="0">
   <p>California counties represented in the Covid-19 dataset.</p>
</iframe>

```{r, echo = FALSE}
rm(la_population)
```


The socioeconomic variables available in `covid_counties` are:

  - `area_hectares`: county surface.
  - `population`: county population.
  - `poverty_percentage`: population percentage below the poverty line.
  - `median_income`: median county income in dollars.
  - `domestic_product`: yearly domestic product in **b**illions (not a typo) of dollars.
  - `daily_miles_traveled`: daily miles traveled by the average inhabitant.
  - `employed_percentage`: percentage of the county population under employment.
  
Please, take in mind that these variables were included in the dataset because they were easy to capture from on-line sources, not because of their importance for epidemiological analyses.

### `covid_prevalence`

This data frame contains weekly Covid-19 prevalence in 36 California counties between 2020-03-16 and 2023-12-18. It is derived from a daily prevalence dataset available [here](https://github.com/BlasBenito/distantia/blob/main/data_full/covid_prevalence.rda).
  
The prevalence time series has the columns `name`, `time`, with the date of the first day of the week each data point represents, and `prevalence`, expressed as proportion of positive tests. The table below shows the first rows of this data frame.
  
```{r, echo = FALSE}
covid_prevalence |> 
  reactable::reactable(
    pagination = TRUE,
    searchable = TRUE,
    sortable = TRUE,
    showSortable = TRUE,
    filterable = TRUE,
    resizable = TRUE,
    defaultPageSize = 10,
    showPageSizeOptions = TRUE,
    striped = TRUE,
    compact = TRUE,
    wrap = FALSE,
    fullWidth = FALSE
  )
```

<br>


## Data Preparation

This section shows how to transform the data frame `covid_prevalence` into a format compatible with `distantia`.

A **time series list**, or `tsl` for short, is a list of [`zoo`](https://cran.r-project.org/web/packages/zoo/index.html) time series representing unique realizations of the same phenomena observed in different sites, times, or individuals. All [data manipulation](https://blasbenito.github.io/distantia/articles/time_series_lists.html) and analysis functions in `distantia` are designed to be applied to all time series in a `tsl` at once.

The function `tsl_initialize()` transforms time series stored as long data frames into time series lists.

```{r tsl_init, cache=TRUE, cache.path="cache/"}
tsl <- distantia::tsl_initialize(
  x = covid_prevalence,
  name_column = "name",
  time_column = "time"
)
```

Each element in `tsl` is named after the county the data belongs to.

```{r}
names(tsl)
```

The `zoo` objects within `tsl` also have the attribute `name` to help track the data in case it is extracted from the time series list.

```{r}
attributes(tsl[[1]])$name
attributes(tsl[[2]])$name
```

Each individual `zoo` object comprises a time index and a data matrix.

```{r}
zoo::index(tsl[["Alameda"]]) |> 
  head()
```

```{r}
zoo::coredata(tsl[["Alameda"]]) |> 
  head()
```

Before going forward, let me show a little example to help develop a sense of how DTW and LS work on a small subset of our time series. The figure below shows two years of data for San Francisco, Napa, and Solano.

```{r, fig.height=3.5, echo = FALSE}
tsl_smol <- distantia::tsl_subset(
  tsl = tsl,
  names = c("San_Francisco", "Napa", "Solano"),
  time = c("2021-01-01", "2023-01-01")
)

distantia::tsl_plot(
  tsl = tsl_smol, 
  guide = FALSE,
  text_cex = 1.3
  )
```

At first glance, Napa and Solano seem quite well synchronized and look very similar. On the other hand, San Francisco, in spite of having the same number of events as the other two, shows a timing difference of several months.

## Time-Delay Analysis

Time-delay or time-lag analyisis is an experimental feature in `distantia`. It applies dynamic time warping to assess the overall delay between irregular time series of different lengths, and it is an alternative to cross-correlation analysis. Let's take a look at how it works! 

### Computing Time-Delay with DTW

This section focuses on the example data `tsl_smol` to show how DTW can be used to compute time-lags.


```{r, fig.height=3.5, echo = FALSE}
distantia::tsl_plot(tsl = tsl_smol, guide = FALSE)
```

The computation of DTW involves finding the *least-cost path* within a cost matrix derived from the distances between all samples in two time series. In the plot below there is a black wiggly line running in parallel to the white diagonal. That's the least-cost path aligning the time series of Napa and San Francisco.

```{r, fig.height=4.5, fig.width=6}
distantia::distantia_dtw_plot(
  tsl = tsl_smol[c("San_Francisco", "Napa")]
)
```

A least-cost path comprises pairs of time coordinates connecting samples from each time series. Computing the time difference between these pairs of samples results in a distribution of time differences we can use to assess the time-delay between these time series.

```{r}
df_delay <- distantia_time_delay(
  tsl = tsl_smol[c("Napa", "San_Francisco")]
)
df_delay
```

```{r, echo = FALSE}
df_delay |> 
  dplyr::select(
    -distance,
    -sd
  ) |> 
  dplyr::mutate(
    mean = round(mean, 1)
  ) |> 
  reactable(
    fullWidth = TRUE,
    resizable = TRUE,
    sortable = TRUE,
    showSortable = TRUE
    )
```




The argument `bandwidth`, expressed as a fraction of the length of the time series, restricts how far in time the algorithm can go to find synchronicity between outbreaks. The plot below sets it to two months (2/12) for demonstration purposes only.

```{r, fig.height=4.5, fig.width=6}
distantia::distantia_dtw_plot(
  tsl = tsl_smol[c("San_Francisco", "Napa")],
  bandwidth = 2/12
)
```
The value of `bandwidth` should be reasonable. For example, setting `bandwidth = 0.25` (a full year) in four years time series with seasonal outbreaks like the ones in `tsl` might be excessive, and would allow the alignment of outbreaks separated by a year.

```{r, fig.height=4.5, fig.width=6}
distantia::distantia_dtw_plot(
  tsl = tsl[c("San_Francisco", "Napa")],
  bandwidth = 1/8
)

distantia::distantia_time_delay(
  tsl = tsl[c("San_Francisco", "Napa")],
  bandwidth = 6/48
)
```





```{r}
df_delay <- distantia::distantia_time_delay(
  tsl = tsl,
  bandwidth = 0.25
)
```

```{r}
reactable::reactable(
  df_delay,
  pagination = TRUE,
  searchable = TRUE,
  sortable = TRUE,
  showSortable = TRUE,
  filterable = TRUE,
  resizable = TRUE,
  defaultPageSize = 10,
  showPageSizeOptions = TRUE,
  striped = TRUE,
  compact = TRUE,
  wrap = FALSE,
  fullWidth = FALSE
)
```

```{r}
distantia::distantia_dtw_plot(
  tsl = tsl[c("Napa", "San_Francisco")],
  bandwidth = 0.125
)
```

```{r}
distantia::tsl_plot(
  tsl = tsl[c("San_Francisco", "Napa")],
  xlim = c("2021-07-01", "2022-01-10")
)
```

```{r}
sf_delay <- distantia::distantia_spatial(
  df = df_delay,
  sf = covid_counties
)
```


```{r}
mapview(sf_delay |> dplyr::filter(x == "Napa", y == "San_Francisco"))
```

