ordisurf(nmds.5km, presence.nmds$bio6, add=T, col="blue", lwd=1, labcex=0.5)
#BIO5
plot(nmds.5km, type="n", main="Bio5")
points(nmds.5km$points, col=presence.nmds$color, lwd=2, pch=16)
ordisurf(nmds.5km, presence.nmds$bio5, add=T, col="blue", lwd=1, labcex=0.5)
#SLOPE
plot(nmds.5km, type="n", main="Topographic slope")
points(nmds.5km$points, col=presence.nmds$color, lwd=2, pch=16)
ordisurf(nmds.5km, presence.nmds$topo_slope, add=T, col="blue", lwd=1, labcex=0.5)
#TOPO DIVERSITY
plot(nmds.5km, type="n", main="Topographic diversity")
points(nmds.5km$points, col=presence.nmds$color, lwd=2, pch=16)
ordisurf(nmds.5km, presence.nmds$topo_diversity, add=T, col="blue", lwd=1, labcex=0.5)
#nmds
plot(nmds.5km, type="n", main="Neanderthal sites")
x11()
par(mfrow=c(2,4))
#nmds
plot(nmds.5km, type="n", main="Neanderthal sites")
points(nmds.5km$points, col=presence.nmds$color, lwd=2, pch=16)
legend("topleft", title="Data type", legend=c("Used", "Rejected"), col=c("black","gray70"), pch=16, cex=0.8)
plot(nmds.5km, type="n", main="Site codes")
text(nmds.5km$points[,1],nmds.5km$points[,2],labels=presence.nmds$site, col=presence.nmds$color, cex=0.4)
dev.off()
x11()
par(mfrow=c(2,4))
plot(nmds.5km, type="n", main="Neanderthal sites")
points(nmds.5km$points, col=presence.nmds$color, lwd=2, pch=16)
legend("topleft", title="Data type", legend=c("Used", "Rejected"), col=c("black","gray70"), pch=16, cex=0.8)
#nmds
plot(nmds.5km, type="n", main="Neanderthal sites")
points(nmds.5km$points, col=presence.nmds$color, lwd=2, pch=16)
legend("topleft", title="Data type", legend=c("Used", "Rejected"), col=c("black","gray70"), pch=16, cex=0.8)
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=FALSE, distance="euclidean")
presence.data.complete.temp <- presence.data.complete
presence.data.complete.temp$tag <- "completed"
presence.data.complete.temp$color <- "gray70"
presence.data.separated.temp <- presence.data.separated
presence.data.separated.temp$tag <- "separated"
presence.data.separated.temp$color <- "black"
presence.nmds <- rbind(presence.data.complete.temp, presence.data.separated.temp)
#NMDS
set.seed(42)
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=FALSE, distance="euclidean")
presence.data.complete.temp <- presence.data.complete
presence.data.complete.temp$tag <- "completed"
presence.data.complete.temp$color <- "gray70"
presence.data.separated.temp <- presence.data.separated
presence.data.separated.temp$tag <- "separated"
presence.data.separated.temp$color <- "black"
presence.nmds <- rbind(presence.data.complete.temp, presence.data.separated.temp)
#NMDS
set.seed(42)
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=FALSE, distance="euclidean")
presence.data.complete.temp <- presence.data.complete
presence.data.complete.temp$tag <- "completed"
presence.data.complete.temp$color <- "gray70"
presence.data.separated.temp <- presence.data.separated
presence.data.separated.temp$tag <- "separated"
presence.data.separated.temp$color <- "black"
presence.nmds <- na.omit(rbind(presence.data.complete.temp, presence.data.separated.temp))
#NMDS
set.seed(42)
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=FALSE, distance="euclidean")
presence.nmds[ ,names(v.brick.5km)]
cor(presence.nmds[ ,names(v.brick.5km)])
set.seed(42)
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=FALSE, distance="euclidean")
dev.off()
x11()
plot(nmds.5km, type="n", main="Neanderthal sites")
points(nmds.5km$points, col=presence.nmds$color, lwd=2, pch=16)
legend("topleft", title="Data type", legend=c("Used", "Rejected"), col=c("black","gray70"), pch=16, cex=0.8)
points(nmds.5km$points, col=presence.nmds$color, lwd=2, pch=16)
#nmds
plot(nmds.5km, type="n", main="Neanderthal sites")
plot(nmds.5km)
str(nmds.5km)
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)])
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=TRUE, distance="euclidean")
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=FALSE, distance="euclidean")
set.seed(100)
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=FALSE, distance="euclidean")
set.seed(100)
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=FALSE, distance="euclidean")
nmds.5km <- metaMDS(presence.nmds[ ,names(v.brick.5km)], autotransform=TRUE, distance="euclidean")
scale(presence.nmds[ ,names(v.brick.5km)])
nmds.5km <- metaMDS(scale(presence.nmds[ ,names(v.brick.5km)]), autotransform=TRUE, distance="euclidean")
presence.data.separated=rbind(presence.data.separated, presence.data.complete[presence.data.complete$site=="OYAM",])
presence.data.separated=rbind(presence.data.separated, presence.data.complete[presence.data.complete$site=="PECH",])
presence.data.separated=rbind(presence.data.separated, presence.data.complete[presence.data.complete$site=="ESSK",])
presence.data.separated=rbind(presence.data.separated, presence.data.complete[presence.data.complete$site=="VELY",])
describe(presence.data.separated[, variable.names])
library(Hmisc)
describe(presence.data.separated[, variable.names])
variable.names <- names(v.brick.5km)
describe(presence.data.separated[, variable.names])
rm(presence.data.complete, minimum.distance, mask.path, v.brick.10km, v.brick.20km, elevation.path, functions.path, presence.nmds, presence.data.separated.temp, presence.data.complete.temp, nmds.5km, presence.xy.variables)
presence.dates=read.table(presence.dates.data.path, header=TRUE, sep=";", fill=TRUE, check.names=TRUE)
#extracting environmental data
presence.dates.environment=extract(v.brick.5km, presence.dates[, c("x", "y")], df=TRUE, method="bilinear")
#putting data together
presence.dates.environment=na.omit(data.frame(presence.dates, presence.dates.environment))
dev.off()
x11()
#boxplots
par(mfrow=c(2,3))
boxplot(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio6"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio6"], notch=TRUE, col=c("gray90", "gray70"), names=c("Absolute", "Relative"), main="Bio6")
boxplot(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio5"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio5"], notch=TRUE, col=c("gray90", "gray70"), names=c("Absolute", "Relative"), main="Bio5")
boxplot(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio12"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio12"], notch=TRUE, col=c("gray90", "gray70"), names=c("Absolute", "Relative"), main="Bio12")
boxplot(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio12"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio12"], notch=TRUE, col=c("gray90", "gray70"), names=c("Absolute", "Relative"), main="Bio18")
boxplot(presence.dates.environment[presence.dates.environment$dating=="absolute", "topo_slope"], presence.dates.environment[presence.dates.environment$dating=="relative", "topo_slope"], notch=TRUE, col=c("gray90", "gray70"), names=c("Absolute", "Relative"), main="Slope")
boxplot(presence.dates.environment[presence.dates.environment$dating=="absolute", "topo_diversity"], presence.dates.environment[presence.dates.environment$dating=="relative", "topo_diversity"], notch=TRUE, col=c("gray90", "gray70"), names=c("Absolute", "Relative"), main="Topographic diversity")
par(mfrow=c(2,3))
lwd.param=2
plot(density(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio6"]), col="gray90", lwd=lwd.param, xlab="Bio6", main="Bio6")
lines(density(presence.dates.environment[presence.dates.environment$dating=="relative", "bio6"]), col="gray70", lwd=lwd.param)
lines(density(presence.dates.environment[, "bio6"]), col="black", lwd=lwd.param)
legend("topleft", c("Absolute dating", "Relative dating", "Joint density"), col=c("gray90", "gray70", "black"), lwd=lwd.param)
plot(density(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio5"]), col="gray90", lwd=lwd.param, xlab="Bio5", main="Bio5", ylim=c(0, 12))
lines(density(presence.dates.environment[presence.dates.environment$dating=="relative", "bio5"]), col="gray70", lwd=lwd.param)
lines(density(presence.dates.environment[, "bio5"]), col="black", lwd=lwd.param)
plot(density(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio12"]), col="gray90", lwd=lwd.param, xlab="Bio12", main="Bio12")
lines(density(presence.dates.environment[presence.dates.environment$dating=="relative", "bio12"]), col="gray70", lwd=lwd.param)
lines(density(presence.dates.environment[, "bio12"]), col="black", lwd=lwd.param)
plot(density(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio18"]), col="gray90", lwd=lwd.param, xlab="Bio18", main="Bio18", ylim=c(0, 0.007))
lines(density(presence.dates.environment[presence.dates.environment$dating=="relative", "bio18"]), col="gray70", lwd=lwd.param)
lines(density(presence.dates.environment[, "bio18"]), col="black", lwd=lwd.param)
plot(density(presence.dates.environment[presence.dates.environment$dating=="absolute", "topo_slope"]), col="gray90", lwd=lwd.param, xlab="Slope", main="Slope", ylim=c(0, 0.3))
lines(density(presence.dates.environment[presence.dates.environment$dating=="relative", "topo_slope"]), col="gray70", lwd=lwd.param)
lines(density(presence.dates.environment[, "topo_slope"]), col="black", lwd=lwd.param)
plot(density(presence.dates.environment[presence.dates.environment$dating=="absolute", "topo_diversity"]), col="gray90", lwd=lwd.param, xlab="Topo. diversity", main="Topo. diversity")
lines(density(presence.dates.environment[presence.dates.environment$dating=="relative", "topo_diversity"]), col="gray70", lwd=lwd.param)
lines(density(presence.dates.environment[, "topo_diversity"]), col="black", lwd=lwd.param)
wilcox.test(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio6"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio6"])
#TESTING DIFFERENCES
wilcox.test(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio6"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio6"])
# W = 295, p-value = 0.9289 IDENTICAL
wilcox.test(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio5"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio5"])
# W = 346, p-value = 0.3661 IDENTICAL
wilcox.test(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio12"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio12"])
# W = 219, p-value = 0.1079 IDENTICAL
wilcox.test(presence.dates.environment[presence.dates.environment$dating=="absolute", "bio18"], presence.dates.environment[presence.dates.environment$dating=="relative", "bio18"])
# W = 237, p-value = 0.2134 IDENTICAL
wilcox.test(presence.dates.environment[presence.dates.environment$dating=="absolute", "topo_slope"], presence.dates.environment[presence.dates.environment$dating=="relative", "topo_slope"])
# W = 342, p-value = 0.4099 IDENTICAL
wilcox.test(presence.dates.environment[presence.dates.environment$dating=="absolute", "topo_diversity"], presence.dates.environment[presence.dates.environment$dating=="relative", "topo_diversity"])
background <- presence.data.separated[ 0, ]
#presence data converted into spatial data
presence.sp <- presence.data.separated[ , c("x", "y")]
coordinates(presence.sp)<-c("x", "y")
#applying eurasian mask
v.brick.5km.eurasia <- mask(v.brick.5km, mask.eurasia)
mask.eurasia
#applying eurasian mask
v.brick.5km.eurasia <- mask(v.brick.5km, mask.eurasia)
#load mask of eurasia, to avoid creating pseudoabsences in Africa
mask.eurasia <- raster(mask.path)
mask.path
mask.path="2_environmental_data/mask_eurasia_5km.asc"
#load mask of eurasia, to avoid creating pseudoabsences in Africa
mask.eurasia <- raster(mask.path)
background <- presence.data.separated[ 0, ]
#presence data converted into spatial data
presence.sp <- presence.data.separated[ , c("x", "y")]
coordinates(presence.sp)<-c("x", "y")
help(mask)
#applying eurasian mask
v.brick.5km.eurasia <- raster::mask(v.brick.5km, mask.eurasia)
#LOOPING THROUG BUFFERS
for (radius in buffers){
#buffer (conversion from km to meters)
buffer.poly=circles(presence.sp, d=radius*1000, lonlat=TRUE)
#dissolves the polygons and get cells within the polygons while unlisting
buffer.cells=unlist(cellFromPolygon(object=v.brick.5km.eurasia, p=gUnaryUnion(buffer.poly@polygons), weights=FALSE))
#measures the number of cells within the buffer
buffer.cells.number=length(buffer.cells)
#samples the cells according the sampling.density given by the user
buffer.cells.selected=sample(x=buffer.cells, size=((sampling.density*length(buffer.cells))/100))
#gets the coordinates of the selected cells
buffer.cells.selected.coordinates=xyFromCell(object=v.brick.5km.eurasia, cell=buffer.cells.selected)
#gets the values of the environmental layers for the coordinates
buffer.cells.selected.coordinates.variables=data.frame(extract(x=v.brick.5km.eurasia, y=buffer.cells.selected.coordinates))
#prepares the temporal table to store the temporal results
rows.number=nrow(buffer.cells.selected.coordinates.variables)
site=rep("background", rows.number)
presence=rep(0, rows.number)
reliability=rep(1, rows.number)
country=rep("na", rows.number)
buffer.radius=rep(radius, rows.number)
#merges the data with the final table
background=rbind(background, na.omit(cbind(site, buffer.cells.selected.coordinates, reliability, country, buffer.cells.selected.coordinates.variables, presence, buffer.radius)))
#plots the selected background
# png(paste("4_background_", radius, "km.png", sep=""), width=ncol(v.brick.5km.eurasia), height=nrow(v.brick.5km.eurasia), pointsize=25)
# plot(v.brick.5km[[1]]>0, main=paste("Background data (radius = ", radius, ")", sep=""), col="gray80", legend=FALSE)
# points(background[background$buffer==radius, "x"], background[background$buffer==radius, "y"], cex=0.1)
# dev.off()
}
#PUTTING THEM TOGETHER
modeling.data<- rbind(presence.data.separated, background)
rm(buffer.poly, buffer.cells.number, buffer.cells.selected, buffer.cells.selected.coordinates, buffer.cells.selected.coordinates.variables, background, rows.number, sampling.density, site, reliability, radius, presence)
par(mfrow=c(2,3))
#BIO5
density.presence <- density(modeling.data[modeling.data$presence==1, "bio5"])
density.background <- density(modeling.data[modeling.data$presence==0, "bio5"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Bio5", ylim=c(0,maxy), lwd=6, col="gray40", ylab="Density", xlab="Cº")
lines(density.presence, col="red", lwd=6)
legend("topleft", title="Legend", legend=c("Presence", "Background"), col=c("black","red"), lwd=6, cex=1)
#BIO6
density.presence <- density(modeling.data[modeling.data$presence==1, "bio6"])
density.background <- density(modeling.data[modeling.data$presence==0, "bio6"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Bio6", ylim=c(0,maxy), lwd=6, col="gray40", xlab="Cº")
lines(density.presence, col="red", lwd=6)
#BIO12
density.presence <- density(modeling.data[modeling.data$presence==1, "bio12"])
density.background <- density(modeling.data[modeling.data$presence==0, "bio12"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Bio12", ylim=c(0,maxy), lwd=6, col="gray40", xlab="mm.")
lines(density.presence, col="red", lwd=6)
#BIO18
density.presence <- density(modeling.data[modeling.data$presence==1, "bio18"])
density.background <- density(modeling.data[modeling.data$presence==0, "bio18"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Bio18", ylim=c(0,maxy), lwd=6, col="gray40", ylab="Density", xlab="mm.")
lines(density.presence, col="red", lwd=6)
#topo_slope
density.presence <- density(modeling.data[modeling.data$presence==1, "topo_slope"])
density.background <- density(modeling.data[modeling.data$presence==0, "topo_slope"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Topographic slope", ylab="", ylim=c(0,maxy), lwd=6, col="gray40", xlab="Degrees.")
lines(density.presence, col="red", lwd=6)
#topo_diversity
density.presence <- density(modeling.data[modeling.data$presence==1, "topo_diversity"])
density.background <- density(modeling.data[modeling.data$presence==0, "topo_diversity"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Topographic diversity", ylab="", ylim=c(0,maxy), lwd=6, col="gray40", xlab="%")
lines(density.presence, col="red", lwd=6)
x11()
par(mfrow=c(2,3))
#BIO5
density.presence <- density(modeling.data[modeling.data$presence==1, "bio5"])
density.background <- density(modeling.data[modeling.data$presence==0, "bio5"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Bio5", ylim=c(0,maxy), lwd=6, col="gray40", ylab="Density", xlab="Cº")
lines(density.presence, col="red", lwd=6)
legend("topleft", title="Legend", legend=c("Presence", "Background"), col=c("black","red"), lwd=6, cex=1)
#BIO6
density.presence <- density(modeling.data[modeling.data$presence==1, "bio6"])
density.background <- density(modeling.data[modeling.data$presence==0, "bio6"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Bio6", ylim=c(0,maxy), lwd=6, col="gray40", xlab="Cº")
lines(density.presence, col="red", lwd=6)
#BIO12
density.presence <- density(modeling.data[modeling.data$presence==1, "bio12"])
density.background <- density(modeling.data[modeling.data$presence==0, "bio12"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Bio12", ylim=c(0,maxy), lwd=6, col="gray40", xlab="mm.")
lines(density.presence, col="red", lwd=6)
#BIO18
density.presence <- density(modeling.data[modeling.data$presence==1, "bio18"])
density.background <- density(modeling.data[modeling.data$presence==0, "bio18"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Bio18", ylim=c(0,maxy), lwd=6, col="gray40", ylab="Density", xlab="mm.")
lines(density.presence, col="red", lwd=6)
#topo_slope
density.presence <- density(modeling.data[modeling.data$presence==1, "topo_slope"])
density.background <- density(modeling.data[modeling.data$presence==0, "topo_slope"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Topographic slope", ylab="", ylim=c(0,maxy), lwd=6, col="gray40", xlab="Degrees.")
lines(density.presence, col="red", lwd=6)
#topo_diversity
density.presence <- density(modeling.data[modeling.data$presence==1, "topo_diversity"])
density.background <- density(modeling.data[modeling.data$presence==0, "topo_diversity"])
maxy <- max(c(density.presence$y, density.background$y))
plot(density.background, main="Topographic diversity", ylab="", ylim=c(0,maxy), lwd=6, col="gray40", xlab="%")
lines(density.presence, col="red", lwd=6)
buffer.poly <- circles(presence.sp, d=2000*1000, lonlat=TRUE)
#dissolves the polygons and get cells within the polygons while unlisting
buffer.cells <- unlist(cellFromPolygon(object=v.brick.5km.eurasia, p=gUnaryUnion(buffer.poly@polygons), weights=FALSE))
#measures the number of cells within the buffer
buffer.cells.number <- length(buffer.cells)
#samples the cells according the sampling.density given by the user
buffer.cells.selected <- sample(x=buffer.cells, size=2000)
#gets the coordinates of the selected cells
pseudo.absences <- xyFromCell(object=v.brick.5km.eurasia, cell=buffer.cells.selected)
#gets the values of the environmental layers for the coordinates
pseudo.absences.variables <- data.frame(extract(x=v.brick.5km.eurasia, y=pseudo.absences))
#merging coordinates with environmental values deleting data without environmental values
pseudo.absences <- na.omit(data.frame(pseudo.absences, pseudo.absences.variables))
#reducing spatial clustering of pseudoabsences
pseudo.absences <- ReduceSpatialClustering(data=pseudo.absences, minimum.distance=xres(v.brick.5km)*40)
#remove pseudo absences 200 km around the presence records
pseudo.absences <- RemovePseudoabsencesAroundPresences(presences=presence.data.separated, pseudoabsences=pseudo.absences, minimum.distance=xres(v.brick.5km)*40)
plot(v.brick.5km[[1]]>0, col="gray80", legend=FALSE, main="Pseudo-absence data to compute relative AUC")
points(pseudo.absences[, c("x", "y")], pch=16, col="black", cex=0.6)
points(presence.data.separated[, c("x", "y")], pch=16, col="red4")
dev.off()
x11()
plot(v.brick.5km[[1]]>0, col="gray80", legend=FALSE, main="Pseudo-absence data to compute relative AUC")
points(pseudo.absences[, c("x", "y")], pch=16, col="black", cex=0.6)
points(presence.data.separated[, c("x", "y")], pch=16, col="red4")
rm(buffer, buffer.dissolve, celdas, mascara, mascara.temp, presencia.sp, radio, valores, pseudo.absence, bp, buffer.radius, variable.name, buffer.cells, buffer.cells.selected, buffer.poly, buffer.cells.number, buffer.cells.selected.coordinates, presence.xy.variables, pseudo.absences.variables, presence.sp)
gc()
base.formula=as.formula(paste("presence ~ poly(", paste(names(v.brick.5km), collapse=", 2) + poly("), ", 2)", collapse=""))
#base model without interactions
base.model=glm(base.formula, family=quasibinomial(link=logit), data=modeling.data, na.action="na.fail", weights=modeling.data$weights)
#list of models
models=dredge(base.model, evaluate=FALSE, m.min=1, m.max=3)
models
#list of models
models=dredge(base.model, evaluate=FALSE, m.min=1, m.max=3)
help(dredge)
#list of models
models=dredge(base.model, evaluate=FALSE, m.lim=c(1, 3))
#checking number of models to evaluate
length(models)
library(stringr)
for(model in 1:length(models)){
models[model] = str_replace_all(string=as.character(models[model]), fixed("glm(formula = "), replacement="")
models[model] = str_replace_all(string=as.character(models[model]), fixed(" + 1"), replacement="")
models[model] = str_replace_all(string=as.character(models[model]), fixed(", family = quasibinomial(link = logit), data = modeling.data, weights = modeling.data$weights, na.action = \"na.fail\")"), replacement="")
}
for (buffer.radius in buffers){
#temp data
modeling.data.temporal <- modeling.data[modeling.data$presence==1 | modeling.data$buffer.radius==buffer.radius, ]
#warning: exclusion.radius=500 km
temp.table <- LeaveOneOut(data=modeling.data.temporal, models=models, pseudoabsences=pseudo.absences, name=paste(buffer.radius), exclusion.radius=2.5)
# write.table(temp.table, file=paste("2_model_evaluation_", buffer.radius, ".csv", sep=""), row.names=FALSE, col.names=TRUE, quote=FALSE, sep=";")
}
temp.table$bio12=NULL
temp.table$bio18=NULL
temp.table$bio6=NULL
temp.table$bio5=NULL
temp.table$topo_slope=NULL
temp.table$topo_diversity=NULL
temp.table$n_variables=NULL
temp.table$name=NULL
temp.table$deviance=NULL
importance.of.variables.mean <- aggregate(temp.table, by=list(temp.table$model), FUN=mean)
importance.of.variables.sd <- aggregate(temp.table, by=list(temp.table$model), FUN=sd)
warnings()
importance.of.variables.mean
importance.of.variables.mean$model <- importance.of.variables.mean$Group.1
importance.of.variables.sd$model <- importance.of.variables.sd$Group.1
importance.of.variables.mean$Group.1 <- NULL
importance.of.variables.sd$Group.1 <- NULL
importance.of.variables.mean$excluded_presence <- NULL
importance.of.variables.sd$excluded_presence <- NULL
importance.of.variables.sd$model <- NULL
names(importance.of.variables.mean) <- c("variable", "D", "HS", "AUC")
names(importance.of.variables.sd) <- c("Dsd", "HSsd", "AUCsd")
#table
importance.of.variables <- data.frame(importance.of.variables.mean,importance.of.variables.sd)
#removing characters we don't need from the "variable" column
importance.of.variables$variables <- str_replace_all(string=importance.of.variables$variable, pattern="presence ~ poly\\(", replacement="")
importance.of.variables$variables <- str_replace_all(string=importance.of.variables$variables, pattern="2\\) \\+ poly\\(", replacement="")
importance.of.variables$variables <- str_replace_all(string=importance.of.variables$variables, pattern=", 2\\)", replacement="")
#removing column we don't need
importance.of.variables$variable <- NULL
importance.of.variables <- data.frame(variables=importance.of.variables$variables, importance.of.variables[, 1:6])
#deleting stuff
rm(importance.of.variables.mean,importance.of.variables.sd)
paste("2_model_evaluation_", buffer.radius, ".csv", sep="")
temp.table
screening.models <- do.call("rbind", lapply(temp.table, read.table, header=TRUE, sep=";", fill=TRUE))
screening.models
screening.models <- temp.table
#aggregate by average
screening.models.aggregated <- aggregate(screening.models, by=list(screening.models$model, screening.models$name), FUN=mean)
temp.table
dim(temp.table)
aggregate(temp.table, by=list(temp.table$model, temp.table$name), FUN=mean)
temp.table$model
temp.table$name
screening.models.aggregated <- aggregate(temp.table, by=list(temp.table$model), FUN=mean)
warnings()
screening.models.aggregated
screening.models.aggregated$model <- screening.models.aggregated$Group.1
screening.models.aggregated$Group.1 <- NULL
screening.models.aggregated$name <- screening.models.aggregated$Group.2
screening.models.aggregated$Group.2 <- NULL
str(screening.models.aggregated)
colnames(screening.models.aggregated)[7] <- "buffer"
screening.models.aggregated <- aggregate(temp.table, by=list(temp.table$model), FUN=mean)
screening.models.aggregated$model <- screening.models.aggregated$Group.1
screening.models.aggregated$Group.1 <- NULL
str(screening.models.aggregated)
View(screening.models.aggregated)
View(temp.table)
modeling.data.temporal <- modeling.data[modeling.data$presence==1 | modeling.data$buffer.radius==buffer.radius, ]
modeling.data.temporal
View(modeling.data.temporal)
buffer.radius
modeling.data.temporal <- modeling.data[modeling.data$presence==1 | modeling.data$buffer.radius==buffer.radius, ]
View(modeling.data.temporal)
buffer.radius
data=modeling.data.temporal
pseudoabsences=pseudo.absences
name=paste(buffer.radius)
exclusion.radius=2.5
#required libraries
require(formula.tools)
require(ggplot2)
#   require(grid)
require(Hmisc)
library(stringr)
#counts total number of iterations to perform
total.iterations=nrow(data[data$presence==1, ])*length(models)
total.iterations
#extract unique elements
modeling.variables=unique(ParsePolynomialFormula(models))
modeling.variables
results=data.frame(model=character(), excluded_presence=numeric(), deviance=numeric(), explained_deviance=numeric(), suitability_presence=numeric(), AUC=numeric(), name=character(), n_variables=numeric(), stringsAsFactors=FALSE)
results
results2=data.frame(matrix(1:length(modeling.variables), 1))
names(results2)=modeling.variables
#joining dataframes
results=cbind(results, results2[0, ])
#identify the indexes of the presence records in the modeling.data.5km table
presence.data.indexes=data[data$presence==1, ]
#counter for the results row
results.row=1
models
selected.model <- 1
#formula
formula=as.formula(models[[selected.model]])
formula
excluded.record <- 1
#table without the excluded record
data.subset=data[-excluded.record, ]
#removing background (and presences!, I think it is better this way) around the excluded record (FIXED TO 100km)
#contenido de la fila (para no tirar de toda la tabla en todas las operaciones)
f<-data.subset[excluded.record, ]
ymax<-f$y + exclusion.radius
ymin<-f$y - exclusion.radius
xmax<-f$x + exclusion.radius
xmin<-f$x - exclusion.radius
exclusion.radius
data.subset=data.subset[!((data.subset$y <= ymax) & (data.subset$y >= ymin) & (data.subset$x <= xmax) & (data.subset$x >= xmin) & (data.subset$y != f$y | data.subset$x != f$x)), ]
data.subset
#weighting the presence and background data
n.presencias=nrow(data.subset[data.subset$presence==1, ])
#¿cuantos puntos de background hay?
n.background=nrow(data.subset[data.subset$presence==0, ])
data.subset$weight.values=c(rep(1/n.presencias, n.presencias), rep(1/n.background, n.background))
data.subset
glm.temp=glm(formula, family=quasibinomial(link=logit), data=data.subset, weights=weight.values)
summary(glm.temp)
d2=(glm.temp$null.deviance - glm.temp$deviance) / glm.temp$null.deviance
n=length(glm.temp$fitted.values)
p=length(glm.temp$coefficients)
explained.deviance=1-((n-1)/(n-p))*(1-d2)
predict(glm.temp, newdata=data[excluded.record, ], type="response")
data[excluded.record, ]
suitability.excluded.presence=predict(glm.temp, newdata=data[excluded.record, ], type="response")
suitability.pseudoabsences=predict(glm.temp, newdata=pseudoabsences, type="response")
suitability.pseudoabsences
library(plotmo)
plotmo(glm.temp)
data.subset
formula
summary(glm.temp)
explained.deviance
predict(glm.temp, newdata=data[excluded.record, ], type="response")
glm(formula, family=quasibinomial(link=logit), data=data.subset, weights=weight.values)
summary(glm.temp)
plot(data.subset$presence, data.subset$bio12)
x11()
plot(data.subset$presence, data.subset$bio12)
plot(density(data.subset$presence))
plot(density(data.subset[data.subset$presence==1]))
plot(density(data.subset[data.subset$presence==1, ]))
data.subset$presence
plot(density(data.subset[data.subset$presence==1, "bio12"]))
lines(density(data.subset[data.subset$presence==0, "bio12"]))
formula
glm.temp = glm(formula, family=quasibinomial(link=logit), data=data.subset, weights=weight.values)
plotmo(glm.temp)
install.packages("jtools")
library(jtools)
formula
formula <- as.formula("presence ~ bio12")
glm.temp = glm(formula, family=quasibinomial(link=logit), data=data.subset, weights=weight.values)
summary(glm.temp)
effect_plot(glm.temp, pred = bio12)
data.subset$weight.values
effect_plot(glm.temp, pred = bio12, rug = TRUE)
sum(data.subset$weight.values)
effect_plot(glm.temp, pred = bio12, plot.points = TRUE)
formula <- as.formula("presence ~ bio6")
glm.temp = glm(formula, family=quasibinomial(link=logit), data=data.subset, weights=weight.values)
effect_plot(glm.temp, pred = bio6, plot.points = TRUE)
plot(density(data.subset[data.subset$presence==1, "bio6"]))
x11()
plot(density(data.subset[data.subset$presence==1, "bio6"]))
lines(density(data.subset[data.subset$presence==0, "bio6"]))
d2=(glm.temp$null.deviance - glm.temp$deviance) / glm.temp$null.deviance
n=length(glm.temp$fitted.values)
p=length(glm.temp$coefficients)
explained.deviance=1-((n-1)/(n-p))*(1-d2)
explained.deviance
suitability.excluded.presence=predict(glm.temp, newdata=data[excluded.record, ], type="response")
#predicts the suitability of the pseudo-absences
suitability.pseudoabsences=predict(glm.temp, newdata=pseudoabsences, type="response")
suitability.excluded.presence
suitability.pseudoabsences
str(data)
str(data.subset)
data.subset
help(glm)
