tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
)
tsl_plot(tsl)
zoo_sweden <- tsl$Sweden
zoo_spain <- tsl$Spain
zoo_germany <- tsl$Germany
class(zoo_sweden)
zoo::coredata(zoo_sweden)
class(zoo::coredata(zoo_sweden))
zoo::index(zoo_sweden)
model_sweden <- stats::lm(
formula = zoo_sweden ~ stats::time(zoo_sweden)
)
model_sweden
install.packages("distantia")
library(distantia, quietly = TRUE)
library(zoo)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
)
tsl_plot(tsl)
zoo_sweden <- tsl$Sweden
zoo_spain <- tsl$Spain
zoo_germany <- tsl$Germany
class(zoo_sweden)
zoo::coredata(zoo_sweden)
class(zoo::coredata(zoo_sweden))
zoo::index(zoo_sweden)
file.create("mini_dtw.R")
model_sweden <- stats::lm(
formula = zoo_sweden ~ stats::time(zoo_sweden)
)
model_sweden
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(
y,
plot.type = "single",
col = distantia::color_discrete(n = 3)
)
library(distantia, quietly = TRUE)
library(zoo)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
) |>
tsl_colnames_clean(
length = 4
)
tsl_plot(tsl)
library(distantia, quietly = TRUE)
library(zoo)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
) |>
tsl_colnames_clean(
length = 6
)
tsl_plot(tsl)
help(tsl_colnames_set)
library(distantia)
install.packages("distantia")
help(tsl_colnames_set)
library(distantia)
help(tsl_colnames_set)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
)
tsl_colnames_get(tsl)
library(distantia, quietly = TRUE)
library(zoo)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
time = c("2010-01-01", "2011-01-01")
) |>
tsl_colnames_set(
names = c("evi", "rain", "temp")
)
tsl_plot(tsl)
zoo_sweden <- tsl$Sweden
zoo_spain <- tsl$Spain
zoo_germany <- tsl$Germany
class(zoo_sweden)
zoo::coredata(zoo_sweden)
class(zoo::coredata(zoo_sweden))
zoo::index(zoo_sweden)
file.create("mini_dtw.R")
model_sweden <- stats::lm(
formula = zoo_sweden ~ stats::time(zoo_sweden)
)
model_sweden
model_sweden
class(model_sweden)
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(
y,
plot.type = "single",
col = distantia::color_discrete(n = 3)
)
zoo_sweden_detrended <- stats::residuals(model_sweden)
zoo_sweden_detrended
plot(zoo_sweden_detrended)
#' Linear Detrending
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_detrend <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y
}
source("mini_dtw.R")
y <- ts_detrend(x = zoo_spain)
plot(y)
source("mini_dtw.R")
zoo_spain_detrended <- ts_detrend(x = zoo_spain)
plot(zoo_spain_detrended)
scale(x = zoo_spain)
#' Linear Detrending and Normalization
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_preprocessing <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y.scaled <- scale(x = y)
y.scaled
}
source("mini_dtw.R")
zoo_spain_ready <- ts_preprocessing(x = zoo_spain)
plot(zoo_spain_ready)
help(dist)
zoo_sweden[1, ]
x <- zoo_sweden[1, ]
y <- zoo_spain[1, ]
x <- zoo_sweden[1, ]
y <- zoo_spain[1, ]
sqrt(sum((x-y)^2))
zoo_spain[1, ]
zoo_sweden[1, ]
source("mini_dtw.R")
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[1, ]
)
x <- zoo_spain,
x <- zoo_spain
y <- zoo_germany
m <- matrix(data = NA, nrow = nrow(y), ncol = ncol(x))
seq_len(y)
seq_len(7)
x <- ncol(zoo_spain)
y <- nrow(zoo_germany)
m <- matrix(
data = NA,
nrow = y,
ncol = x
)
for(col.i in seq_len(x)){
for(row.i in seq_len(y)){
m[row.i, col.i] <- d_euclidean(
x = zoo_spain[col.i, ],
y = zoo_germany[row.i, ]
)
}
}
m
seq_len(y)
seq_len(x)
x <- ncol(zoo_spain)
y <- nrow(zoo_germany)
m <- matrix(
data = NA,
nrow = y,
ncol = x
)
col.i in seq_len(x)
seq_len(x)
x <- nrow(zoo_spain)
y <- nrow(zoo_germany)
m <- matrix(
data = NA,
nrow = y,
ncol = x
)
for(col.i in seq_len(x)){
for(row.i in seq_len(y)){
m[row.i, col.i] <- d_euclidean(
x = zoo_spain[col.i, ],
y = zoo_germany[row.i, ]
)
}
}
m
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
for(col.i in 1:nrow(zoo_germany)){
for(row.i in 1:nrow(zoo_spain)){
m[row.i, col.i] <- d_euclidean(
x = zoo_spain[col.i, ],
y = zoo_germany[row.i, ]
)
}
}
m
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
for(col.i in 1:nrow(zoo_spain)){
for(row.i in 1:nrow(zoo_germany)){
m[row.i, col.i] <- d_euclidean(
x = zoo_spain[col.i, ],
y = zoo_germany[row.i, ]
)
}
}
m
# Initialize the distance matrix
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (col.i in 1:nrow(zoo_spain)) {
for (row.i in 1:nrow(zoo_germany)) {
m[row.i, col.i] <- d_euclidean(
x = zoo_spain[col.i, ],
y =zoo_germany[row.i, ]
)
}
}
m
# Initialize the distance matrix
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (i in 1:nrow(zoo_spain)) {
for (j in 1:nrow(zoo_germany)) {
m[j, i] <- m[j, i] <- d_euclidean(
x = zoo_spain[i, ],
y =zoo_germany[j, ]
)
}
}
m
i <- 1
j <- 1
zoo_spain[i, ]
zoo_germany[j, ]
d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
i <- 1
j <- 2
zoo_spain[i, ]
zoo_germany[j, ]
d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
x = zoo_spain[i, ]
y = zoo_germany[j, ]
sqrt(sum((x-y)^2))
x-y
sqrt(sum((as.numeric(x)-as.numeric(y))^2))
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
sqrt(sum((x-y)^2))
}
# Initialize the distance matrix
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (i in 1:nrow(zoo_spain)) {
for (j in 1:nrow(zoo_germany)) {
m[j, i] <- m[j, i] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
m
# Initialize the distance matrix
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (i in 1:nrow(zoo_spain)) {
for (j in 1:nrow(zoo_germany)) {
m[j, i] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
m
zoo_germany[1, ]
zoo::coredata(zoo_germany)[2, ]
zoo::coredata(zoo_germany)[3, ]
source("mini_dtw.R")
d_euclidean(
x = zoo::coredata(zoo_germany)[1, ],
y = zoo::coredata(zoo_spain)[2, ]
)
source("mini_dtw.R")
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
source("mini_dtw.R")
d_euclidean(
x = zoo::coredata(zoo_germany)[1, ],
y = zoo::coredata(zoo_spain)[2, ]
)
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
# Initialize the distance matrix
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (i in 1:nrow(zoo_spain)) {
for (j in 1:nrow(zoo_germany)) {
m[j, i] <- d_euclidean(
x = zoo::coredata(zoo_spain)[i, ],
y = zoo::coredata(zoo_germany)[j, ]
)
}
}
m
image(m)
image(m)
z1 <- zoo::coredata(zoo_spain)
z2 <- zoo::coredata(zoo_germany)
dist_matrix_between <- outer(
1:nrow(z1), 1:nrow(z2),
Vectorize(function(i, j) d_euclidean(z1[i, ], z2[j, ]))
)
z1 <- zoo::coredata(zoo_spain)
z2 <- zoo::coredata(zoo_germany)
m <- outer(
1:nrow(z1), 1:nrow(z2),
Vectorize(function(i, j) d_euclidean(z1[i, ], z2[j, ]))
)
m
# Initialize the distance matrix
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (i in 1:nrow(zoo_spain)) {
for (j in 1:nrow(zoo_germany)) {
m[j, i] <- d_euclidean(
x = zoo::coredata(zoo_spain)[i, ],
y = zoo::coredata(zoo_germany)[j, ]
)
}
}
m
z1 <- zoo::coredata(zoo_germany)
z2 <- zoo::coredata(zoo_spain)
m_ <- outer(
1:nrow(z1), 1:nrow(z2),
Vectorize(function(i, j) d_euclidean(z1[i, ], z2[j, ]))
)
m_
# Initialize the distance matrix
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (i in 1:nrow(zoo_spain)) {
for (j in 1:nrow(zoo_germany)) {
m[j, i] <- d_euclidean(
x = zoo::coredata(zoo_spain)[i, ],
y = zoo::coredata(zoo_germany)[j, ]
)
}
}
m
m_
zoo_spain[2, ]
zoo_germany[1, ]
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
d_euclidean(
x = as.numeric(zoo_germany[1, ]),
y = as.numeric(zoo_spain[2, ])
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
sqrt(sum((x-y)^2))
}
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
d_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
sqrt(sum((x-y)^2))
}
d_euclidean(
x = zoo_germany[1, ],
y = zoo_spain[2, ]
)
# Initialize the distance matrix
m <- matrix(
data = NA,
nrow = nrow(zoo_germany),
ncol = nrow(zoo_spain)
)
# Fill the distance matrix
for (i in 1:nrow(zoo_spain)) {
for (j in 1:nrow(zoo_germany)) {
m[j, i] <- d_euclidean(
x = zoo_spain[i, ],
y = zoo_germany[j, ]
)
}
}
help(outer)
m_ <- outer(
X = 1:nrow(zoo_germany),
Y = 1:nrow(zoo_spain),
FUN = Vectorize(function(i, j) d_euclidean(zoo_germany[i, ], zoo_spain[j, ]))
)
m_
m_ <- outer(
X = 1:nrow(zoo_germany),
Y = 1:nrow(zoo_spain),
FUN = Vectorize(
function(i, j){
d_euclidean(
x = zoo_germany[i, ],
y = zoo_spain[j, ])
}
)
)
m_
m
library(fields)
help(rdist)
blogdown:::preview_site()
head(m)
