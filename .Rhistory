xy_dtw <- dtw::dtw(
x = ts_preprocessing(x = zoo_spain),
y = ts_preprocessing(x = zoo_sweden),
keep = TRUE
)
xy_dtw$normalizedDistance
xy_dtw$costMatrix
m_cost
a = zoo_spain
b = zoo_spain
#linear detrending and z-score normalization
a_ <- ts_preprocessing(x = a)
b_ <- ts_preprocessing(x = b)
#distance matrix
m_dist <- distance_matrix(
a = a_,
b = b_
)
#cost matrix
m_cost <- cost_matrix(
distance_matrix = m_dist
)
library(dtw)
xy_dtw <- dtw::dtw(
x = ts_preprocessing(x = zoo_spain),
y = ts_preprocessing(x = zoo_spain),
keep = TRUE
)
xy_dtw$normalizedDistance
xy_dtw$costMatrix
image(xy_dtw$costMatrix)
image(xy_dtw$costMatrix)
image(m_cost)
xy_dtw$stepPattern
help(dtw)
library(dtw)
xy_dtw <- dtw::dtw(
x = ts_preprocessing(x = zoo_spain),
y = ts_preprocessing(x = zoo_spain),
step.pattern = "asymmetric",
keep = TRUE
)
dynamic_time_warping(
a = zoo_spain,
b = zoo_spain
)
dynamic_time_warping(
a = zoo_spain,
b = zoo_sweden
)
a = zoo_spain
b = zoo_sweden
a_ <- ts_preprocessing(x = a)
b_ <- ts_preprocessing(x = b)
a_
b_
m_dist <- distance_matrix(
a = a_,
b = b_
)
image(m_dist)
m_cost <- cost_matrix(
distance_matrix = m_dist
)
image(m_cost)
cost_path <- least_cost_path(
cost_matrix = m_cost
)
score <- similarity_score(
cost_path = cost_path,
cost_matrix = m_cost
)
score
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "a",
ylab = "b",
main = paste0("Similarity score = ", round(score, 3))
)
graphics::lines(
x = cost_path$row,
y = cost_path$col,
lwd = 2
)
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "a",
ylab = "b",
main = paste0("Similarity score = ", round(score, 3))
)
graphics::lines(
x = cost_path$row,
y = cost_path$col,
lwd = 2
)    graphics::image(
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "a",
ylab = "b",
main = paste0("Similarity score = ", round(score, 3))
)
graphics::lines(
x = cost_path$row,
y = cost_path$col,
lwd = 2
)
dynamic_time_warping(
a = zoo_spain,
b = zoo_spain
)
dynamic_time_warping(
a = zoo_spain,
b = zoo_spain
)
dynamic_time_warping(
a = zoo_spain,
b = zoo_sweden
)
library(distantia, quietly = TRUE)
library(zoo, quietly = TRUE)
tsl <- tsl_initialize(
x = fagus_dynamics,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
names = c("Spain", "Sweden"),
time = c("2010-01-01", "2011-01-01")
) |>
tsl_colnames_set(
names = c("evi", "rain", "temp")
)
zoo_sweden <- tsl$Sweden
zoo_spain <- tsl$Spain
rm(tsl)
graphics::layout(matrix(1:2, ncol = 2))
plot(
x = zoo_sweden,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
plot(
x = zoo_spain,
col = "red4",
mar = c(0.5, 5, 0, 5)
)
zoo::coredata(zoo_sweden)
zoo::index(zoo_sweden)
model_sweden <- stats::lm(
formula = zoo_sweden ~ stats::time(zoo_sweden)
)
model_sweden
stats::residuals(model_sweden)
plot(
x = stats::residuals(model_sweden),
col = "red4",
mar = c(0.5, 5, 0, 5),
main = "Detrended zoo_sweden"
)
#' Linear Detrending
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_preprocessing <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
y
}
ts_preprocessing(x = zoo_spain)
plot(
x = ts_preprocessing(x = zoo_spain),
col = "red4",
mar = c(0.5, 5, 0, 5),
main = "Detrended zoo_spain"
)
x <- zoo::zoo(0:10)
plot(
x = x,
col = "red4",
mar = c(0.5, 1, 0, 1)
)
x_detrended <- ts_preprocessing(x = x)
plot(
x = x_detrended,
col = "red4",
ylim = range(x),
mar = c(0.5, 5, 0, 5)
)
#cleanup
rm(model_sweden, x, x_detrended)
scale(
x = zoo_spain,
center = TRUE,
scale = TRUE
)
#' Linear Detrending and Normalization
#' @param x (required, zoo object) time series to detrend.
#' @return zoo object
ts_preprocessing <- function(x){
m <- stats::lm(formula = x ~ stats::time(x))
y <- stats::residuals(object = m)
z <- scale(y)
z
}
ts_preprocessing(x = zoo_spain)
plot(
x = ts_preprocessing(x = zoo_spain),
col = "red4",
mar = c(0.5, 5, 0, 5)
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
distance_euclidean <- function(x, y){
sqrt(sum((x - y)^2))
}
zoo_sweden[1, ]
zoo_spain[2, ]
distance_euclidean(
x = zoo_sweden[1, ],
y = zoo_spain[2, ]
)
distance_euclidean(
x = as.numeric(zoo_sweden[1, ]),
y = as.numeric(zoo_spain[2, ])
)
#' Euclidean Distance
#' @param x (required, numeric) row of a zoo object.
#' @param y (required, numeric) row of a zoo object.
#' @return numeric
distance_euclidean <- function(x, y){
x <- as.numeric(x)
y <- as.numeric(y)
z <- sqrt(sum((x - y)^2))
z
}
distance_euclidean(
x = zoo_sweden[1, ],
y = zoo_spain[2, ]
)
#empty distance matrix
m_dist <- matrix(
data = NA,
nrow = nrow(zoo_spain),
ncol = nrow(zoo_sweden)
)
#iterate over rows
for(row in 1:nrow(zoo_spain)){
#iterate over columns
for(col in 1:nrow(zoo_sweden)){
#distance between time series rows
m_dist[row, col] <- distance_euclidean(
x = zoo_spain[row, ],
y = zoo_sweden[col, ]
)
}
}
m_dist[1:5, 1:5]
graphics::image(
x = seq_len(ncol(m_dist)),
y = seq_len(nrow(m_dist)),
z = m_dist,
xlab = "zoo_spain",
ylab = "zoo_sweden",
main = "Euclidean Distance"
)
#' Distance Matrix Between Time Series
#' @param a (required, zoo object) time series.
#' @param b (required, zoo object) time series with same columns as `x`
#' @return matrix
distance_matrix <- function(a, b){
m <- matrix(
data = NA,
nrow = nrow(b),
ncol = nrow(a)
)
for(row in 1:nrow(b)){
for(col in 1:nrow(a)){
m[row, col] <- distance_euclidean(
x = a[row, ],
y = b[col, ]
)
}
}
m
}
m_dist <- distance_matrix(
a = zoo_spain,
b = zoo_sweden
)
m_dist[1:5, 1:5]
#cleanup
rm(col, row)
m_cost <- matrix(
data = NA,
nrow = nrow(m_dist),
ncol = ncol(m_dist)
)
m_cost[1, ] <- cumsum(m_dist[1, ])
m_cost[, 1] <- cumsum(m_dist[, 1])
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "zoo_spain",
ylab = "zoo_sweden",
main = "Cost Matrix (work in progress)"
)
m_cost[1:2, 1:2]
m_cost[2, 2] <- min(
m_cost[1, 2],
m_cost[2, 1]
) + m_dist[2, 2]
m_cost[1:2, 1:2]
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "zoo_spain",
ylab = "zoo_sweden",
main = "Cost Matrix (work in progress)"
)
#iterate over rows of the cost matrix
for(row in 2:nrow(m_dist)){
#iterate over columns of the cost matrix
for(col in 2:ncol(m_dist)){
#get cost of neighbor with minimum accumulated cost
min_cost <- min(
m_cost[row - 1, col],
m_cost[row, col - 1]
)
#add it to the distance of the target cell
new_value <- min_cost + m_dist[row, col]
#fill the empty cell with the new value
m_cost[row, col] <- new_value
}
}
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "zoo_spain",
ylab = "zoo_sweden",
main = "Cost Matrix"
)
m <- nrow(m_cost)
n <- ncol(m_cost)
m_cost[(m-1):m, (n-1):n]
m_cost[m, n] <- m_cost[m, n] + m_cost[1, 1]
m_cost[(m-1):m, (n-1):n]
#' Cost Matrix from Distance Matrix
#' @param distance_matrix (required, matrix) distance matrix.
#' @return matrix
cost_matrix <- function(distance_matrix){
m <- matrix(
data = NA,
nrow = nrow(distance_matrix),
ncol = ncol(distance_matrix)
)
m[1, ] <- cumsum(distance_matrix[1, ])
m[, 1] <- cumsum(distance_matrix[, 1])
for(row in 2:nrow(distance_matrix)){
for(col in 2:ncol(distance_matrix)){
m[row, col] <- min(
m[row - 1, col],
m[row, col - 1]
) + distance_matrix[row, col]
}
}
m[row, col] <- m[row, col] + m[1, 1]
m
}
m_cost <- cost_matrix(distance_matrix = m_dist)
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "zoo_spain",
ylab = "zoo_sweden",
main = "Cost Matrix"
)
#cleanup
rm(col, row, m, min_cost, n, new_value, row)
path <- data.frame(
row = ncol(m_cost),
col = nrow(m_cost)
)
path
steps <- list(
left = c(path$row, max(path$col - 1, 1)),
up = c(max(path$row - 1, 1), path$col)
)
steps
costs <- list(
left = m_cost[steps$left[1], steps$left[2]],
up = m_cost[steps$up[1], steps$up[2]]
)
costs
steps[[which.min(costs)[1]]]
#' Identify Next Step of Least-Cost Path
#' @param cost_matrix (required, matrix) cost matrix.
#' @param last_step (required, data frame) one row data frame with columns "row" and "col" representing the last step of a least-cost path.
#' @return one row data frame, new step in least-cost path
least_cost_step <- function(cost_matrix, last_step){
steps <- list(
left = c(last_step$row, max(last_step$col - 1, 1)),
up = c(max(last_step$row - 1, 1), last_step$col)
)
costs <- list(
left = cost_matrix[steps$left[1], steps$left[2]],
up = cost_matrix[steps$up[1], steps$up[2]]
)
coords <- steps[[which.min(costs)[1]]]
#rewrite input with new values
new_step <- last_step
new_step[,] <- c(coords[1], coords[2])
new_step
}
least_cost_step(
cost_matrix = m_cost,
last_step = path
)
repeat{
#find next step
new.step <- least_cost_step(
cost_matrix = m_cost,
last_step = tail(path, n = 1)
)
#join the new step with path
path <- rbind(
path, new.step,
make.row.names = FALSE
)
#stop when coordinates are 1, 1
if(all(tail(path, n = 1) == 1)){break}
}
path
graphics::image(
x = seq_len(ncol(m_cost)),
y = seq_len(nrow(m_cost)),
z = m_cost,
xlab = "zoo_spain",
ylab = "zoo_sweden",
main = "Cost Matrix and Least-Cost Path"
)
graphics::lines(
x = path$row,
y = path$col,
lwd = 2
)
#' Least-Cost Path from Cost Matrix
#' @param cost_matrix (required, matrix) cost matrix.
#' @return data frame with least-cost path coordinates
least_cost_path <- function(cost_matrix){
#first step of the least cost path
path <- data.frame(
row = ncol(cost_matrix),
col = nrow(cost_matrix)
)
#iterate until path is completed
repeat{
#merge path with result of least_cost_step()
path <- rbind(
path,
#find next step
least_cost_step(
cost_matrix = cost_matrix,
last_step = tail(path, n = 1)
),
make.row.names = FALSE
)
#stop when coordinates are 1, 1
if(all(tail(path, n = 1) == 1)){break}
}
path
}
least_cost_path(cost_matrix = m_cost)
distance <- m_cost[nrow(m_cost), ncol(m_cost)] - m_cost[1, 1]
distance
normalizer <- auto_sum_cpp(
x = zoo::coredata(zoo_spain),
y = zoo::coredata(zoo_sweden)
)
normalizer <- psi_auto_sum(
x = zoo::coredata(zoo_spain),
y = zoo::coredata(zoo_sweden)
)
normalizer
distance/normalizer
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
getOption("blogdown.method")
blogdown:::preview_site()
blogdown::check_content()
file.remove(c(
"content/post/01_home_cluster/index.html"
))
blogdown::clean_duplicates(preview = FALSE)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("xgboost")
install.packages("xgboost")
blogdown::build_site()
