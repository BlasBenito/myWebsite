tsl_plot(
tsl,
ylim = "absolute",
xlim = c("2022-01-01", "2025-01-01"),
guide = FALSE
)
m.dist <- distantia::psi_distance_matrix(
x = tsl$a,
y = tsl$c,
distance = "euclidean"
)
distantia::utils_matrix_plot(
m = m.dist,
diagonal_width = 0
)
knitr::opts_chunk$set(
eval = TRUE,
collapse = TRUE,
comment = "#>",
dpi = 150,
fig.show = 'hold',
fig.width = 5
)
options(scipen = 9999)
options(conflicts.policy = list(warn = FALSE))
library(distantia, quietly = TRUE)
suppressPackageStartupMessages(library(dtw, quietly = TRUE))
suppressPackageStartupMessages(library(dplyr, quietly = TRUE))
#create two regular synchronous time series and one irregular
a <- zoo_simulate(
name = "a",
cols = 1,
rows = 30,
seasons = 2,
time_range = c("2023-01-01", "2025-01-01"),
seed = 3
)
colnames(a) <- "x"
b <- zoo_permute(
x = a,
block_size = 3,
seed = 2
)[[1]]
b <- zoo_smooth_window(
x = b
)
b <- zoo_name_set(x = b, name = "b")
c <- zoo_simulate(
name = "c",
cols = 1,
rows = 20,
seasons = 2,
irregular = TRUE,
time_range = c("2022-01-01", "2023-01-01"),
seed = 3
)
colnames(c) <- "x"
tsl <- tsl_init(
x = list(
a = a,
b = b,
c = c
)
) |>
tsl_transform(
f = f_rescale_local
)
tsl_plot(
tsl,
ylim = "absolute",
xlim = c("2022-01-01", "2025-01-01"),
guide = FALSE
)
a <- as.vector(tsl$a$x)
c <- as.vector(tsl$c$x)
xy_dtw <- dtw::dtw(
x = a,
y = c,
keep = TRUE
)
dtw::dtwPlotTwoWay(d = xy_dtw, offset = 2, xlab = "", ylab = "", main = "", lwd = 1.5, lty = 1, col = c("red4", "black"))
par(mar = c(0, 0, 0, 0), xpd = TRUE)
legend("bottom",inset = c(0, -0.5), c("a","c"), lwd = 1.5, ncol = 2, bty = "n", col = c("red4", "black"))
dtw::dtwPlotTwoWay(
d = xy_dtw,
offset = 2,
xlab = "",
ylab = "",
main = "",
lwd = 1.5,
lty = 1,
col = c("red4", "black")
)
points(x = 0.295, y = 0.74, cex = 3, col = "blue4")
points(x = 0.43, y = 0.16, cex = 6, col = "blue4")
par(mar = c(0, 0, 0, 0), xpd = TRUE)
legend(
"bottom",
inset = c(0, -0.5),
c("a","c"),
lwd = 1.5,
ncol = 2,
bty = "n",
col = c("red4", "black")
)
tsl <- tsl |>
tsl_transform(
f = f_scale_local
) |>
tsl_subset(
names = c("a", "c")
)
tsl_plot(
tsl,
ylim = "absolute",
xlim = c("2022-01-01", "2025-01-01"),
guide = FALSE
)
m.dist <- distantia::psi_distance_matrix(
x = tsl$a,
y = tsl$c,
distance = "euclidean"
)
distantia::utils_matrix_plot(
m = m.dist,
diagonal_width = 0
)
m.cost <- distantia::psi_cost_matrix(
dist_matrix = m.dist,
diagonal = TRUE
)
distantia::utils_matrix_plot(
m = m.cost,
diagonal_width = 0,
text_cex = 0.9
)
m.cost.path <- distantia::psi_cost_path(
dist_matrix = m.dist,
cost_matrix = m.cost,
diagonal = TRUE
)
distantia::utils_matrix_plot(
m = m.cost,
path = m.cost.path,
text_cex = 0.9
)
blogdown:::preview_site()
knitr::opts_chunk$set(
eval = TRUE,
collapse = TRUE,
comment = "#>",
dpi = 150,
fig.show = 'hold',
fig.width = 5
)
options(scipen = 9999)
options(conflicts.policy = list(warn = FALSE))
library(distantia, quietly = TRUE)
suppressPackageStartupMessages(library(dtw, quietly = TRUE))
suppressPackageStartupMessages(library(dplyr, quietly = TRUE))
#create two regular synchronous time series and one irregular
a <- zoo_simulate(
name = "a",
cols = 1,
rows = 30,
seasons = 2,
time_range = c("2023-01-01", "2025-01-01"),
seed = 3
)
colnames(a) <- "x"
b <- zoo_permute(
x = a,
block_size = 3,
seed = 2
)[[1]]
b <- zoo_smooth_window(
x = b
)
b <- zoo_name_set(x = b, name = "b")
c <- zoo_simulate(
name = "c",
cols = 1,
rows = 20,
seasons = 2,
irregular = TRUE,
time_range = c("2022-01-01", "2023-01-01"),
seed = 3
)
colnames(c) <- "x"
tsl <- tsl_init(
x = list(
a = a,
b = b,
c = c
)
) |>
tsl_transform(
f = f_rescale_local
)
tsl_plot(
tsl,
ylim = "absolute",
xlim = c("2022-01-01", "2025-01-01"),
guide = FALSE
)
a <- as.vector(tsl$a$x)
c <- as.vector(tsl$c$x)
xy_dtw <- dtw::dtw(
x = a,
y = c,
keep = TRUE
)
dtw::dtwPlotTwoWay(d = xy_dtw, offset = 2, xlab = "", ylab = "", main = "", lwd = 1.5, lty = 1, col = c("red4", "black"))
par(mar = c(0, 0, 0, 0), xpd = TRUE)
legend("bottom",inset = c(0, -0.5), c("a","c"), lwd = 1.5, ncol = 2, bty = "n", col = c("red4", "black"))
dtw::dtwPlotTwoWay(
d = xy_dtw,
offset = 2,
xlab = "",
ylab = "",
main = "",
lwd = 1.5,
lty = 1,
col = c("red4", "black")
)
points(x = 0.295, y = 0.74, cex = 3, col = "blue4")
points(x = 0.43, y = 0.16, cex = 6, col = "blue4")
par(mar = c(0, 0, 0, 0), xpd = TRUE)
legend(
"bottom",
inset = c(0, -0.5),
c("a","c"),
lwd = 1.5,
ncol = 2,
bty = "n",
col = c("red4", "black")
)
tsl <- tsl |>
tsl_transform(
f = f_scale_local
) |>
tsl_subset(
names = c("a", "c")
)
tsl_plot(
tsl,
ylim = "absolute",
xlim = c("2022-01-01", "2025-01-01"),
guide = FALSE
)
m.dist <- distantia::psi_distance_matrix(
x = tsl$a,
y = tsl$c,
distance = "euclidean"
)
distantia::utils_matrix_plot(
m = m.dist,
diagonal_width = 0
)
m.cost <- distantia::psi_cost_matrix(
dist_matrix = m.dist,
diagonal = TRUE
)
distantia::utils_matrix_plot(
m = m.cost,
diagonal_width = 0,
text_cex = 0.9
)
m.cost.path <- distantia::psi_cost_path(
dist_matrix = m.dist,
cost_matrix = m.cost,
diagonal = TRUE
)
distantia::utils_matrix_plot(
m = m.cost,
path = m.cost.path,
text_cex = 0.9
)
cost.sum <- distantia::psi_cost_path_sum(
path = m.cost.path
)
tsl <- tsl_initialize(
x = cities_temperature,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
names = c("London", "Kinshasa")
)
distantia_dtw_plot(tsl = tsl)
tsl <- tsl_initialize(
x = cities_temperature,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
names = c("London", "Kinshasa"),
time = c("2000-01-01", "2010-01-01")
)
distantia_dtw_plot(tsl = tsl)
tsl <- tsl_initialize(
x = cities_temperature,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
names = c("London", "Kinshasa"),
time = c("2000-01-01", "2010-01-01")
)
distantia_dtw_plot(tsl = tsl)
blogdown:::preview_site()
tsl <- tsl_initialize(
x = cities_temperature,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
names = c("London", "Kinshasa"),
time = c("2000-01-01", "2010-01-01")
)
distantia_dtw_plot(tsl = tsl, text_cex = 0.9)
tsl <- tsl |>
tsl_transform(
f = f_detrend_poly,
degree = 10
) |>
tsl_smooth() |>
tsl_transform(
f = f_scale_local
)
distantia_dtw_plot(tsl = tsl, text_cex = 0.9)
tsl <- tsl_initialize(
x = cities_temperature,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
names = c("London", "Kinshasa"),
time = c("2000-01-01", "2010-01-01")
)
distantia_dtw_plot(tsl = tsl, text_cex = 0.9)
tsl_scaled <- tsl |>
tsl_transform(
f = f_detrend_poly,
degree = 10
) |>
tsl_smooth() |>
tsl_transform(
f = f_scale_local
)
distantia_dtw_plot(tsl = tsl_scaled, text_cex = 0.9)
distantia_dtw_plot(tsl = tsl, text_cex = 0.9, bandwidth = 0.1)
distantia_dtw_plot(tsl = tsl, text_cex = 0.9, bandwidth = 0.1)
knitr::opts_chunk$set(
eval = TRUE,
collapse = TRUE,
comment = "#>",
dpi = 150,
fig.show = 'hold',
fig.width = 5
)
options(scipen = 9999)
options(conflicts.policy = list(warn = FALSE))
library(distantia, quietly = TRUE)
suppressPackageStartupMessages(library(dtw, quietly = TRUE))
suppressPackageStartupMessages(library(dplyr, quietly = TRUE))
#create two regular synchronous time series and one irregular
a <- zoo_simulate(
name = "a",
cols = 1,
rows = 30,
seasons = 2,
time_range = c("2023-01-01", "2025-01-01"),
seed = 3
)
colnames(a) <- "x"
b <- zoo_permute(
x = a,
block_size = 3,
seed = 2
)[[1]]
b <- zoo_smooth_window(
x = b
)
b <- zoo_name_set(x = b, name = "b")
c <- zoo_simulate(
name = "c",
cols = 1,
rows = 20,
seasons = 2,
irregular = TRUE,
time_range = c("2022-01-01", "2023-01-01"),
seed = 3
)
colnames(c) <- "x"
tsl <- tsl_init(
x = list(
a = a,
b = b,
c = c
)
) |>
tsl_transform(
f = f_rescale_local
)
tsl_plot(
tsl,
ylim = "absolute",
xlim = c("2022-01-01", "2025-01-01"),
guide = FALSE
)
a <- as.vector(tsl$a$x)
c <- as.vector(tsl$c$x)
xy_dtw <- dtw::dtw(
x = a,
y = c,
keep = TRUE
)
dtw::dtwPlotTwoWay(d = xy_dtw, offset = 2, xlab = "", ylab = "", main = "", lwd = 1.5, lty = 1, col = c("red4", "black"))
par(mar = c(0, 0, 0, 0), xpd = TRUE)
legend("bottom",inset = c(0, -0.5), c("a","c"), lwd = 1.5, ncol = 2, bty = "n", col = c("red4", "black"))
dtw::dtwPlotTwoWay(
d = xy_dtw,
offset = 2,
xlab = "",
ylab = "",
main = "",
lwd = 1.5,
lty = 1,
col = c("red4", "black")
)
points(x = 0.295, y = 0.74, cex = 3, col = "blue4")
points(x = 0.43, y = 0.16, cex = 6, col = "blue4")
par(mar = c(0, 0, 0, 0), xpd = TRUE)
legend(
"bottom",
inset = c(0, -0.5),
c("a","c"),
lwd = 1.5,
ncol = 2,
bty = "n",
col = c("red4", "black")
)
tsl <- tsl |>
tsl_transform(
f = f_scale_local
) |>
tsl_subset(
names = c("a", "c")
)
tsl_plot(
tsl,
ylim = "absolute",
xlim = c("2022-01-01", "2025-01-01"),
guide = FALSE
)
m.dist <- distantia::psi_distance_matrix(
x = tsl$a,
y = tsl$c,
distance = "euclidean"
)
distantia::utils_matrix_plot(
m = m.dist,
diagonal_width = 0
)
m.cost <- distantia::psi_cost_matrix(
dist_matrix = m.dist,
diagonal = TRUE
)
distantia::utils_matrix_plot(
m = m.cost,
diagonal_width = 0,
text_cex = 0.9
)
m.cost.path <- distantia::psi_cost_path(
dist_matrix = m.dist,
cost_matrix = m.cost,
diagonal = TRUE
)
distantia::utils_matrix_plot(
m = m.cost,
path = m.cost.path,
text_cex = 0.9
)
cost.sum <- distantia::psi_cost_path_sum(
path = m.cost.path
)
tsl <- tsl_initialize(
x = cities_temperature,
name_column = "name",
time_column = "time"
) |>
tsl_subset(
names = c("London", "Kinshasa"),
time = c("2000-01-01", "2010-01-01")
)
distantia_dtw_plot(tsl = tsl, text_cex = 0.9)
tsl_scaled <- tsl |>
tsl_transform(
f = f_detrend_poly,
degree = 10
) |>
tsl_smooth() |>
tsl_transform(
f = f_scale_local
)
distantia_dtw_plot(tsl = tsl_scaled, text_cex = 0.9)
m <- matrix(data = 0.1, nrow = 1000, ncol = 1000)
utils::object.size(m)
m <- matrix(data = 0.1, nrow = 10000, ncol = 10000)
utils::object.size(m)
sqrt(2)
