slope = 1,
col = "gray50",
lty = 2
) +
labs(
title = paste("Pearson Correlation between DTW and LS:", round(correlation, 2)),
x = "Psi score - Dynamic Time Warping",
y = "Psi score - Lock-Step",
color = "Difference\nLS - DTW"
) +
theme_bw()
correlation <- stats::cor(df_table$psi_dtw, df_table$psi_ls)
df_table$difference <- abs(df_table$psi_ls -  df_table$psi_dtw)
ggplot(df_table) +
aes(
x = psi_dtw,
y = psi_ls,
color = difference
) +
geom_point(
alpha = 0.75
) +
geom_smooth(
method = "lm",
col = "gray20",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
scale_color_gradientn(
colors = distantia::color_continuous()
) +
labs(
title = paste("Pearson Correlation between DTW and LS:", round(correlation, 2)),
x = "Psi score - Dynamic Time Warping",
y = "Psi score - Lock-Step",
color = "Difference\nLS - DTW"
) +
theme_bw()
correlation <- stats::cor(df_table$psi_dtw, df_table$psi_ls)
df_table$difference <- abs(df_table$psi_ls -  df_table$psi_dtw)
ggplot(df_table) +
aes(
x = psi_dtw,
y = psi_ls,
color = difference
) +
geom_point(
alpha = 0.75
) +
geom_smooth(
method = "lm",
col = "gray20",
formula = y ~ poly(x, degree = 2, raw = TRUE)
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
scale_color_gradientn(
colors = distantia::color_continuous()
) +
labs(
title = paste("Pearson Correlation between DTW and LS:", round(correlation, 2)),
x = "Psi score - Dynamic Time Warping",
y = "Psi score - Lock-Step",
color = "Difference\nLS - DTW"
) +
theme_bw()
correlation <- stats::cor(df_table$psi_dtw, df_table$psi_ls)
df_table$difference <- abs(df_table$psi_ls -  df_table$psi_dtw)
ggplot(df_table) +
aes(
x = psi_dtw,
y = psi_ls,
color = difference
) +
geom_point(
alpha = 0.75
) +
geom_smooth(
method = mgcv::gam,
col = "gray20",
formula = y ~ s(x, k = 3)
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
scale_color_gradientn(
colors = distantia::color_continuous()
) +
labs(
title = paste("Pearson Correlation between DTW and LS:", round(correlation, 2)),
x = "Psi score - Dynamic Time Warping",
y = "Psi score - Lock-Step",
color = "Difference\nLS - DTW"
) +
theme_bw()
correlation <- stats::cor(df_table$psi_dtw, df_table$psi_ls)
df_table$difference <- abs(df_table$psi_ls -  df_table$psi_dtw)
ggplot(df_table) +
aes(
x = psi_dtw,
y = psi_ls,
color = difference
) +
geom_point(
alpha = 0.75
) +
geom_smooth(
method = mgcv::gam,
col = "gray20",
formula = y ~ s(x)
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
scale_color_gradientn(
colors = distantia::color_continuous()
) +
labs(
title = paste("Pearson Correlation between DTW and LS:", round(correlation, 2)),
x = "Psi score - Dynamic Time Warping",
y = "Psi score - Lock-Step",
color = "Difference\nLS - DTW"
) +
theme_bw()
df_psi_stats <- distantia::distantia_stats(
df = df_psi
)
df_psi <- df_psi_dtw
df_psi_stats <- distantia::distantia_stats(
df = df_psi
)
reactable::reactable(
df_psi_stats |>
mutate_if(is.numeric, round, 3),
pagination = FALSE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = nrow(df_psi_stats),
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
library(blogdown)
blogdown:::preview_site()
blogdown:::preview_site()
profvis(
expr = function(){
Sys.sleep(1)
Sys.sleep(2)
}
)
library(profvis)
profvis(
expr = function(){
Sys.sleep(1)
Sys.sleep(2)
}
)
library(profvis)
profvis(
expr = {function(){
Sys.sleep(1)
Sys.sleep(2)
}}
)
library(profvis)
f <- function(){
Sys.sleep(1)
Sys.sleep(2)
}
profvis({f()})
library(profvis)
f <- function(){
Sys.sleep(1)
Sys.sleep(2)
}
profvis(f())
library(profvis)
f <- function(){
Sys.sleep(1)
Sys.sleep(2)
}
profvis({f()})
library(profvis)
f <- function(){
cumsum(1:10)
Sys.sleep(2)
}
profvis({f()})
library(profvis)
f <- function(){
cumsum(1:10)
Sys.sleep(2)
}
profvis({f})
library(profvis)
f <- function(){
cumsum(1:10)
Sys.sleep(2)
}
profvis({f()})
library(profvis)
f <- function(){
cumsum(1:1000)
Sys.sleep(2)
}
profvis({f()})
library(profvis)
f1 <- function(){
cumsum(1:1000)
}
f2 <- function(){
Sys.sleep(1)
}
profvis({f1(); f2()})
library(profvis)
f1 <- function(){
cumsum(1:1000)
}
f2 <- function(){
Sys.sleep(1)
}
f <- function(){
f1()
f2()
}
profvis({f()})
library(profvis)
f1 <- function(){
cumsum(1:1000)
}
f2 <- function(){
Sys.sleep(1)
}
f <- function(){
f1()
f2()
}
profvis({f()})
f1 <- function(){
cumsum(1:1000)
}
f2 <- function(){
Sys.sleep(1)
}
f <- function(){
f1()
f2()
}
f()
library(profvis)
f1 <- function(){
cumsum(1:1000)
}
f2 <- function(){
Sys.sleep(1)
}
f <- function(){
f1()
f2()
}
profvis({f()})
library(profvis)
f1 <- function(){
cumsum(1:1000)
}
f2 <- function(){
Sys.sleep(1)
}
f <- function(){
f1()
f2()
}
profvis({f()})
f1 <- function(){
cumsum(1:1000)
}
f2 <- function(){
Sys.sleep(1)
}
f <- function(){
f1()
f2()
}
f()
profvis(expr = f())
f1 <- function(){
Sys.sleep(1)
}
f2 <- function(){
Sys.sleep(2)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
library(profvis)
f1 <- function(){
runif(1000)
}
f2 <- function(){
rnorm(10000)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
library(profvis)
f1 <- function(){
runif(10000)
}
f2 <- function(){
rnorm(10000)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
f1 <- function(){
runif(1000000)
}
f2 <- function(){
rnorm(1000000)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
f1 <- function(){
rnorm(1000)
}
f2 <- function(){
rnorm(1000000)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
help(rnorm)
f1 <- function(){
stats::rnorm(n = 10e5)
}
f2 <- function(){
stats::rnorm(n = 10e6)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
library(profvis)
f1 <- function(){
stats::rnorm(n = 10e5)
}
f2 <- function(){
stats::binom(n = 10e6)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
library(profvis)
f1 <- function(){
stats::rnorm(n = 10e5)
}
f2 <- function(){
stats::rbinom(n = 10e6)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
library(profvis)
f1 <- function(){
stats::rnorm(n = 10e5)
}
f2 <- function(){
stats::rbinom(size = 10e6)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
help(rbinom)
library(profvis)
f1 <- function(){
stats::rnorm(n = 10e5)
}
f2 <- function(){
stats::rnorm(n = 10e6)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
library(profvis)
f1 <- function(){
stats::rnorm(n = 10e6)
}
f2 <- function(){
stats::rnorm(n = 10e6)
}
f <- function(){
f1()
f2()
}
profvis(expr = f())
help("rchisq")
library(profvis)
f <- function(){
stats::rnorm(n = 10e6)
stats::runif(n = 10e6)
}
profvis(expr = f())
help(runif)
help(rnorm)
profvis(expr = {
stats::rnorm(n = 10e6)
stats::runif(n = 10e6)
}
)
library(profvis)
f <- function(){
stats::rnorm(n = 10e6)
stats::runif(n = 10e6)
}
profvis(expr = f())
library(profvis)
f <- function(){
stats::rnorm(n = 10e7)
stats::runif(n = 10e7)
}
profvis(expr = f())
library(profvis)
f <- function(){
stats::rnorm(n = 10e6)
stats::runif(n = 10e6)
}
profvis(expr = f())
profvis(expr = {f()})
library(profvis)
f <- function(){
stats::rnorm(n = 10e6)
stats::runif(n = 10e6)
}
profvis(expr = f())
library(profvis)
f <- function(){
stats::rnorm(n = 10e6)
stats::runif(n = 10e6)
}
profvis(expr = f())
x <- stats::rnorm(n = 10e6)
y <- stats::runif(n = 10e6)
x*y
library(profvis)
f <- function(){
x <- stats::rnorm(n = 10e6)
y <- stats::runif(n = 10e6)
x*y
}
profvis(expr = f())
library(profvis)
f <- function(){
x <- stats::rnorm(n = 10e6)
y <- stats::runif(n = 10e6)
}
profvis(expr = f())
library(profvis)
f <- function(){
x <- stats::rnorm(n = 10e6)
y <- stats::runif(n = 10e6)
}
profvis(expr = f())
f <- function(){
stats::rnorm(n = 10e6)
stats::runif(n = 10e6)
}
profvis(expr = f())
help(Rprof)
help(runif)
library(lineprof)
install.packages("lineprof")
install.packages("pryr")
