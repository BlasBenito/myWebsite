y = "Predicted psi"
) +
theme_bw()
df_model$psi_predicted <- stats::predict(object = m)
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi"
) +
theme_bw()
df_model |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.numeric), ~ round(.x, 2)
)
) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
plot(m)
plot(m)
summary(m)
summary(m)$r.squared
x <- summary(m)
x
x$sigma
round(summary(m)$sigma, 2)
m <- ranger::ranger(
formula = psi ~ distance + area + economy + population,
data = df_model
)
df_model$psi_predicted <- stats::predict(object = m)
df_model$psi_predicted <- stats::predict(
object = m,
data = df_model
)$predictions
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi",
title = "Calibration plot - Random Forest"
) +
theme_bw()
summary(m)
print(m)
m$r.squared
visreg::visreg(
fit = m,
xvar = "population",
line = line_params
)
help(visreg)
visreg::visreg(
fit = m,
xvar = "population",
line = line_params,
data = df_model
)
m$r.squared
print(m)
m <- ranger::ranger(
formula = psi ~ distance + area + economy + population,
data = df_model,
importance = "permutation"
)
m$variable.importance
data.frame(
variable = names(m$variable.importance),
importance = m$variable.importance
) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE
)
data.frame(
variable = names(m$variable.importance),
importance = m$variable.importance
) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE,
rownames = FALSE
)
data.frame(
variable = names(m$variable.importance),
importance = m$variable.importance
) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
reactable(
striped = TRUE,
fullWidth = FALSE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE,
rownames = FALSE
)
df_model$psi_predicted <- stats::predict(
object = m,
data = df_model
)$predictions
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi",
title = "Calibration plot - Random Forest"
) +
theme_bw()
stop_server()
serve_site()
stop_server()
build_site()
serve_site()
df_time <- distantia::tsl_time(
tsl = tsl
)
knitr::opts_chunk$set(
fig.width = 8,
fig.height = 6
)
library(distantia)
library(zoo)
library(dplyr)
library(mapview)
library(reactable)
library(factoextra)
library(coefplot)
library(visreg)
library(ranger)
la_population <- mapview(
covid_counties,
zcol = "population",
label = "name"
)
htmlwidgets::saveWidget(
la_population@map,
file = "la_population.html",
selfcontained = TRUE
)
rm(la_population)
covid_prevalence |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
tsl <- distantia::tsl_initialize(
x = covid_prevalence,
name_column = "name",
time_column = "time"
)
names(tsl)
attributes(tsl[[1]])$name
attributes(tsl[[2]])$name
zoo::index(tsl[["Alameda"]]) |>
head()
zoo::coredata(tsl[["Alameda"]]) |>
head()
distantia::tsl_plot(
tsl = tsl,
columns = 3,
guide = FALSE,
text_cex = 1.2
)
distantia::tsl_plot(
tsl = tsl_subset(
tsl = tsl,
names = c("Los_Angeles", "Kings"),
time = c("2021-09-01", "2022-01-31")
),
guide = FALSE
)
df_time <- distantia::tsl_time(
tsl = tsl
)
df_stats <- distantia::tsl_stats(
tsl = tsl,
lags = 1:6 #weeks
)
df_stats |>
dplyr::select(name, min, q1, median, q3, max, sd, range, iq_range, skewness, kurtosis) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 2))) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
df_stats |>
select(name, dplyr::contains("lag")) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 2))) |>
dplyr::rename_with(~ gsub("ac_", "", .)) |>
dplyr::rename_with(~ gsub("_", "", .)) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
sf_stats <- dplyr::inner_join(
x = covid_counties[, "name"],
y = df_stats,
by = "name"
)
mapview::mapview(
sf_stats,
zcol = "q3",
layer.name = "Max prevalence",
label = "name",
col.regions = distantia::color_continuous()
)
df_stats_2021 <- distantia::tsl_stats(
tsl = tsl_subset(
tsl = tsl,
time = c("2021-01-01", "2021-12-31")
),
lags = 1:6
)
df_stats_2021 <- distantia::tsl_stats(
tsl = tsl_subset(
tsl = tsl,
names = c("Napa", "San_Francisco"),
time = c("2021-01-01", "2021-12-31")
),
lags = 1:6
)
df_stats_2021
knitr::opts_chunk$set(
fig.width = 8,
fig.height = 6
)
library(distantia)
library(zoo)
library(dplyr)
library(mapview)
library(reactable)
library(factoextra)
library(coefplot)
library(visreg)
library(ranger)
la_population <- mapview(
covid_counties,
zcol = "population",
label = "name"
)
htmlwidgets::saveWidget(
la_population@map,
file = "la_population.html",
selfcontained = TRUE
)
rm(la_population)
covid_prevalence |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
tsl <- distantia::tsl_initialize(
x = covid_prevalence,
name_column = "name",
time_column = "time"
)
names(tsl)
attributes(tsl[[1]])$name
attributes(tsl[[2]])$name
zoo::index(tsl[["Alameda"]]) |>
head()
zoo::coredata(tsl[["Alameda"]]) |>
head()
distantia::tsl_plot(
tsl = tsl,
columns = 3,
guide = FALSE,
text_cex = 1.2
)
distantia::tsl_plot(
tsl = tsl_subset(
tsl = tsl,
names = c("Los_Angeles", "Kings"),
time = c("2021-09-01", "2022-01-31")
),
guide = FALSE
)
df_time <- distantia::tsl_time(
tsl = tsl
)
df_time |>
dplyr::select(name, class, units, length, resolution, begin, end) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
df_stats <- distantia::tsl_stats(
tsl = tsl,
lags = 1:6 #weeks
)
df_stats |>
dplyr::select(name, min, q1, median, q3, max, sd, range, iq_range, skewness, kurtosis) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 2))) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
df_stats |>
select(name, dplyr::contains("lag")) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 2))) |>
dplyr::rename_with(~ gsub("ac_", "", .)) |>
dplyr::rename_with(~ gsub("_", "", .)) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
sf_stats <- dplyr::inner_join(
x = covid_counties[, "name"],
y = df_stats,
by = "name"
)
max_prevalence <- mapview(
sf_stats,
zcol = "max",
label = "name",
col.regions = distantia::color_continuous()
)
htmlwidgets::saveWidget(
max_prevalence@map,
file = "max_prevalence.html",
selfcontained = TRUE
)
rm(max_prevalence)
tsl_smol <- distantia::tsl_subset(
tsl = tsl,
names = c("San_Francisco", "Napa", "Solano"),
time = c("2021-01-01", "2023-01-01")
)
distantia::tsl_plot(
tsl = tsl_smol,
guide = FALSE,
text_cex = 1.3
)
tsl_smol |>
distantia::distantia_ls() |>
dplyr::mutate(
psi = round(psi, 3)
) |>
reactable::reactable(
resizable = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
tsl_smol |>
distantia::distantia_dtw() |>
dplyr::mutate(
psi = round(psi, 3)
) |>
reactable::reactable(
resizable = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = FALSE
)
library(dtw)
xy_dtw <- dtw::dtw(
x = tsl_smol$Solano$prevalence,
y = tsl_smol$San_Francisco$prevalence,
keep = TRUE
)
dtw::dtwPlotTwoWay(xy_dtw, offset = 0.5)
