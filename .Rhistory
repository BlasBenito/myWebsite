par(mfrow = c(2, 2), cex.axis = 1.5, cex.lab = 2)
line_params <- list(col = "red4", lwd = 1)
visreg::visreg(
fit = m,
xvar = "distance",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "area",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "economy",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "population",
line = line_params
)
df_model$psi_predicted <- stats::predict(object = m)
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi"
) +
theme_bw()
m <- stats::lm(
formula = psi ~ distance * area * economy * population,
data = df_model
)
m |>
summary() |>
broom::tidy() |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
dplyr::arrange(dplyr::desc(estimate)) |>
dplyr::filter(term != "(Intercept)") |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE
)
m <- stats::lm(
formula = psi ~ distance * area + economy + population,
data = df_model
)
m |>
summary() |>
broom::tidy() |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
dplyr::arrange(dplyr::desc(estimate)) |>
dplyr::filter(term != "(Intercept)") |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE
)
summary(m)
AIC(m)
m <- stats::lm(
formula = psi ~ distance + area + economy + population,
data = df_model
)
AIC(m)
m <- stats::lm(
formula = psi ~ distance * area + economy + population,
data = df_model
)
m |>
summary() |>
broom::tidy() |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
dplyr::arrange(dplyr::desc(estimate)) |>
dplyr::filter(term != "(Intercept)") |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE
)
par(mfrow = c(2, 2), cex.axis = 1.5, cex.lab = 2)
line_params <- list(col = "red4", lwd = 1)
visreg::visreg(
fit = m,
xvar = "distance",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "area",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "economy",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "population",
line = line_params
)
df_model$psi_predicted <- stats::predict(object = m)
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi"
) +
theme_bw()
m <- stats::lm(
formula = psi ~ distance * area + economy + population,
data = df_model
)
m <- stats::lm(
formula = psi ~ distance + area + economy + population,
data = df_model
)
m |>
summary() |>
broom::tidy() |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
dplyr::arrange(dplyr::desc(estimate)) |>
dplyr::filter(term != "(Intercept)") |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE
)
df_model <- distantia::distantia_model_frame(
response_df = df_psi,
predictors_df = covid_counties,
composite_predictors = list(
economy = c(
"poverty_percentage",
"median_income",
"domestic_product",
"employed_percentage",
"daily_miles_traveled"
)
),
#scale = TRUE is broken in version <= 2.0.2
scale = FALSE
) |>
#selecting and renaming columns
dplyr::transmute(
psi,
economy,
population,
area = sqrt(area_hectares),
distance = geographic_distance
) |>
#scale
dplyr::mutate(
dplyr::across(
dplyr::all_of(c("economy", "distance", "population", "area")),
~ as.numeric(scale(.x))
)
)
m <- stats::lm(
formula = psi ~ distance + area + economy + population,
data = df_model
)
m |>
summary() |>
broom::tidy() |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
dplyr::arrange(dplyr::desc(estimate)) |>
dplyr::filter(term != "(Intercept)") |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE
)
df_model <- distantia::distantia_model_frame(
response_df = df_psi,
predictors_df = covid_counties,
composite_predictors = list(
economy = c(
"poverty_percentage",
"median_income",
"domestic_product",
"employed_percentage",
"daily_miles_traveled"
)
),
#scale = TRUE is broken in version <= 2.0.2
scale = FALSE
) |>
#selecting and renaming columns
dplyr::transmute(
psi,
economy,
population,
area = area_hectares,
distance = geographic_distance
) |>
#scale
dplyr::mutate(
dplyr::across(
dplyr::all_of(c("economy", "distance", "population", "area")),
~ as.numeric(scale(.x))
)
)
m <- stats::lm(
formula = psi ~ distance + area + economy + population,
data = df_model
)
m |>
summary() |>
broom::tidy() |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
dplyr::arrange(dplyr::desc(estimate)) |>
dplyr::filter(term != "(Intercept)") |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE
)
0.1499
/0.0878
0.1499/0.0878
0.1499/0.0343
par(mfrow = c(2, 2), cex.axis = 1.5, cex.lab = 2)
line_params <- list(col = "red4", lwd = 1)
visreg::visreg(
fit = m,
xvar = "distance",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "area",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "economy",
line = line_params
)
visreg::visreg(
fit = m,
xvar = "population",
line = line_params
)
df_model$psi_predicted <- stats::predict(object = m)
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi"
) +
theme_bw()
df_model$psi_predicted <- stats::predict(object = m)
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi"
) +
theme_bw()
df_model |>
dplyr::mutate(
dplyr::across(
dplyr::where(is.numeric), ~ round(.x, 2)
)
) |>
reactable::reactable(
pagination = TRUE,
searchable = TRUE,
sortable = TRUE,
showSortable = TRUE,
filterable = TRUE,
resizable = TRUE,
defaultPageSize = 10,
showPageSizeOptions = TRUE,
striped = TRUE,
compact = TRUE,
wrap = FALSE,
fullWidth = TRUE
)
plot(m)
plot(m)
summary(m)
summary(m)$r.squared
x <- summary(m)
x
x$sigma
round(summary(m)$sigma, 2)
m <- ranger::ranger(
formula = psi ~ distance + area + economy + population,
data = df_model
)
df_model$psi_predicted <- stats::predict(object = m)
df_model$psi_predicted <- stats::predict(
object = m,
data = df_model
)$predictions
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi",
title = "Calibration plot - Random Forest"
) +
theme_bw()
summary(m)
print(m)
m$r.squared
visreg::visreg(
fit = m,
xvar = "population",
line = line_params
)
help(visreg)
visreg::visreg(
fit = m,
xvar = "population",
line = line_params,
data = df_model
)
m$r.squared
print(m)
m <- ranger::ranger(
formula = psi ~ distance + area + economy + population,
data = df_model,
importance = "permutation"
)
m$variable.importance
data.frame(
variable = names(m$variable.importance),
importance = m$variable.importance
) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE
)
data.frame(
variable = names(m$variable.importance),
importance = m$variable.importance
) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
reactable(
striped = TRUE,
fullWidth = TRUE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE,
rownames = FALSE
)
data.frame(
variable = names(m$variable.importance),
importance = m$variable.importance
) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ round(.x, 4))) |>
reactable(
striped = TRUE,
fullWidth = FALSE,
resizable = TRUE,
sortable = TRUE,
showSortable = TRUE,
rownames = FALSE
)
df_model$psi_predicted <- stats::predict(
object = m,
data = df_model
)$predictions
ggplot(df_model) +
aes(
x = psi,
y = psi_predicted
) +
geom_point(alpha = 0.5) +
coord_fixed(
xlim = range(c(df_model$psi, df_model$psi_predicted)),
ylim = range(c(df_model$psi, df_model$psi_predicted))
) +
geom_smooth(
method = "lm",
col = "red4",
formula = y ~ x
) +
geom_abline(
intercept = 0,
slope = 1,
col = "gray50",
lty = 2
) +
labs(
x = "Observed psi",
y = "Predicted psi",
title = "Calibration plot - Random Forest"
) +
theme_bw()
stop_server()
serve_site()
stop_server()
build_site()
serve_site()
